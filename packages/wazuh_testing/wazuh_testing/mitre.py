# Copyright (C) 2015-2019, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import json
import os
import re
import shutil
import socket
import sys
import time
from collections import Counter
from datetime import timedelta
from stat import ST_ATIME, ST_MTIME

from jq import jq
from jsonschema import validate

from wazuh_testing.tools import TimeMachine

_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')

WAZUH_PATH = os.path.join('/', 'var', 'ossec')
ALERTS_FILE_PATH = os.path.join(WAZUH_PATH, 'logs', 'alerts', 'alerts.json')
WAZUH_CONF_PATH = os.path.join(WAZUH_PATH, 'etc', 'ossec.conf')
LOG_FILE_PATH = os.path.join(WAZUH_PATH, 'logs', 'ossec.log')

FIFO = 'fifo'
SYSLINK = 'sys_link'
SOCKET = 'socket'
REGULAR = 'regular'

CHECK_ALL = 'check_all'
CHECK_ID = 'check_id'
CHECK_TACTICS = 'check_tactics'

REQUIRED_MITRE_PARAMETERS = {
    CHECK_ID: 'id',
    CHECK_TACTICS: 'tactics',
    CHECK_ALL: {CHECK_ID, CHECK_TACTICS}
}

_REQUIRED_MITRE = {
    'id',
    'tactics'
}

_last_log_line = 0

def validate_mitre_event(event, checks=None):
    """ Checks if event is properly formatted according to some checks.

    :param event: dict representing an event generated by syscheckd
    :param checks: set of xml CHECK_* options. Default {CHECK_ALL}.

    :return: None
    """

    def get_required_attributes(check_attributes, result=None):
        result = set() if result is None else result
        for check in check_attributes:
            mapped = REQUIRED_MITRE_PARAMETERS[check]
            if isinstance(mapped, str):
                result |= {mapped}
            elif isinstance(mapped, list):
                result |= set(mapped)
            elif isinstance(mapped, set):
                result |= get_required_attributes(mapped, result=result)
        return result

    checks = {CHECK_ALL} if checks is None else checks
    with open(os.path.join(_data_path, 'mitre_event.json'), 'r') as f:
        schema = json.load(f)
    validate(schema=schema, instance=event)

    # Check Mitre
    assert ('mitre' in event['rule'])
    assert (event['rule']['mitre'].keys() ^ _REQUIRED_MITRE == set())

def callback_detect_mitre_event(line):
    match = re.match(r'.*Sending mitre event: (.+)$', line)
    if match:
        return json.loads(match.group(1))
    return None