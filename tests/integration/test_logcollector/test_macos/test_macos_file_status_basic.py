'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'wazuh-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector generates the 'file_status.json'
       file used by the 'only future events' option when using ULS (unified logging system) events in
       macOS systems. Log data collection is the real-time process of making sense out of the records
       generated by servers or devices. This component can receive logs through text files or Windows
       event logs. It can also directly receive logs via remote syslog which is useful
       for firewalls and other such devices.

components:
    - logcollector

suite: macos

targets:
    - agent

daemons:
    - wazuh-logcollector

os_platform:
    - macos

os_version:
    - macOS Catalina
    - macOS Server

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/localfile.html
    - https://developer.apple.com/documentation/os/logging

tags:
    - logcollector_macos
'''
import pytest
import wazuh_testing.logcollector as logcollector
import sys

from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.logcollector import LOG_COLLECTOR_GLOBAL_TIMEOUT
from wazuh_testing.tools.monitoring import FileMonitor, wait_file
from wazuh_testing.tools.file import read_json
from os.path import dirname, join, realpath
from re import match
if sys.platform != 'win32':
    from wazuh_testing.tools import LOGCOLLECTOR_FILE_STATUS_PATH

# Marks
pytestmark = [pytest.mark.darwin, pytest.mark.tier(level=0)]

# Configuration
test_data_path = join(dirname(realpath(__file__)), 'data')
configurations_path = join(test_data_path, 'wazuh_macos_file_status_basic.yaml')

parameters = [{'ONLY_FUTURE_EVENTS': 'yes'}, {'ONLY_FUTURE_EVENTS': 'no'}]
metadata = [{'only-future-events': 'yes'}, {'only-future-events': 'no'}]

daemons_handler_configuration = {'daemons': ['wazuh-logcollector'], 'ignore_errors': False}

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
configuration_ids = [f"only_future_events_{x['ONLY_FUTURE_EVENTS']}" for x in parameters]

# Max number of characters to be displayed in the log's debug message
sample_log_length = 100
# Time in seconds to update the file_status.json
file_status_update_time = 4

local_internal_options = {'logcollector.debug': 2,
                          'logcollector.vcheck_files': file_status_update_time,
                          'logcollector.sample_log_length': sample_log_length}

macos_message = {'command': 'logger',
                 'message': 'Logger testing message - file status'}

# Expected message to be used on the "callback_macos_uls_log" callback
expected_message = logcollector.format_macos_message_pattern(macos_message['command'], macos_message['message'])


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=configuration_ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_macos_file_status_basic(restart_logcollector_required_daemons_package, truncate_log_file,
                                 delete_file_status_json, configure_local_internal_options_module,
                                 get_configuration, configure_environment, file_monitoring, daemons_handler_module):
    '''
    description: Check if the 'wazuh-logcollector' builds and updates the 'file_status.json' file from ULS events.
                 For this purpose, the test will configure a 'localfile' section using the macOS settings.
                 Once the logcollector is started, it will wait until the macOS ULS module is ready, and then,
                 the test will generate 'unified logging system' (ULS) events by using a logger tool. After this,
                 it will check if the 'file_status.json' file has been created and if the 'macos' key is inside it.
                 Finally, the test will verify that the 'file_status.json' file has valid content.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - restart_logcollector_required_daemons_package:
            type: fixture
            brief: Restart the 'wazuh-agentd', 'wazuh-logcollector', and 'wazuh-modulesd' daemons.
        - truncate_log_file:
            type: fixture
            brief: Clear the 'ossec.log' file.
        - delete_file_status_json:
            type: fixture
            brief: Delete the 'file_status.json' file from logcollector.
        - configure_local_internal_options_module:
            type: fixture
            brief: Set internal configuration for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.
        - daemons_handler_module:
            type: fixture
            brief: Handler of Wazuh daemons.

    assertions:
        - Verify that the logcollector detects the macOS ULS events.
        - Verify that the logcollector generates the 'file_status.json' file with valid content.

    input_description: A configuration template (test_macos_file_status_basic) is contained in an external YAML
                       file (wazuh_macos_file_status_basic.yaml). That template is combined with two test cases
                       defined in the module. Those include configuration settings
                       for the 'wazuh-logcollector' daemon.

    expected_output:
        - r'Monitoring macOS logs with.*'
        - r'Monitoring macOS logs with.*log stream'
        - r'Logger testing message - file status' (testing macOS ULS message)
        - r'"macos"'

    tags:
        - logs
    '''
    log_monitor.start(timeout=LOG_COLLECTOR_GLOBAL_TIMEOUT,
                      callback=logcollector.callback_monitoring_macos_logs,
                      error_message=logcollector.GENERIC_CALLBACK_ERROR_TARGET_SOCKET)

    # Watches the ossec.log to check when logcollector starts the macOS ULS module
    log_monitor.start(timeout=LOG_COLLECTOR_GLOBAL_TIMEOUT,
                      callback=logcollector.callback_logcollector_log_stream_log(),
                      error_message='Logcollector did not start.')

    logcollector.generate_macos_logger_log(macos_message['message'])

    log_monitor.start(timeout=LOG_COLLECTOR_GLOBAL_TIMEOUT,
                      callback=logcollector.callback_macos_uls_log(expected_message),
                      error_message="MacOS ULS log was not found: '{}'.".format(expected_message))

    # Waits for file_status.json to be created, with a timeout about the time needed to update the file
    wait_file(LOGCOLLECTOR_FILE_STATUS_PATH, LOG_COLLECTOR_GLOBAL_TIMEOUT)

    # Watches the file_status.json file for the "macos" key
    file_status_monitor = FileMonitor(LOGCOLLECTOR_FILE_STATUS_PATH)

    file_status_monitor.start(timeout=LOG_COLLECTOR_GLOBAL_TIMEOUT,
                              callback=logcollector.callback_file_status_macos_key(),
                              error_message="The 'macos' key could not be found on the file_status.json file")

    file_status_json = read_json(LOGCOLLECTOR_FILE_STATUS_PATH)

    conf_predicate = get_configuration['sections'][0]['elements'][2]['query']['value']
    conf_level = get_configuration['sections'][0]['elements'][2]['query']['attributes'][0]['level']
    conf_type = get_configuration['sections'][0]['elements'][2]['query']['attributes'][1]['type']

    # Check if json has a structure
    assert file_status_json['macos'], "Error finding 'macos' key"

    assert file_status_json['macos']['timestamp'], "Error finding 'timestamp' key inside 'macos'"

    assert match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}[-+]\d{4}$', file_status_json['macos']['timestamp']), \
        'Error of timestamp format'

    assert file_status_json['macos']['settings'], "Error finding 'settings' key inside 'macos'"

    assert file_status_json['macos']['settings'] \
        == logcollector.compose_macos_log_command(conf_type, conf_level, conf_predicate)
