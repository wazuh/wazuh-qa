'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'wazuh-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the 'wazuh-logcollector' daemon properly gathers
       macOS unified logging system (ULS) events when working with multi-line logs. Log data
       collection is the real-time process of making sense out of the records generated by servers
       or devices. This component can receive logs through text files or Windows event logs. It can
       also directly receive logs via remote syslog which is useful for firewalls and other such devices.

components:
    - logcollector

suite: macos

targets:
    - agent

daemons:
    - wazuh-logcollector

os_platform:
    - macos

os_version:
    - macOS Catalina
    - macOS Server

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/localfile.html
    - https://developer.apple.com/documentation/os/logging

tags:
    - logcollector_macos
'''
import os
import pytest
import time

import wazuh_testing.logcollector as logcollector
from wazuh_testing.tools.configuration import load_wazuh_configurations
# Marks
pytestmark = [pytest.mark.darwin, pytest.mark.tier(level=0)]

# Configuration
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_macos_format_basic.yaml')

configurations = load_wazuh_configurations(configurations_path, __name__)
local_internal_options = {'logcollector.debug': 2,
                          'logcollector.sample_log_length': 200}

daemons_handler_configuration = {'daemons': ['wazuh-logcollector']}

macos_log_messages = [
    {
        'command': 'logger',
        'message': "Here is a multiline log. Line 0\nLine 1.\nLast line.\n",
    }
]

macos_uls_time_to_wait_after_start = 3
macos_logcollector_start = 30


# fixtures
@pytest.fixture(scope="module", params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope="module")
def get_connection_configuration():
    """Get configurations from the module."""
    return logcollector.DEFAULT_AUTHD_REMOTED_SIMULATOR_CONFIGURATION


@pytest.mark.parametrize('macos_message', macos_log_messages)
def test_macos_multiline_values(configure_local_internal_options_module, restart_logcollector_required_daemons_package,
                                get_configuration, configure_environment, macos_message, file_monitoring,
                                daemons_handler_module):
    '''
    description: Check if the 'wazuh-logcollector' daemon collects multiline events from the macOS ULS
                 (unified logging system). For this purpose, the test will configure a 'localfile' section
                 using the macOS settings. Once the logcollector is started, it will check if the 'monitoring'
                 event is triggered, indicating that the logcollector starts to monitor the macOS logs. Then,
                 the test will generate a multiline ULS event by using a logger tool. Finally, the test
                 will verify that a logcollector event with the testing log message has been generated.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - configure_local_internal_options_module:
            type: fixture
            brief: Set internal configuration for testing.
        - restart_logcollector_required_daemons_package:
            type: fixture
            brief: Restart the 'wazuh-agentd', 'wazuh-logcollector', and 'wazuh-modulesd' daemons.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - macos_message:
            type: dict
            brief: Dictionary with the testing macOS ULS event.
        - daemons_handler_module:
            type: fixture
            brief: Handler of Wazuh daemons.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.

    assertions:
        - Verify that the logcollector starts monitoring the macOS ULS log messages.
        - Verify that the logcollector correctly gather unified logging system (ULS) events with multiline format.

    input_description: A configuration template (test_macos_multiline_values) is contained in an external
                       YAML file (wazuh_macos_format_basic.yaml). That template is combined with a
                       test case defined in the module. That include configuration settings
                       for the 'wazuh-logcollector' daemon.

    expected_output:
        - r'Monitoring macOS logs with.*'
        - r'Here is a multiline log.*'

    tags:
        - logs
    '''
    macos_logcollector_monitored = logcollector.callback_monitoring_macos_logs
    log_monitor.start(timeout=macos_logcollector_start, callback=macos_logcollector_monitored,
                      error_message=logcollector.GENERIC_CALLBACK_ERROR_TARGET_SOCKET)
    time.sleep(macos_uls_time_to_wait_after_start)

    multiline_message = macos_message['message'].split('\n')[:-1]
    multiline_logger = f"\"$(printf \"{macos_message['message']}\")\""
    logcollector.generate_macos_logger_log(multiline_logger)

    for line in multiline_message:
        log_monitor.start(timeout=logcollector.LOG_COLLECTOR_GLOBAL_TIMEOUT,
                          callback=logcollector.callback_read_macos_message(line),
                          error_message=f"Error expected line: {line}")
