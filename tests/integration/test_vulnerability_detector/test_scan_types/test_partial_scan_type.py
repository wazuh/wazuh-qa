'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux, Alma Linux and NVD Database.

components:
    - vulnerability_detector

suite: scan_types

targets:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - scan_types
'''
import os
import pytest

from wazuh_testing import ALERTS_JSON_PATH
from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.tools.configuration import update_configuration_template
from wazuh_testing.db_interface import agent_db
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_partial_scan.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_partial_scan_start.yaml')
t2_cases_path = os.path.join(TEST_CASES_PATH, 'cases_partial_scan_no_alert_after_no_changes.yaml')
t3_cases_path = os.path.join(TEST_CASES_PATH, 'cases_partial_scan_alert_after_changes.yaml')
t4_cases_path = os.path.join(TEST_CASES_PATH, 'cases_partial_scan_remove_vulnerability_alert.yaml')

# Custom feeds path
custom_redhat_oval_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_JSON_FEED)
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)

# test_partial_scan_start configurations
t1_configuration_parameters, t1_configuration_metadata, t1_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)

# test_partial_scan_no_alert_after_no_changes configurations
t2_configuration_parameters, t2_configuration_metadata, t2_case_ids = get_test_cases_data(t2_cases_path)
t2_configurations = load_configuration_template(configurations_path, t2_configuration_parameters,
                                                t2_configuration_metadata)

# test_partial_scan_alert_after_changes configurations
t3_configuration_parameters, t3_configuration_metadata, t3_case_ids = get_test_cases_data(t3_cases_path)
t3_configurations = load_configuration_template(configurations_path, t3_configuration_parameters,
                                                t3_configuration_metadata)

# test_partial_scan_remove_vulnerability_alert configurations
t4_configuration_parameters, t4_configuration_metadata, t4_case_ids = get_test_cases_data(t4_cases_path)
t4_configurations = load_configuration_template(configurations_path, t4_configuration_parameters,
                                                t4_configuration_metadata)

# Set offline custom feeds configuration
t1_configurations = update_configuration_template(
    t1_configurations,  ['CUSTOM_REDHAT_OVAL_FEED', 'CUSTOM_REDHAT_JSON_FEED', 'CUSTOM_NVD_JSON_FEED'],
    [custom_redhat_oval_feed_path, custom_redhat_json_feed_path, custom_nvd_json_feed_path])
t2_configurations = update_configuration_template(
    t2_configurations,  ['CUSTOM_REDHAT_OVAL_FEED', 'CUSTOM_REDHAT_JSON_FEED', 'CUSTOM_NVD_JSON_FEED'],
    [custom_redhat_oval_feed_path, custom_redhat_json_feed_path, custom_nvd_json_feed_path])
t3_configurations = update_configuration_template(
    t3_configurations,  ['CUSTOM_REDHAT_OVAL_FEED', 'CUSTOM_REDHAT_JSON_FEED', 'CUSTOM_NVD_JSON_FEED'],
    [custom_redhat_oval_feed_path, custom_redhat_json_feed_path, custom_nvd_json_feed_path])
t4_configurations = update_configuration_template(
    t4_configurations,  ['CUSTOM_REDHAT_OVAL_FEED', 'CUSTOM_REDHAT_JSON_FEED', 'CUSTOM_NVD_JSON_FEED'],
    [custom_redhat_oval_feed_path, custom_redhat_json_feed_path, custom_nvd_json_feed_path])


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata', zip(t1_configurations, t1_configuration_metadata), ids=t1_case_ids)
def test_partial_scan_start(configuration, metadata, set_wazuh_configuration_vdt, truncate_monitored_files,
                            clean_cve_tables_func, prepare_partial_scan_with_vuln_packages, restart_modulesd_function):
    '''
    description: Check that the partial scan starts.

    test_phases:
        - Mock an agent with packages.
        - Update sync_info packages data for that mocked agent.
        - Force a partial scan setting the current datetime in last full scan DB data.
        - Set a custom Wazuh configuration, with custom feeds for OVAL and NVD.
        - Restart wazuh-modulesd.
        - Check in log that the partial scan starts.

    wazuh_min_version: 4.3.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_partial_scan_with_vuln_packages:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check that the partial scan log appears.

    input_description:
        - The `configuration_partial_scan.yaml` file provides the module configuration for this test.
        - The `cases_partial_scan_start` file provides the test cases.

    expected_output:
        - f"A partial scan will be run on agent '{agent_id}'"
    '''
    agent_id = prepare_partial_scan_with_vuln_packages

    # Check (in log) that the partial scan has been launched
    evm.check_partial_scan_start_log(agent_id=agent_id, timeout=vd.T_10)


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata', zip(t2_configurations, t2_configuration_metadata), ids=t2_case_ids)
def test_partial_scan_no_alert_after_no_changes(configuration, metadata, set_wazuh_configuration_vdt,
                                                truncate_monitored_files, clean_cve_tables_func,
                                                prepare_full_scan_with_vuln_package, setup_alert_monitor,
                                                restart_modulesd_function):
    '''
    description: Check that the partial scan does not report previously reported vulnerabilities.

    test_phases:
        - Mock an agent with a vulnerable package.
        - Update sync_info packages data for that mocked agent.
        - Force a full scan setting the last full scan DB data.
        - Set a custom Wazuh configuration, with custom feeds for OVAL and NVD.
        - Restart wazuh-modulesd.
        - Check that the package vulnerability has been reported in the full scan.
        - Wait for the partial scan.
        - Check that the package vulnerability previously reported has not been reported again.

    wazuh_min_version: 4.3.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_full_scan_with_vuln_package:
            type: fixture
            brief: Setup the initial test state.
        - setup_alert_monitor:
            type: fixture
            brief: Setup the Alerts json file monitor
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check that the package vulnerability is reported the first time.
        - Check that the package vulnerability is not reported in the next partial scan.

    input_description:
        - The `configuration_partial_scan.yaml` file provides the module configuration for this test.
        - The `cases_partial_scan_no_alert_after_no_changes` file provides the test cases.

    expected_output:
        - f".*"agent":."id":"{agent_id}".*{cve} affects {package}"
        - f"NOT .*"agent":."id":"{agent_id}".*{cve} affects {package}"
    '''
    agent_id = prepare_full_scan_with_vuln_package

    # Check that the alert appears
    evm.check_vulnerability_affects_alert(alert_monitor=setup_alert_monitor, agent_id=agent_id,
                                          cve=vd.VULNERABLE_PACKAGES[0]['cveid'],
                                          package=vd.VULNERABLE_PACKAGES[0]['name'])

    # Check for the next partial scan
    evm.check_partial_scan_start_log(agent_id=agent_id, timeout=vd.T_10)

    # Check that there is no alert (since it was generated in the last scan)
    with pytest.raises(TimeoutError):
        evm.check_vulnerability_affects_alert(agent_id=agent_id, timeout=vd.T_10,
                                              package=vd.VULNERABLE_PACKAGES[0]['name'],
                                              cve=vd.VULNERABLE_PACKAGES[0]['cveid'],
                                              alert_monitor=setup_alert_monitor)
        raise AssertionError("Vulnerability alert was generated again after being reported in the last scan")


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata', zip(t3_configurations, t3_configuration_metadata), ids=t3_case_ids)
def test_partial_scan_alert_after_changes(configuration, metadata, set_wazuh_configuration_vdt,
                                          truncate_monitored_files, clean_cve_tables_func,
                                          prepare_full_scan_with_vuln_package, restart_modulesd_function):
    '''
    description: Check that the partial scan reports a new vulnerability from the latest scan.

    test_phases:
        - Mock an agent with a vulnerable package.
        - Update sync_info packages data for that mocked agent.
        - Force a full scan setting the last full scan DB data.
        - Set a custom Wazuh configuration, with custom feeds for OVAL and NVD.
        - Restart wazuh-modulesd.
        - Wait for the partial scan.
        - Insert a new vulnerable package.
        - Check that there is a new alert reporting the new vulnerability.

    wazuh_min_version: 4.3.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_full_scan_with_vuln_package:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check that the new vulnerability has been reported as alert.

    input_description:
        - The `configuration_partial_scan.yaml` file provides the module configuration for this test.
        - The `cases_partial_scan_alert_after_changes` file provides the test cases.

    expected_output:
        - f".*"agent":."id":"{agent_id}".*{cve} affects {package}"
    '''
    agent_id = prepare_full_scan_with_vuln_package

    # Check for the next partial scan
    evm.check_partial_scan_start_log(agent_id=agent_id, timeout=vd.T_15)

    # Insert a new vulnerable package
    agent_db.insert_package(name=vd.VULNERABLE_PACKAGES[1]['name'], version=vd.VULNERABLE_PACKAGES[1]['version'],
                            source=vd.VULNERABLE_PACKAGES[1]['name'], agent_id=agent_id, vendor='Red Hat, Inc.')

    # Check that the alert appears
    evm.check_vulnerability_affects_alert(cve=vd.VULNERABLE_PACKAGES[1]['cveid'], agent_id=agent_id,
                                          package=vd.VULNERABLE_PACKAGES[1]['name'])


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata', zip(t4_configurations, t4_configuration_metadata), ids=t4_case_ids)
def test_partial_scan_remove_vulnerability_alert(configuration, metadata, set_wazuh_configuration_vdt,
                                                 truncate_monitored_files, clean_cve_tables_func,
                                                 prepare_full_scan_with_vuln_package, restart_modulesd_function):
    '''
    description: Check that the partial scan reports removed vulnerabilities.

    test_phases:
        - Mock an agent with a vulnerable package.
        - Update sync_info packages data for that mocked agent.
        - Force a full scan setting the last full scan DB data.
        - Set a custom Wazuh configuration, with custom feeds for OVAL and NVD.
        - Restart wazuh-modulesd.
        - Check that the package vulnerability is reported
        - Remove the vulnerable package.
        - Wait for the next partial scan.
        - Check that there is a new alert reporting the removed vulnerability.

    wazuh_min_version: 4.3.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_full_scan_vulnerable:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check that the removed vulnerability has been reported as alert.

    input_description:
        - The `configuration_partial_scan.yaml` file provides the module configuration for this test.
        - The `cases_partial_scan_remove_vulnerability_alert` file provides the test cases.

    expected_output:
        - f".*"agent":."id":"{agent_id}".*{cve} affecting {package} was solved."
    '''
    agent_id = prepare_full_scan_with_vuln_package

    # Wait for detecting the package vulnerability
    evm.check_vulnerability_affects_alert(cve=vd.VULNERABLE_PACKAGES[0]['cveid'], agent_id=agent_id,
                                          package=vd.VULNERABLE_PACKAGES[0]['name'])

    # Remove the vulnerable package
    agent_db.delete_package(agent_id=agent_id, package=vd.VULNERABLE_PACKAGES[0]['name'])

    # Check for the next partial scan
    evm.check_partial_scan_start_log(agent_id=agent_id, timeout=vd.T_15)

    # Check the removed vulnerability alert
    evm.check_vulnerability_scan_remove_alert(agent_id=agent_id, cve=vd.VULNERABLE_PACKAGES[0]['cveid'],
                                              package=vd.VULNERABLE_PACKAGES[0]['name'])
