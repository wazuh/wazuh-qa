'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the Vulnerability Detector module performs the baseline scan type correctly.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - "https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/\
       how_it_works.html#scan_types"

tags:
    - settings
'''
import os
import time

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import ALERT_FILE_PATH, LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
configurations_path = os.path.join(test_data_path, 'wazuh_baseline_scan_type.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)
test_packet_vendor = 'WazuhIntegrationTests'
test_packet_version = '1.0.0'
test_packet_0_name = 'wazuhintegrationpackage-0'

# Offline feeds
rhel_oval_feed_path = os.path.join(test_feed_path, vd.CUSTOM_REDHAT_OVAL_FEED)
rhel_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_REDHAT_JSON_FEED)
nvd_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_NVD_FEED)
parameters = [{
    'RHEL_FEED_PATH': rhel_oval_feed_path,
    'RHEL_JSON_FEED_PATH': rhel_json_feed_path,
    'NVD_JSON_FEED_PATH': nvd_json_feed_path
}]
metadata = parameters

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=["baseline_scan_config"])
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='function')
def mock_system(mock_agent):
    """
    It mocks an agent with syscollector packages in a synced state
    """
    vd.insert_osinfo(agent=mock_agent)

    vd.insert_package(agent=mock_agent, name=test_packet_0_name, vendor=test_packet_vendor,
                      version=test_packet_version, source='NULL')

    # Force sync status for packages
    vd.update_sync_info(agent=mock_agent)

    # Forcing a baseline-scan
    vd.update_last_full_scan(0, mock_agent)

    yield mock_agent

    # Clean tables
    vd.clean_vd_tables(agent=mock_agent)


def test_baseline_scan_type(get_configuration, configure_environment, restart_modulesd, mock_system):
    '''
    description: Checks if the baseline scan is performed as expected. To do this,
                 a fresh agent (without a previous scan) is inserted and a feed update is simulated. After this,
                 it checks the `ossec.log` file for the message indicating that a baseline scan is being performed.

    wazuh_min_version: 4.3

    parameters:
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.
        - mock_system:
            type: callable
            brief: Add a simulated agent to the manager for testing.

    assertions:
        - A baseline scan is performed when the agent wasn't scanned yet.

    input_description: A configuration to perform Vulnerability Detector scans.

    expected_output:
        - f"A baseline scan will be run on agent '{agent_id}'"
        - f"Finished vulnerability assessment for agent '{agent_id}'"
        - f"CVE-000 affects wazuhintegrationpackage-0"
    '''
    check_apply_test({'baseline_scan_type'}, get_configuration['tags'])
    agent_id = mock_system

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    # Callbacks
    callback_detect_baseline_scan_start = vd.make_vuln_callback(f"A baseline scan will be run on agent '{agent_id}'")
    callback_detect_scan_end = vd.make_vuln_callback(f"Finished vulnerability assessment for agent '{agent_id}'")
    callback_detect_test_package_alert = vd.make_vuln_callback(pattern=f"CVE-000 affects wazuhintegrationpackage-0",
                                                               prefix='.*')

    # Detect baseline scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_baseline_scan_start,
                            error_message='No baseline scan detected in log.')

    # Check if the NVD vulnerability is detected.
    vd.check_detected_vulnerabilities_number(agent=agent_id,
                                             wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=1,
                                             feed_source='NVD', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Detect baseline scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No scan end detected in log.')

    # Ensure the test package does not generate an alert.
    with pytest.raises(TimeoutError):
        wazuh_alert_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                                  callback=callback_detect_test_package_alert,
                                  error_message='No alert detected in log.')
