# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import datetime
import os
import time

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import ALERT_FILE_PATH, LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
configurations_path = os.path.join(test_data_path, 'wazuh_full_scan_type.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)
test_packet_vendor = 'WazuhIntegrationTests'
test_packet_version = '1.0.0'
test_packet_version_not_vulnerable = '2.1.0'
test_packet_0_name = 'wazuhintegrationpackage-0'
test_packet_1_name = 'wazuhintegrationpackage-1'
test_packet_2_name = 'wazuhintegrationpackage-2'
test_packet_0_cve = 'CVE-000'
test_packet_1_cve = 'CVE-001'
test_packet_2_cve = 'CVE-002'

# Offline feeds
buster_oval_feed_path = os.path.join(test_feed_path, vd.CUSTOM_DEBIAN_OVAL_FEED)
debian_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_DEBIAN_JSON_FEED)
nvd_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_NVD_FEED)
parameters = [{
    'BUSTER_FEED_PATH': buster_oval_feed_path,
    'DEBIAN_JSON_FEED_PATH': debian_json_feed_path,
    'NVD_JSON_FEED_PATH': nvd_json_feed_path
}]
metadata = parameters

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope="function")
def add_simulated_agent(get_configuration):
    """Add a simulated agent to the system with basic functionality.

    For this purpose, it adds a dummy agent, inserts in its database (sys_programs table) a test package,
    and configures its database to appear to be up to date (sync_info table)."""
    agent_id, sender, injector = vd.create_simulated_agent()
    vd.insert_package(agent=agent_id, name=test_packet_0_name, vendor=test_packet_vendor,
                      version=test_packet_version, source='NULL')
    vd.insert_package(agent=agent_id, name=test_packet_1_name, vendor=test_packet_vendor,
                      version=test_packet_version, source='NULL')
    vd.update_sync_info(agent=agent_id)
    yield agent_id
    injector.stop_receive()
    vd.delete_simulated_agent(agent_id)


def test_full_scan_type(get_configuration, configure_environment, restart_modulesd, add_simulated_agent):
    """Check if the Vulnerability Detector module performs the full scan type correctly.

    For this purpose, the manager is configured to use custom feeds that include vulnerabilities associated
    with test packages. Two packages are added to the database of the simulated agent and, after enrollment
    of the agent, the vulnerability detector must launch the first scan on it, which is of BASELINE type.

    When the BASELINE scan has been performed, an additional package will be inserted and the second package
    installed on the tested agent will be updated to a non-vulnerable version, then the necessary conditions
    to launch a FULL_SCAN scan type will be triggered.

    Once the full scan is complete, we will verify that two vulnerabilities remain in the "vuln_cves" table
    and two alerts have been generated (one for the vulnerability detected and another for the vulnerability
    removed by the update). This will be confirmed by checking the log and alert files respectively.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset ossec.log and start a new monitor.
        add_simulated_agent (fixture): Add a simulated agent to the manager for testing.
    """
    check_apply_test({'full_scan_type'}, get_configuration['tags'])
    agent_id = add_simulated_agent

    # Callbacks
    callback_detect_baseline_scan_start = vd.make_vuln_callback(f"A baseline scan will be run on agent '{agent_id}'")
    callback_detect_full_scan_start = vd.make_vuln_callback(f"A full scan will be run on agent '{agent_id}'")
    callback_detect_scan_end = vd.make_vuln_callback(f"Finished vulnerability assessment for agent '{agent_id}'")
    callback_detect_test_package_0_vuln = vd.make_vuln_callback(
        pattern=f"Package '{test_packet_0_name}' inserted into the vulnerability '{test_packet_0_cve}'.")
    callback_detect_test_package_1_vuln_removal = vd.make_vuln_callback(
        pattern=f"Package '{test_packet_1_name}' not vulnerable to '{test_packet_1_cve}'.")
    callback_detect_test_package_2_vuln = vd.make_vuln_callback(
        pattern=f"Package '{test_packet_2_name}' inserted into the vulnerability '{test_packet_2_cve}'.")
    callback_detect_test_package_1_alert_removal = vd.make_vuln_callback(
        pattern=f"{test_packet_1_cve} affecting {test_packet_1_name} was eliminated", prefix='.*')
    callback_detect_test_package_2_alert_add = vd.make_vuln_callback(
        pattern=f"{test_packet_2_cve} affects {test_packet_2_name}", prefix='.*')

    # Detect the baseline scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_baseline_scan_start,
                            error_message='No baseline scan start has been detected in the log.')

    # Check if the NVD vulnerabilities are detected.
    vd.check_detected_vulnerabilities_number(agent=agent_id,
                                             wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=2,
                                             feed_source='NVD', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Detect baseline scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No baseline scan end has been detected in the log.')

    # Update test package 1 to a non-vulnerable version.
    vd.update_package(agent=agent_id, package=test_packet_1_name, version=test_packet_version_not_vulnerable)

    # Insert the test package 2.
    vd.insert_package(agent=agent_id, name=test_packet_2_name, vendor=test_packet_vendor,
                      version=test_packet_version, source='NULL')

    # Set LAST_FULL_SCAN to the lowest possible value on the VULN_METADATA table of agent DB to force a full scan.
    vd.modify_agent_scan_timestamp(agent=agent_id, timestamp=1)

    # Detect a full scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_full_scan_start,
                            error_message='No full scan start has been detected in the log.')

    # Ensure that the vulnerability of package 0 is detected in the full scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT, update_position=False,
                            callback=callback_detect_test_package_0_vuln,
                            error_message='No vulnerability for test package 0 was detected in the log.')

    # Ensure that the vulnerability removal of package 1 is detected in the full scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_test_package_1_vuln_removal,
                            error_message='No vulnerability removal for test package 1 was detected in the log.')

    # Ensure that the vulnerability of package 2 is detected in the full scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT, update_position=False,
                            callback=callback_detect_test_package_2_vuln,
                            error_message='No vulnerability for test package 2 was detected in the log.')

    # Detect a full scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No full scan end has been detected in the log.')

    # Ensure test package 1 does generate an alert at vulnerability removal.
    wazuh_alert_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT, update_position=False,
                              callback=callback_detect_test_package_1_alert_removal,
                              error_message='No alert for test package 1 has been detected in the log.')

    # Ensure the test package 2 does generate an alert.
    wazuh_alert_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                              callback=callback_detect_test_package_2_alert_add,
                              error_message='No alert for test package 2 has been detected in the log.')
