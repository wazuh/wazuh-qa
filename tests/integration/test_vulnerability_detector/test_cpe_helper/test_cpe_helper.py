'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux, Alma Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - cpe_helper
'''
import os
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.tools.configuration import update_configuration_template
from wazuh_testing import CPE_HELPER_PATH
from wazuh_testing.db_interface import agent_db
from wazuh_testing.tools.file import read_json_file, copy, write_json_file, read_file, write_file
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd

pytestmark = [pytest.mark.server]


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
TEST_PACKAGES_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'vulnerable_packages')

# Configuration and cases data
t1_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_wrong_tags.yaml')
t2_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t2_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_wrong_values.yaml')
t3_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t3_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_missing_fields.yaml')
t4_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t4_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_empty_fields.yaml')
t5_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t5_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_empty_vendor_version.yaml')
t6_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t6_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_update.yaml')

# Custom paths
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)
custom_nvd_alternative_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_ALTERNATIVE_FEED)
custom_cpe_helper_path = os.path.join(TEST_FEEDS_PATH, 'cpe_helper', vd.CUSTOM_CPE_HELPER_TEMPLATE)
custom_vulnerable_packages_path = os.path.join(TEST_PACKAGES_PATH, vd.CUSTOM_VULNERABLE_PACKAGES)
custom_vulnerable_pkg_empty_vendor_path = os.path.join(TEST_PACKAGES_PATH,
                                                       vd.CUSTOM_VULNERABLE_PKG_EMPTY_VENDOR)
custom_vulnerable_pkg_empty_vendor_version_path = os.path.join(TEST_PACKAGES_PATH,
                                                               vd.CUSTOM_VULNERABLE_PKG_EMPTY_VENDOR_VERSION)
custom_vulnerable_packages_update_path = os.path.join(TEST_PACKAGES_PATH, vd.CUSTOM_VULNERABLE_PACKAGES_UPDATE)

# CPE indexing packages test configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_test_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(t1_configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)
t1_systems = [metadata['system'] for metadata in t1_configuration_metadata]

# CPE indexing packages test configurations (t2)
t2_configuration_parameters, t2_configuration_metadata, t2_test_case_ids = get_test_cases_data(t2_cases_path)
t2_configurations = load_configuration_template(t2_configurations_path, t2_configuration_parameters,
                                                t2_configuration_metadata)
t2_systems = [metadata['system'] for metadata in t2_configuration_metadata]

# CPE indexing packages test configurations (t3)
t3_configuration_parameters, t3_configuration_metadata, t3_test_case_ids = get_test_cases_data(t3_cases_path)
t3_configurations = load_configuration_template(t3_configurations_path, t3_configuration_parameters,
                                                t3_configuration_metadata)
t3_systems = [metadata['system'] for metadata in t3_configuration_metadata]

# CPE indexing packages test configurations (t4)
t4_configuration_parameters, t4_configuration_metadata, t4_test_case_ids = get_test_cases_data(t4_cases_path)
t4_configurations = load_configuration_template(t4_configurations_path, t4_configuration_parameters,
                                                t4_configuration_metadata)
t4_systems = [metadata['system'] for metadata in t4_configuration_metadata]

# CPE indexing packages test configurations (t5)
t5_configuration_parameters, t5_configuration_metadata, t5_test_case_ids = get_test_cases_data(t5_cases_path)
t5_configurations = load_configuration_template(t5_configurations_path, t5_configuration_parameters,
                                                t5_configuration_metadata)
t5_systems = [metadata['system'] for metadata in t5_configuration_metadata]

# CPE indexing packages test configurations (t6)
t6_configuration_parameters, t6_configuration_metadata, t6_test_case_ids = get_test_cases_data(t6_cases_path)
t6_configurations = load_configuration_template(t6_configurations_path, t6_configuration_parameters,
                                                t6_configuration_metadata)
t6_systems = [metadata['system'] for metadata in t6_configuration_metadata]

# Set offline custom feeds configuration
t1_configurations = update_configuration_template(t1_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t2_configurations = update_configuration_template(t2_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t3_configurations = update_configuration_template(t3_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t4_configurations = update_configuration_template(t4_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t5_configurations = update_configuration_template(t5_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t6_configurations = update_configuration_template(t6_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_alternative_json_feed_path])

# Global vars
t1_agent_packages = [read_json_file(custom_vulnerable_packages_path) for metadata in t1_configuration_metadata]
t2_agent_packages = [read_json_file(custom_vulnerable_packages_path) for metadata in t2_configuration_metadata]
t3_agent_packages = [read_json_file(custom_vulnerable_packages_path) for metadata in t3_configuration_metadata]
t4_agent_packages = [read_json_file(custom_vulnerable_pkg_empty_vendor_path)
                     for metadata in t4_configuration_metadata]
t5_agent_packages = [read_json_file(custom_vulnerable_pkg_empty_vendor_version_path)
                     for metadata in t5_configuration_metadata]
t6_agent_packages = [read_json_file(custom_vulnerable_packages_update_path)
                     for metadata in t6_configuration_metadata]


def replace_cpe_json_fields(tags=None, values=None):
    """Replace the tags and values of the generic_custom_cpe_helper.json file.

    Args:
        tags (dict): Dictionary with tags names values
        values (dict): Dictionary with tag values
    """
    filedata = read_file(CPE_HELPER_PATH)

    for key, value in tags.items():
        filedata = filedata.replace(key, value)

    for key, value in values.items():
        filedata = filedata.replace(key, value)

    write_file(CPE_HELPER_PATH, data=filedata)


def remove_item(item, remove_key=""):
    """Remove recursively the tags and values of the dictionary.

    Args:
        item (dict): Dictionary
        remove_key (str): Item to be deleted
    """
    if isinstance(item, dict):
        for key in list(item.keys()):
            if key == remove_key:
                del item[key]
            else:
                remove_item(item[key], remove_key)
    elif isinstance(item, list):
        for i in reversed(range(len(item))):
            if item[i] == remove_key:
                del item[i]
            else:
                remove_item(item[i], remove_key)
    else:
        pass
    return item


def remove_cpe_json_fields(tags=None):
    """Remove the tags and values of the generic_custom_cpe_helper.json file.

    Args:
        tags (list): Dictionary with tags names values
    """
    tags = [] if tags is None else tags

    if len(tags) > 0:
        filedata = read_json_file(CPE_HELPER_PATH)

        for item in tags:
            filedata = remove_item(filedata, item)

        write_json_file(CPE_HELPER_PATH, filedata)


@pytest.fixture(scope='function')
def prepare_environment(request, metadata, agent_system, agent_packages, mock_agent_with_custom_system):
    """Prepare the environment with a mocked agent, vulnerable packages and a custom cpe_helper.

    - Mock an agent with a specified system.
    - Insert mocked vulnerables packages.
    - Update packages sync status.
    - Copy the custom CPE helper to the dictionaries folder.
    - Force full scan.

    Args:
        metadata (dict): Test case metadata.
        agent_system (str): System to set to the mocked agent.
        agent_packages (list): List of vulnerable packages
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    for package in agent_packages:
        try:
            version = package['version']
        except KeyError:
            version = ''
        try:
            format = package['format']
        except KeyError:
            format = 'rpm'
        try:
            architecture = package['architecture']
        except KeyError:
            architecture = 'x64'
        agent_db.insert_package(name=package['name'], format=format, architecture=architecture,
                                agent_id=mock_agent_with_custom_system, vendor=package['vendor'],
                                version=version, source=package['name'])

    # Sync packages info
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-packages")
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-hotfixes")

    # Make a backup data from inital CPE helper
    cpe_helper_backup_data = read_json_file(CPE_HELPER_PATH)

    # Set the custom CPE helper
    copy(custom_cpe_helper_path, CPE_HELPER_PATH)

    # Remove the values of the CPE helper
    remove_cpe_json_fields(tags=metadata['missing_field'])

    # Replace the values of the CPE helper
    replace_cpe_json_fields(tags=metadata['tags'], values=metadata['values'])

    yield mock_agent_with_custom_system

    # Restore the CPE helper backup data
    write_json_file(CPE_HELPER_PATH, cpe_helper_backup_data)


@pytest.mark.skip(reason="Vulnerability Detector was refactored. Some tests are deprecated.")
@pytest.mark.tier(level=2)
@pytest.mark.parametrize('configuration, metadata, agent_system, agent_packages',
                         zip(t1_configurations, t1_configuration_metadata, t1_systems, t1_agent_packages),
                         ids=t1_test_case_ids)
def test_cpe_indexing_wrong_tags(configuration, metadata, agent_system, agent_packages, set_wazuh_configuration_vdt,
                                 truncate_monitored_files, clean_cve_tables_func, prepare_environment,
                                 restart_modulesd_function):
    '''
    description: Check for invalid tags in the cpe_helper.json file.

    test_phases:
    - setup:
        - Load Wazuh light configuration, with custom feeds.
        - Apply ossec.conf configuration changes according to the configuration template and use case.
        - Apply custom settings in local_internal_options.conf.
        - Mock an agent with Windows system and vulnerable packages.
        - Backup the original cpe_helper.json and copy a custom CPE helper with new tags and values.
        - Truncate wazuh logs.
        - Restart wazuh-modulesd daemon to apply configuration changes.
    - test:
        - Check in the log for specific information.
    - teardown:
        - Truncate wazuh logs.
        - Restore initial configuration, both ossec.conf and local_internal_options.conf.
        - Restore the original cpe_helper.json

    wazuh_min_version: 4.6.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log according to the stage.

    input_description:
        - The `configuration_cpe_indexing_wrong_tags.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_wrong_tags.yaml` file provides the test cases.

    expected_output:
        - fr"WARNING: .* Invalid tag found when parsing the CPE dictionary: '{field}'
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
        - r"DEBUG: .* The 'Wazuh CPE Helper' update has failed, so the NVD feed will not be updated."
    '''
    expected_result = metadata['expected_result']
    if expected_result == 'invalid_tag':
        evm.check_cpe_helper_invalid_tag_warning(metadata['wrong_field'])
    elif expected_result == 'package_indexed':
        for package in agent_packages:
            evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                  agent_id=prepare_environment)
    elif expected_result == 'nvd_update_failed':
        evm.check_cpe_helper_invalid_tag_fail()
    elif expected_result == 'package_not_indexed':
        for package in agent_packages:

            # Check that packages were not indexed due to the wrong tags.
            with pytest.raises(TimeoutError):
                evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                      agent_id=prepare_environment)
                raise AttributeError('Unexpected log')


@pytest.mark.skip(reason="Vulnerability Detector was refactored. Some tests are deprecated.")
@pytest.mark.tier(level=2)
@pytest.mark.parametrize('configuration, metadata, agent_system, agent_packages',
                         zip(t2_configurations, t2_configuration_metadata, t2_systems, t2_agent_packages),
                         ids=t2_test_case_ids)
def test_cpe_indexing_wrong_values(configuration, metadata, agent_system, agent_packages, set_wazuh_configuration_vdt,
                                   truncate_monitored_files, clean_cve_tables_func, prepare_environment,
                                   restart_modulesd_function):
    '''
    description: Check for invalid values in the cpe_helper.json file.

    test_phases:
    - setup:
        - Load Wazuh light configuration, with custom feeds.
        - Apply ossec.conf configuration changes according to the configuration template and use case.
        - Apply custom settings in local_internal_options.conf.
        - Mock an agent with Windows system and vulnerable packages.
        - Backup the original cpe_helper.json and copy a custom CPE helper with new tags and values.
        - Truncate wazuh logs.
        - Restart wazuh-modulesd daemon to apply configuration changes.
    - test:
        - Check in the log for specific information.
    - teardown:
        - Truncate wazuh logs.
        - Restore initial configuration, both ossec.conf and local_internal_options.conf.
        - Restore the original cpe_helper.json

    wazuh_min_version: 4.6.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log according to the stage.

    input_description:
        - The `configuration_cpe_indexing_wrong_values.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_wrong_values.yaml` file provides the test cases.

    expected_output:
        - fr"WARNING: .* Invalid tag found when parsing the CPE dictionary: '{field}'
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
        - r"ERROR: .* Invalid format version for the CPE helper: .*"
    '''
    expected_result = metadata['expected_result']
    if expected_result == 'invalid_tag':
        evm.check_cpe_helper_invalid_tag_warning(metadata['wrong_field'])
    elif expected_result == 'package_indexed':
        for package in agent_packages:
            evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                  agent_id=prepare_environment)
    elif expected_result == 'invalid_format':
        evm.check_cpe_helper_invalid_format_version()
    elif expected_result == 'package_not_indexed':
        for package in agent_packages:

            # Check that packages were not indexed due to the wrong values.
            with pytest.raises(TimeoutError):
                evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                      agent_id=prepare_environment)
                raise AttributeError('Unexpected log')


@pytest.mark.skip(reason="Vulnerability Detector was refactored. Some tests are deprecated.")
@pytest.mark.tier(level=2)
@pytest.mark.parametrize('configuration, metadata, agent_system, agent_packages',
                         zip(t3_configurations, t3_configuration_metadata, t3_systems, t3_agent_packages),
                         ids=t3_test_case_ids)
def test_cpe_indexing_missing_field(configuration, metadata, agent_system, agent_packages, set_wazuh_configuration_vdt,
                                    truncate_monitored_files, clean_cve_tables_func, prepare_environment,
                                    restart_modulesd_function):
    '''
    description: Check for log when there is a missing field in the cpe_helper.json file.

    test_phases:
    - setup:
        - Load Wazuh light configuration, with custom feeds.
        - Apply ossec.conf configuration changes according to the configuration template and use case.
        - Apply custom settings in local_internal_options.conf.
        - Mock an agent with Windows system and vulnerable packages.
        - Backup the original cpe_helper.json and copy a custom CPE helper with new tags and values.
        - Truncate wazuh logs.
        - Restart wazuh-modulesd daemon to apply configuration changes.
    - test:
        - Check in the log for specific information.
    - teardown:
        - Truncate wazuh logs.
        - Restore initial configuration, both ossec.conf and local_internal_options.conf.
        - Restore the original cpe_helper.json

    wazuh_min_version: 4.6.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log according to the stage.

    input_description:
        - The `configuration_cpe_indexing_missing_fields.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_missing_fields.yaml` file provides the test cases.

    expected_output:
        - r"ERROR: .* CVE database could not be updated.'
        - fr"ERROR: .* Could not insert the CPEs from the agent '{agent_id}' into the database.."
    '''
    expected_result = metadata['expected_result']
    if expected_result == 'package_indexed':
        for package in agent_packages:
            evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                  agent_id=prepare_environment)
    elif expected_result == 'error_updating_cve_database':
        evm.check_error_when_updating_cve_database()
    elif expected_result == 'package_not_indexed':
        for package in agent_packages:

            # Check that packages were not indexed due to the missing fields.
            with pytest.raises(TimeoutError):
                evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                      agent_id=prepare_environment)
                raise AttributeError('Unexpected log')
    elif expected_result == 'error_inserting_package':
        evm.check_error_inserting_package(agent_id=prepare_environment)


@pytest.mark.skip(reason="Vulnerability Detector was refactored. Some tests are deprecated.")
@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata, agent_system, agent_packages',
                         zip(t4_configurations, t4_configuration_metadata, t4_systems, t4_agent_packages),
                         ids=t4_test_case_ids)
def test_cpe_indexing_empty_fields(configuration, metadata, agent_system, agent_packages, set_wazuh_configuration_vdt,
                                   truncate_monitored_files, clean_cve_tables_func, prepare_environment,
                                   restart_modulesd_function):
    '''
    description: Check if the packages are indexed in the database by checking the respective log in the ossec.log file,
                 and if the alert of the vulnerable package comes out when some tag are empty.

    test_phases:
    - setup:
        - Load Wazuh light configuration, with custom feeds.
        - Apply ossec.conf configuration changes according to the configuration template and use case.
        - Apply custom settings in local_internal_options.conf.
        - Mock an agent with Windows system and vulnerable packages.
        - Backup the original cpe_helper.json and copy a custom CPE helper with new tags and values.
        - Truncate wazuh logs.
        - Restart wazuh-modulesd daemon to apply configuration changes.
    - test:
        - Check in the log and alert for specific information.
    - teardown:
        - Truncate wazuh logs.
        - Restore initial configuration, both ossec.conf and local_internal_options.conf.
        - Restore the original cpe_helper.json

    wazuh_min_version: 4.6.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log and alert.

    input_description:
        - The `configuration_cpe_indexing.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_missing_fields.yaml` file provides the test cases.

    expected_output:
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
        - fr".*"agent":."id":"{agent_id}".*{cve} affects {package}', prefix='.*"
    '''
    for package in agent_packages:
        evm.check_cpe_helper_packages_indexed(package_name=metadata['values']['PRODUCT_T_VALUE_0'],
                                              package_vendor=metadata['values']['VENDOR_T_VALUE'],
                                              agent_id=prepare_environment, timeout=vd.T_20)

        evm.check_vulnerability_affects_alert(agent_id=prepare_environment,
                                              package=metadata['values']['PRODUCT_T_VALUE_0'], cve=package['cveid'])


@pytest.mark.skip(reason="Vulnerability Detector was refactored. Some tests are deprecated.")
@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata, agent_system, agent_packages',
                         zip(t5_configurations, t5_configuration_metadata, t5_systems, t5_agent_packages),
                         ids=t5_test_case_ids)
def test_cpe_indexing_empty_vendor_version(configuration, metadata, agent_system, agent_packages,
                                           set_wazuh_configuration_vdt, truncate_monitored_files,
                                           clean_cve_tables_func, prepare_environment, restart_modulesd_function):
    '''
    description: Check that when vendor and version tags are empty, and the action tag is not the correct to
                 extract the version field, the package cannot be indexed.

    test_phases:
    - setup:
        - Load Wazuh light configuration, with custom feeds.
        - Apply ossec.conf configuration changes according to the configuration template and use case.
        - Apply custom settings in local_internal_options.conf.
        - Mock an agent with Windows system and vulnerable packages.
        - Backup the original cpe_helper.json and copy a custom CPE helper with new tags and values.
        - Truncate wazuh logs.
        - Restart wazuh-modulesd daemon to apply configuration changes.
    - test:
        - Check in the log and alert for specific information.
    - teardown:
        - Truncate wazuh logs.
        - Restore initial configuration, both ossec.conf and local_internal_options.conf.
        - Restore the original cpe_helper.json

    wazuh_min_version: 4.6.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log and alert.

    input_description:
        - The `configuration_cpe_indexing.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_missing_vendor_version.yaml` file provides the test cases.

    expected_output:
        - fr"DEBUG: .* Couldn't get the version of the CPE for the {package_name} package."
    '''
    evm.check_version_log(package_name=metadata['values']['PRODUCT_T_VALUE_0'])


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata, agent_system, agent_packages',
                         zip(t6_configurations, t6_configuration_metadata, t6_systems, t6_agent_packages),
                         ids=t6_test_case_ids)
def test_cpe_indexing_update(configuration, metadata, agent_system, agent_packages, set_wazuh_configuration_vdt,
                             truncate_monitored_files, clean_cve_tables_func, prepare_environment,
                             restart_modulesd_function):
    '''
    description: Check if the package is indexed in the database by checking the respective log in the ossec.log file
                 and display that the package is vulnerable with respect to the corresponding CVE.

    test_phases:
    - setup:
        - Load Wazuh light configuration, with custom feeds.
        - Apply ossec.conf configuration changes according to the configuration template and use case.
        - Apply custom settings in local_internal_options.conf.
        - Mock an agent with Windows system and vulnerable packages.
        - Backup the original cpe_helper.json and copy a custom CPE helper with new tags and values.
        - Truncate wazuh logs.
        - Restart wazuh-modulesd daemon to apply configuration changes.
    - test:
        - Check in the log and alert for specific information.
    - teardown:
        - Truncate wazuh logs.
        - Restore initial configuration, both ossec.conf and local_internal_options.conf.
        - Restore the original cpe_helper.json

    wazuh_min_version: 4.6.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - agent_packages
            type: list
            brief: List of vulnerable packages.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log and alert.

    input_description:
        - The `configuration_cpe_indexing.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_missing_fields.yaml` file provides the test cases.

    expected_output:
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
        - fr".*"agent":."id":"{agent_id}".*{cve} affects {package}', prefix='.*"
    '''
    for package in agent_packages:
        evm.check_cpe_helper_packages_indexed(package_name=metadata['values']['PRODUCT_T_VALUE_0'],
                                              package_vendor=metadata['values']['VENDOR_T_VALUE'],
                                              agent_id=prepare_environment, timeout=vd.T_20)

        evm.check_vulnerability_affects_alert(agent_id=prepare_environment,
                                              package=metadata['values']['PRODUCT_T_VALUE_0'], cve=package['cveid'])
