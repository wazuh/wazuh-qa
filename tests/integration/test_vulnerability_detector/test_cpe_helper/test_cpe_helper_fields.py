'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - cpe_helper
'''
import os
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.tools.configuration import update_configuration_template
from wazuh_testing import CPE_HELPER_PATH
from wazuh_testing.db_interface import agent_db
from wazuh_testing.tools.file import read_json_file, copy, write_json_file
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd

pytestmark = [pytest.mark.server]


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
TEST_PACKAGES_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'vulnerable_packages')

# Configuration and cases data
t1_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_wrong_tags.yaml')
t2_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_cpe_indexing.yaml')
t2_cases_path = os.path.join(TEST_CASES_PATH, 'cases_cpe_indexing_wrong_values.yaml')

# Custom paths
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)
custom_cpe_helper_path = os.path.join(TEST_FEEDS_PATH, 'cpe_helper', vd.CUSTOM_GENERIC_CPE_HELPER)
custom_vulnerable_packages_path = os.path.join(TEST_PACKAGES_PATH, vd.CUSTOM_VULNERABLE_PACKAGES)

# CPE indexing packages test configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_test_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(t1_configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)
t1_systems = [metadata['system'] for metadata in t1_configuration_metadata]

# CPE indexing packages test configurations (t2)
t2_configuration_parameters, t2_configuration_metadata, t2_test_case_ids = get_test_cases_data(t2_cases_path)
t2_configurations = load_configuration_template(t2_configurations_path, t2_configuration_parameters,
                                                t2_configuration_metadata)
t2_systems = [metadata['system'] for metadata in t2_configuration_metadata]

# Set offline custom feeds configuration
t1_configurations = update_configuration_template(t1_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])
t2_configurations = update_configuration_template(t2_configurations, ['CUSTOM_NVD_JSON_PATH'],
                                                  [custom_nvd_json_feed_path])

# Global vars
agent_packages = read_json_file(custom_vulnerable_packages_path)


def replace_cpe_json_fields(tags=None, values=None):
    """Replace the tags and values of the generic_custom_cpe_helper.json file.

    Args:
        tags (dict): Dictionary with tags names values
        values (dict): Dictionary with tag values
    """
    with open(CPE_HELPER_PATH, 'r') as file:
        filedata = file.read()
    for key, value in tags.items():
        filedata = filedata.replace(key, value)
    for key, value in values.items():
        filedata = filedata.replace(key, value)
    with open(CPE_HELPER_PATH, 'w') as file:
        file.write(filedata)


@pytest.fixture(scope='function')
def prepare_scan(request, metadata, agent_system, mock_agent_with_custom_system):
    """Prepare the environment to launch the vulnerability scan.

    - Mock an agent with a specified system.
    - Insert mocked vulnerables packages.
    - Update packages sync status.
    - Copy the custom CPE helper to the dictionaries folder.

    Args:
        metadata (dict): Test case metadata.
        agent_system (str): System to set to the mocked agent.
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    for package in agent_packages:
        agent_db.insert_package(name=package['name'], version=package['version'], source=package['name'],
                                vendor=package['vendor'], agent_id=mock_agent_with_custom_system)

    # Sync packages info
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-packages")
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-hotfixes")

    # Make a backup data from inital CPE helper
    cpe_helper_backup_data = read_json_file(CPE_HELPER_PATH)

    # Set the custom CPE helper
    copy(custom_cpe_helper_path, CPE_HELPER_PATH)

    # Replace the values of the CPE helper
    replace_cpe_json_fields(tags=metadata['tags'], values=metadata['values'])

    yield mock_agent_with_custom_system

    # Restore the CPE helper backup data
    write_json_file(CPE_HELPER_PATH, cpe_helper_backup_data)


@pytest.mark.parametrize('configuration, metadata, agent_system',
                         zip(t1_configurations, t1_configuration_metadata, t1_systems), ids=t1_test_case_ids)
def test_cpe_indexing_wrong_tags(configuration, metadata, agent_system, set_wazuh_configuration_vdt,
                                 truncate_monitored_files, clean_cve_tables_func, prepare_scan,
                                 restart_modulesd_function):
    '''
    description: Check for invalid tags in the cpe_helper.json file.

    test_phases:
        - Set a custom Wazuh configuration, with custom feeds.
        - Mock an agent with Windows system and vulnerable packages.
        - Copy a custom CPE helper and load new tags and values.
        - Restart wazuh-modulesd.
        - Check the ossec.log for specific information.

    wazuh_min_version: 4.4.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_scan:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log according to the stage.

    input_description:
        - The `configuration_cpe_indexing_wrong_tags.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_wrong_tags.yaml` file provides the test cases.

    expected_output:
        - fr"WARNING: .* Invalid tag found when parsing the CPE dictionary: '{field}'
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
        - r"DEBUG: .* The 'Wazuh CPE Helper' update has failed, so the NVD feed will not be updated."
    '''
    stage = metadata['stage']
    if 'stage_0' in stage:
        evm.check_cpe_helper_invalid_tag_warning(metadata['wrong_field'])
    if 'stage_1' in stage:
        for package in agent_packages:
            evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                  agent_id=prepare_scan)
    if 'stage_2' in stage:
        evm.check_cpe_helper_invalid_tag_fail()
    if 'stage_3' in stage:
        for package in agent_packages:
            with pytest.raises(TimeoutError):
                evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                      agent_id=prepare_scan)
                raise AttributeError(f'Unexpected log')


@pytest.mark.parametrize('configuration, metadata, agent_system',
                         zip(t2_configurations, t2_configuration_metadata, t2_systems), ids=t2_test_case_ids)
def test_cpe_indexing_wrong_values(configuration, metadata, agent_system, set_wazuh_configuration_vdt,
                                   truncate_monitored_files, clean_cve_tables_func, prepare_scan,
                                   restart_modulesd_function):
    '''
    description: Check for invalid values in the cpe_helper.json file.

    test_phases:
        - Set a custom Wazuh configuration, with custom feeds.
        - Mock an agent with Windows system and vulnerable packages.
        - Copy a custom CPE helper and load new tags and values.
        - Restart wazuh-modulesd.
        - Check the ossec.log for specific information.

    wazuh_min_version: 4.4.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_scan:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check for a specific log according to the stage.

    input_description:
        - The `configuration_cpe_indexing_wrong_values.yaml` file provides the module configuration for this test.
        - The `cases_cpe_indexing_wrong_values.yaml` file provides the test cases.

    expected_output:
        - fr"WARNING: .* Invalid tag found when parsing the CPE dictionary: '{field}'
        - r"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' was indexed"
        - r"ERROR: .* Invalid format version for the CPE helper: .*"
    '''
    stage = metadata['stage']
    if 'stage_0' in stage:
        for package in agent_packages:
            evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                  agent_id=prepare_scan)
    if 'stage_1' in stage:
        evm.check_cpe_helper_invalid_format_version()
    if 'stage_2' in stage:
        for package in agent_packages:
            with pytest.raises(TimeoutError):
                evm.check_cpe_helper_packages_indexed(package_name=package['name'], package_vendor=package['vendor'],
                                                      agent_id=prepare_scan)
                raise AttributeError(f'Unexpected log')
    if 'stage_3' in stage:
        evm.check_cpe_helper_invalid_tag_warning(metadata['wrong_field'])
