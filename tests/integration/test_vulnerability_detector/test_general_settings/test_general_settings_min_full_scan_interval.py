'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `min_full_scan_interval` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of the `ossec.conf` file
       and allows to define the minimum time before performing a full scan even if the feed was updated.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#min_full_scan_interval

tags:
    - settings
'''
import os
import time
from datetime import datetime, timedelta

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing import logger
from wazuh_testing.tools import LOG_FILE_PATH, WAZUH_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import TimeMachine
from wazuh_testing.tools.time import time_to_seconds

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
configurations_path = os.path.join(test_data_path, 'wazuh_min_full_scan_interval.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
min_full_scan_interval_values = [120]
min_full_scan_interval_units = ['s', 'm', 'h', 'd']
parameters = []
metadata = []
ids = []

# Offline feeds
rhel_oval_feed_path = os.path.join(test_feed_path, vd.CUSTOM_REDHAT_OVAL_FEED)
rhel_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_REDHAT_JSON_FEED)
nvd_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_NVD_FEED)

for value in min_full_scan_interval_values:
    for unit in min_full_scan_interval_units:
        parameters.append({'MIN_FULL_SCAN_INTERVAL': f'{value}{unit}',
                           'RHEL_FEED_PATH': rhel_oval_feed_path,
                           'RHEL_JSON_FEED_PATH': rhel_json_feed_path,
                           'NVD_JSON_FEED_PATH': nvd_json_feed_path})
        metadata.append({'min_full_scan_interval': f'{value}{unit}'})
        ids.append(f'{value}{unit}')

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='function')
def mock_system(mock_agent):
    """
    It mocks an agent with syscollector packages in a synced state
    """
    vd.insert_osinfo(agent=mock_agent)

    # Force sync status for packages
    vd.update_sync_info(agent=mock_agent)

    # Forcing a baseline-scan
    vd.update_last_full_scan(0, mock_agent)

    yield mock_agent

    vd.clean_vd_tables(mock_agent)


def test_min_full_scan_interval(get_configuration, configure_environment, restart_modulesd, mock_system):
    '''
    description: Checks if the `min_full_scan_interval ` option is working correctly. To do this,
                 it checks the `ossec.log` file for the message indicating that a baseline scan occurred. After this, it
                 time travels to the future and waits for the a full scan start log to occur in the expected time.

    wazuh_min_version: 4.3

    parameters:
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.
        - mock_system:
            type: callable
            brief: Add a simulated agent to the manager for testing.

    assertions:
        - Verify that the full_scans are delayed until the time configured is up.

    input_description: The combination of min_full_scan_interval_values and min_full_scan_interval_units is used.

    expected_output:
        - f"A full scan will be run on agent '{agent_id}'"
        - f"A baseline scan will be run on agent '{agent_id}'"
        - f"Finished vulnerability assessment for agent '{agent_id}'"
    '''
    check_apply_test({'min_full_scan_interval'}, get_configuration['tags'])
    config = get_configuration['metadata']
    agent_id = mock_system

    # Callbacks
    callback_detect_baseline_scan_start = vd.make_vuln_callback(f"A baseline scan will be run on agent '{agent_id}'")
    callback_detect_full_scan_start = vd.make_vuln_callback(f"A full scan will be run on agent '{agent_id}'")
    callback_detect_scan_end = vd.make_vuln_callback(f"Finished vulnerability assessment for agent '{agent_id}'")

    min_full_scan_interval = time_to_seconds(config['min_full_scan_interval'])
    seconds_to_travel = min_full_scan_interval / 2

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    # Detect baseline scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_BASELINE_SCAN_TIMEOUT,
                            callback=callback_detect_baseline_scan_start,
                            error_message='No baseline scan detected in log.')

    # Detect baseline scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No scan end detected in log.')

    # Travelling in time, halfway through the period set in "min_full_scan_interval".
    before = datetime.now()
    TimeMachine.travel_to_future(timedelta(seconds=seconds_to_travel))
    logger.debug(f"Changing the system clock from {before} to {datetime.now()}")

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    # Since the time set in "min_full_scan_interval" has not yet expired, the full scan should not be triggered.
    with pytest.raises(TimeoutError):
        wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                                callback=callback_detect_full_scan_start,
                                error_message='No full scan start detected in log.')

    # Travelling in time, at the moment when the period set in "min_full_scan_interval" has expired.
    # From this moment the full scan should be triggered.
    before = datetime.now()
    TimeMachine.travel_to_future(timedelta(seconds=seconds_to_travel))
    logger.debug(f"Changing the system clock from {before} to {datetime.now()}")

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_full_scan_start,
                            error_message='No full scan start detected in log.')
