# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import os
import time
from datetime import datetime, timedelta

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing import logger
from wazuh_testing.tools import LOG_FILE_PATH, WAZUH_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import TimeMachine
from wazuh_testing.tools.time import time_to_seconds

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
CVE_DB_PATH = os.path.join(WAZUH_PATH, 'queue', 'vulnerabilities', 'cve.db')
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
configurations_path = os.path.join(test_data_path, 'wazuh_min_full_scan_interval.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
min_full_scan_interval_values = [120]
min_full_scan_interval_units = ['s', 'm', 'h', 'd']
parameters = []
metadata = []
ids = []

# Offline feeds
buster_oval_feed_path = os.path.join(test_feed_path, vd.CUSTOM_DEBIAN_OVAL_FEED)
debian_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_DEBIAN_JSON_FEED)
nvd_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_NVD_FEED)

for value in min_full_scan_interval_values:
    for unit in min_full_scan_interval_units:
        parameters.append({'MIN_FULL_SCAN_INTERVAL': f'{value}{unit}',
                           'BUSTER_FEED_PATH': buster_oval_feed_path,
                           'DEBIAN_JSON_FEED_PATH': debian_json_feed_path,
                           'NVD_JSON_FEED_PATH': nvd_json_feed_path})
        metadata.append({'min_full_scan_interval': f'{value}{unit}'})
        ids.append(f'{value}{unit}')

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope="function")
def add_simulated_agent(get_configuration):
    """Add a dummy agent, inserts in its database (sys_programs table) a test package,
    and configures its database to appear to be up to date (sync_info table)."""
    agent_id, sender, injector = vd.create_simulated_agent()
    vd.insert_package(agent=agent_id, name='wazuhintegrationpackage-0', vendor='WazuhIntegrationTests',
                      version='1.0.0', source='NULL')
    vd.update_sync_info(agent=agent_id)
    yield agent_id
    injector.stop_receive()
    vd.delete_simulated_agent(agent_id)


def test_min_full_scan_interval(get_configuration, configure_environment, restart_modulesd, add_simulated_agent):
    """Check if the Vulnerability Detector module waits the minimal time set in "min_full_scan_interval"
    to perform FULL_SCAN type scanning.

    To do so, a simulated agent is added to the system, as soon as it is detected, the Vulnerability Detector
    will launch an initial scan (BASELINE_SCAN) on it. Then the system date is changed to a time after
    the date of the initial baseline scan, but before the minimum period set in "min_full_scan_interval",
    so that the full scan should not be triggered. Finally, the date is changed again to a time when
    the period set in "min_full_scan_interval" has expired, at which point the full scan should be triggered.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset ossec.log and start a new monitor.
        add_simulated_agent (fixture): Add a simulated agent to the manager for testing.
    """
    check_apply_test({'min_full_scan_interval'}, get_configuration['tags'])
    config = get_configuration['metadata']
    agent_id = add_simulated_agent

    # Callbacks
    callback_detect_full_scan_start = vd.make_vuln_callback(f"A full scan will be run on agent '{agent_id}'")
    callback_detect_baseline_scan_start = vd.make_vuln_callback(f"A baseline scan will be run on agent '{agent_id}'")
    callback_detect_scan_end = vd.make_vuln_callback(f"Finished vulnerability assessment for agent '{agent_id}'")

    min_full_scan_interval = time_to_seconds(config['min_full_scan_interval'])
    seconds_to_travel = min_full_scan_interval / 2

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    # Detect baseline scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_BASELINE_SCAN_TIMEOUT,
                            callback=callback_detect_baseline_scan_start,
                            error_message='No baseline scan detected in log.')

    # Detect baseline scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No scan end detected in log.')

    # Travelling in time, halfway through the period set in "min_full_scan_interval".
    before = datetime.now()
    TimeMachine.travel_to_future(timedelta(seconds=seconds_to_travel))
    logger.debug(f"Changing the system clock from {before} to {datetime.now()}")

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    # Since the time set in "min_full_scan_interval" has not yet expired, the full scan should not be triggered.
    with pytest.raises(TimeoutError):
        wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                                callback=callback_detect_full_scan_start,
                                error_message='No full scan start detected in log.')

    # Travelling in time, at the moment when the period set in "min_full_scan_interval" has expired.
    # From this moment the full scan should be triggered.
    before = datetime.now()
    TimeMachine.travel_to_future(timedelta(seconds=seconds_to_travel))
    logger.debug(f"Changing the system clock from {before} to {datetime.now()}")

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_full_scan_start,
                            error_message='No full scan start detected in log.')
