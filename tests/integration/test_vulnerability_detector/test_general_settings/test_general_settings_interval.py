# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import time_to_human_readable, unit_to_seconds
from wazuh_testing.vulnerability_detector import callback_detect_vulnerability_scan_sleeping, \
    VULN_DETECTOR_GLOBAL_TIMEOUT

# Marks
pytestmark = [pytest.mark.linux, pytest.mark.tier(level=0)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_interval.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

interval_values = [1, 2, 5]
interval_units = ['s', 'm', 'h', 'd']

parameters = []
metadata = []
ids = []

for value in interval_values:
    for unit in interval_units:
        parameters.append({'INTERVAL': f'{value}{unit}'})
        metadata.append({'interval': f'{value}{unit}'})
        ids.append(f'{value}{unit}')

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_interval(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd waits `interval` between one vulnerability detector scan and another.
    """

    check_apply_test({'interval'}, get_configuration['tags'])

    sleeping_interval = wazuh_log_monitor.start(timeout=VULN_DETECTOR_GLOBAL_TIMEOUT,
                                                callback=callback_detect_vulnerability_scan_sleeping,
                                                error_message='Missing sleep between scans').result()

    expected_sleep = time_to_human_readable(unit_to_seconds(get_configuration['metadata']['interval']))

    assert sleeping_interval == expected_sleep
