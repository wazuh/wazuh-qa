'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `run_on_start` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of the `ossec.conf` file
       and allows to define if Vulnerability Detector must run a scan as soon as it is started.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#run_on_start

tags:
    - settings
'''

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback, VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
test_feeds_path = os.path.join(current_test_path, '..', 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_run_on_start.yaml')
custom_nvd_feed_path = os.path.join(test_feeds_path, 'feeds', vd.CUSTOM_NVD_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
scan_timeout = 60

config_wildcards_values = [{'RUN_ON_START': 'yes', 'NVD_JSON_PATH': custom_nvd_feed_path},
                           {'RUN_ON_START': 'no', 'NVD_JSON_PATH': custom_nvd_feed_path}]
config_wildcards_metadata = [{'run_on_start': 'yes'}, {'run_on_start': 'no'}]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__,
                                           params=config_wildcards_values,
                                           metadata=config_wildcards_metadata)

# Callbacks
callback_detect_vulnerability_scan_started = make_vuln_callback('Starting vulnerability scan')
callback_detect_vulnerability_scan_finished = make_vuln_callback('Vulnerability scan finished')


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=["run_on_start_yes", "run_on_start_no"])
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_run_on_start(get_configuration, configure_environment, restart_modulesd):
    '''
    description: Checks if the `run_on_start ` option is working correctly. To do this, when the option is enabled
                 it restarts Vulnerability Detector and checks the `ossec.log` file for the message indicating that
                 a scan starts; and, when the option is disabled, it restarts Vulnerability Detector and checks in the
                 'ossec.log' that the scan doesn't start.

    wazuh_min_version: 4.2

    parameters:
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.

    assertions:
        - Verify that a scan is run on start or not, as configured in the options.

    input_description: The different values to enable/disable the run_on_scan option.

    expected_output:
        - 'Starting vulnerability scan'
        - 'Vulnerability scan finished'
    '''

    check_apply_test({'run_on_start'}, get_configuration['tags'])

    if get_configuration['metadata']['run_on_start'] == 'yes':
        # If enable, check that vuln scan has started when the service starts
        wazuh_log_monitor.start(timeout=VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
                                callback=callback_detect_vulnerability_scan_started,
                                error_message='Could not find vulnerability starting scan log')

        # Check that the scan has finished successfully
        wazuh_log_monitor.start(timeout=scan_timeout,
                                callback=callback_detect_vulnerability_scan_finished,
                                error_message='Could not find vulnerability scan finished log')
    else:
        # If disabled, check that vuln scan has not started
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
                                    callback=callback_detect_vulnerability_scan_started)
            raise AttributeError(f'Found starting scan log when run on start is disabled')
