# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import callback_detect_vulnerability_scan_started, \
    callback_detect_vulnerability_scan_finished


# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_run_on_start.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

config_wildcards_values = [{'RUN_ON_START': 'yes'}, {'RUN_ON_START': 'no'}]
config_wildcards_metadata = [{'run_on_start': 'yes'}, {'run_on_start': 'no'}]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__,
                                           params=config_wildcards_values,
                                           metadata=config_wildcards_metadata)

# fixtures

@pytest.fixture(scope='module', params=configurations, ids=["run_on_start_yes", "run_on_start_no"])
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

# Tests
def test_run_on_start(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd detects the vulnerability detector scan after starting.

    If we have set the parameter run_on_start to 'yes', modulesd will have to report the
    vulnerability detector scan, and in case of the value 'no', do not report anything
    """

    check_apply_test({'run_on_start'}, get_configuration['tags'])

    if get_configuration['metadata']['run_on_start'] == 'yes':

        wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                callback=callback_detect_vulnerability_scan_started,
                                error_message='Could not find vulnerability starting scan log')

        wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                callback=callback_detect_vulnerability_scan_finished,
                                error_message='Could not find vulnerability scanning finished log')
    else:
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                    callback=callback_detect_vulnerability_scan_started)
            raise AttributeError(f'Found starting scan log when run on start is disabled')
