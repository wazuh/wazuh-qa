'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `enabled` option of the vulnerability detector module
       is working correctly. This option is located in its corresponding section of
       the `ossec.conf` file and allows enabling or disabling this module.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#enabled

tags:
    - settings
'''
import os

import pytest
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import callback_detect_vulnerability_detector_disabled, \
    callback_detect_vulnerability_detector_enabled, \
    VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_enabled.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

parameters = [{'ENABLED': 'yes', 'TAG': 'enabled'}, {'ENABLED': 'no', 'TAG': 'disabled'}]
metadata = [{'enabled': 'yes', 'id': "config_enabled"}, {'enabled': 'no', 'id': "config_disabled"}]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=[f"{x['id']}" for x in metadata])
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.parametrize('tags_to_apply, custom_callback, custom_error_message', [
    ({'enabled'}, callback_detect_vulnerability_detector_enabled, 'Vulnerability detector is disabled'),
    ({'disabled'}, callback_detect_vulnerability_detector_disabled, 'Vulnerability detector is enabled')],
    ids = ['expecting_vuldet_enabled', 'expecting_vuldet_disabled']
)
def test_enabled(tags_to_apply, custom_callback, custom_error_message, get_configuration, configure_environment,
                 restart_modulesd):
    '''
    description: Check if the `enabled ` option is working correctly. To do this,
                 it checks the `ossec.log` file for the message indicating that the
                 vulnerability detector is enabled or disabled.

    wazuh_min_version: 4.2

    parameters:
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.
        - tags_to_apply:
            type: string
            brief: Tags used for use cases.
        - custom_callback:
            type: callback
            brief: Custom callback for searching the expected logs.
        custom_error_message:
            type: string
            brief: Custom message to be printed when the test fails.

    assertions:
        - Verify that when the `enabled` option is set to `yes`, the vulnerability detector module is running.
        - Verify that when the `enabled` option is set to `no`, the vulnerability detector module is stopped.

    input_description: Two use cases are found in the test module and include
                       parameters for `enabled` option (`yes` and `no`).

    expected_output:
        - r'(.*)wazuh-modulesd:vulnerability-detector(.*)'
        - r'DEBUG: Module disabled. Exiting...'
    '''
    check_apply_test(tags_to_apply, get_configuration['tags'])

    wazuh_log_monitor.start(timeout=VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT, callback=custom_callback,
                            error_message=custom_error_message)
