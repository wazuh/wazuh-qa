'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

tier: 0

modules:
    - vulnerability_detector

components:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#ignore-time

tags:
    - settings
    - vulnerability
    - vulnerability_detector
'''
import os
from datetime import timedelta

import pytest
from wazuh_testing.tools.file import truncate_file
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.time import time_to_seconds

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# variables
test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(test_path, 'data')
nvd_feed_path = os.path.join(os.path.dirname(test_path), 'test_scan_results', 'data', 'feeds', vd.REAL_NVD_FEED)
configurations_path = os.path.join(test_data_path, 'wazuh_ignore_time.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

callback_string_vulnerability = f"'{vd.DEFAULT_PACKAGE_NAME}'.+is vulnerable to '{vd.DEFAULT_VULNERABILITY_ID}'"
custom_callback_vulnerability = vd.make_vuln_callback(callback_string_vulnerability)

parameters = [{'IGNORE_TIME': '3600s', 'INTERVAL': '5s', 'NVD_FEED_PATH': nvd_feed_path},
              {'IGNORE_TIME': '60m', 'INTERVAL': '5s', 'NVD_FEED_PATH': nvd_feed_path},
              {'IGNORE_TIME': '1h', 'INTERVAL': '5s', 'NVD_FEED_PATH': nvd_feed_path}]
metadata = [{'ignore_time': '3600s', 'timeout': 30, 'jumps': 2, 'interval': '5s'},
            {'ignore_time': '60m', 'timeout': 30, 'jumps': 2, 'interval': '5s'},
            {'ignore_time': '1h', 'timeout': 30, 'jumps': 2, 'interval': '5s'}]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module')
def prepare_agent(mock_agent_module):
    control_service('stop', daemon='wazuh-db')

    vd.clean_vd_tables(mock_agent_module)
    vd.insert_package(agent=mock_agent_module, vendor="Red Hat, Inc.")
    vd.insert_vulnerability()

    control_service('start', daemon='wazuh-db')

    yield mock_agent_module


def test_ignore_time(get_configuration, configure_environment, restart_modulesd, prepare_agent):
    '''
    description: Check if an alert is not fired during the ignore time interval. To do this, it inserts a custom
                 vulnerability and vulnerable package, it checks the initial vulnerability alert, advances the time
                 clock before the set time, and check that the alert has not been generated. Finally, it advances the
                 time clock just after the set time and checks that the alert has been generated.

    wazuh_min_version: 4.2.0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - restart_modulesd:
            type: callable
            brief: Restart the `wazuh-modulesd` daemon.
        - prepare_agent:
            type: fixture
            brief: Add a mock agent, add a package to it and insert a vulnerability for that package.

    assertions:
        - Verify that alerts do not appear before ignore time was finished.

    input_description:
        - Three use cases are found in the test module and include ignore time intervals of 3600s, 60m, and 1h. The file
          real_nvd_feed.json is used to check for vulnerabilities.

    expected_output:
        - 'Alert did not appear at the start of the test'
        - 'Alert appeared before ignore_time was finished'
        - 'Alert did not appear at the end of the test'
    '''
    control_service('stop', daemon='wazuh-modulesd')
    control_service('stop', daemon='wazuh-db')
    vd.update_last_scan(agent=prepare_agent)
    truncate_file(LOG_FILE_PATH)
    control_service('start', daemon='wazuh-db')
    control_service('start', daemon='wazuh-modulesd')

    ignore_time = get_configuration['metadata']['ignore_time']
    jumps = get_configuration['metadata']['jumps']
    seconds_to_travel = time_to_seconds(ignore_time) / jumps

    # Check for initial alert
    wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                            callback=custom_callback_vulnerability,
                            error_message='Alert did not appear at the start of the test')

    # Check if alert does not appear during ignore time
    for _ in range(1, jumps):
        check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                                    callback=custom_callback_vulnerability)
            raise AttributeError('Alert appeared before ignore_time was finished')

    # Travel to the time set in ignore time
    check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))

    # Check for final alert
    wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                            callback=custom_callback_vulnerability,
                            error_message='Alert did not appear at the end of the test')
