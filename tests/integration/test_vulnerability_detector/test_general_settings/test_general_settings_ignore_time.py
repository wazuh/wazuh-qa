# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from datetime import timedelta

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.time import time_to_seconds

# Marks
pytestmark = [pytest.mark.linux, pytest.mark.tier(level=0)]

# variables
test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(test_path, 'data')
nvd_feed_path = os.path.join(os.path.dirname(test_path), 'test_scan_results', 'data', vd.REAL_NVD_FEED)
configurations_path = os.path.join(test_data_path, 'wazuh_ignore_time.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

callback_string_vulnerability = f"'{vd.DEFAULT_PACKAGE_NAME}'.+is vulnerable to '{vd.DEFAULT_VULNERABILITY_ID}'"

parameters = [{'IGNORE_TIME': '3600s', 'INTERVAL': '5s', 'NVD_FEED_PATH': nvd_feed_path},
              {'IGNORE_TIME': '60m', 'INTERVAL': '5s', 'NVD_FEED_PATH': nvd_feed_path},
              {'IGNORE_TIME': '1h', 'INTERVAL': '5s', 'NVD_FEED_PATH': nvd_feed_path}]
metadata = [{'ignore_time': '3600s', 'timeout': 30, 'jumps': 2, 'interval': '5s'},
            {'ignore_time': '60m', 'timeout': 30, 'jumps': 2, 'interval': '5s'},
            {'ignore_time': '1h', 'timeout': 30, 'jumps': 2, 'interval': '5s'}]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module')
def prepare_agent(mock_agent):
    control_service('stop', daemon='wazuh-db')

    vd.clean_vd_tables(mock_agent)
    vd.insert_package(agent=mock_agent, vendor="Red Hat, Inc.")
    vd.insert_vulnerability()

    control_service('start', daemon='wazuh-db')

    yield mock_agent


def test_ignore_time(get_configuration, configure_environment, restart_modulesd, prepare_agent,
                     custom_callback_vulnerability=vd.make_vuln_callback(callback_string_vulnerability)):
    """
    Check if an alert is not fired during the ignore time  interval
    """

    control_service('stop', daemon='wazuh-modulesd')
    control_service('stop', daemon='wazuh-db')
    vd.update_last_scan(agent=prepare_agent)
    control_service('start', daemon='wazuh-db')
    control_service('start', daemon='wazuh-modulesd')

    ignore_time = get_configuration['metadata']['ignore_time']
    jumps = get_configuration['metadata']['jumps']
    seconds_to_travel = time_to_seconds(ignore_time) / jumps

    # Check for initial alert
    wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                            callback=custom_callback_vulnerability,
                            error_message='Alert did not appear at the start of the test')

    # Check if alert does not appear during ignore time
    for _ in range(1, jumps):
        check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                                    callback=custom_callback_vulnerability)
            raise AttributeError('Alert appeared before ignore_time was finished')

    # Travel to the time set in ignore time
    check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))

    # Check for final alert
    wazuh_log_monitor.start(timeout=get_configuration['metadata']['timeout'],
                            callback=custom_callback_vulnerability,
                            error_message='Alert did not appear at the end of the test')
