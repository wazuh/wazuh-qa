'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux, Alma Linux and NVD Database.

components:
    - vulnerability_detector

suite: vulnerability_inventory

targets:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
'''
import os
import pytest

from wazuh_testing import ALERTS_JSON_PATH
from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.tools.configuration import update_configuration_template
from wazuh_testing.db_interface import agent_db
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_vulnerability_inventory_baseline_scan.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_vulnerability_inserted_baseline_scan.yaml')

# Custom feeds path
custom_redhat_oval_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_JSON_FEED)
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)

# test_vulnerability_inserted_baseline configurations
t1_configuration_parameters, t1_configuration_metadata, t1_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)

# Set offline custom feeds configuration
t1_configurations = update_configuration_template(
    t1_configurations,  ['CUSTOM_REDHAT_OVAL_FEED', 'CUSTOM_REDHAT_JSON_FEED', 'CUSTOM_NVD_JSON_FEED'],
    [custom_redhat_oval_feed_path, custom_redhat_json_feed_path, custom_nvd_json_feed_path])


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata', zip(t1_configurations, t1_configuration_metadata), ids=t1_case_ids)
def test_vulnerability_inserted_baseline_scan(configuration, metadata, set_wazuh_configuration_vdt,
                                              truncate_monitored_files, clean_cve_tables_func,
                                              prepare_baseline_scan_with_vuln_packages, restart_modulesd_function):
    '''
    description: Check that the baseline scan inserts the detected vulnerabilities

    test_phases:
        - Mock an agent with a vulnerable package.
        - Update sync_info packages data for that mocked agent.
        - Force a baseline scan setting the last full scan DB data.
        - Set a custom Wazuh configuration, with custom feeds for OVAL and NVD.
        - Restart wazuh-modulesd.
        - Check in the log that the baseline scan starts.
        - Check in the log that the vulnerability has been detected.
        - Check in the agent database that the vulnerability has been inserted in the vuln_cves table.

    wazuh_min_version: 4.3.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_baseline_scan_with_vuln_packages:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check that the baseline scan log appears.
        - Check that the vulnerabilities are detected.
        - Check that vulnerabilities have been inserted in the vuln_cves inventory.

    input_description:
        - The `configuration_vulnerability_inventory_baseline_scan.yaml` file provides the module configuration for
          this test.
        - The `cases_baseline_scan_start` file provides the test cases.
    '''
    agent_id = prepare_baseline_scan_with_vuln_packages

    # Check (in log) that the baseline scan has been launched
    evm.check_baseline_scan_start_log(agent_id=agent_id, timeout=vd.T_10)

    # Check the vulnerability detection
    for vulnerable_package in vd.VULNERABLE_PACKAGES:
        evm.check_vulnerability_affects_log(agent_id=agent_id, package=vulnerable_package['name'],
                                            cve=vulnerable_package['cveid'])

    # Check that the vulnerability has been inserted in the agent vulnerability inventory
    assert len(agent_db.get_vulnerability_inventory_data(agent_id=agent_id, status='VALID')) == \
        len(vd.VULNERABLE_PACKAGES)
