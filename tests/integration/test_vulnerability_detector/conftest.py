# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

from subprocess import CalledProcessError

import os
import time
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing import vulnerability_detector as vd


@pytest.fixture(scope='module')
def restart_modulesd(get_configuration, request):
    """Reset ossec.log and start a new monitor."""
    control_service('stop', daemon='wazuh-modulesd')
    truncate_file(LOG_FILE_PATH)
    file_monitor = FileMonitor(LOG_FILE_PATH)
    setattr(request.module, 'wazuh_log_monitor', file_monitor)
    try:
        control_service('start', daemon='wazuh-modulesd')
    except ValueError:
        pass


@pytest.fixture(scope='module')
def clean_vuln_tables(request):
    """Clean vulnerabilities tables """
    vd.clean_vd_tables()

    yield

    vd.clean_vd_tables()


@pytest.fixture
def restart_modulesd_catching_ossec_conf_error(request):
    control_service('stop', daemon='wazuh-modulesd')
    truncate_file(LOG_FILE_PATH)
    file_monitor = FileMonitor(LOG_FILE_PATH)
    setattr(request.module, 'wazuh_log_monitor', file_monitor)
    try:
        control_service('start', daemon='wazuh-modulesd')
    except (ValueError, CalledProcessError):
        pass


@pytest.fixture(scope='session')
def mock_agent():
    """
    Fixture to create a mocked agent in wazuh databases
    """
    """control_service('stop', daemon='wazuh-db')"""

    agent_id = vd.create_mocked_agent(name="mocked_agent")

    """control_service('start', daemon='wazuh-db')"""

    yield agent_id

    """control_service('stop', daemon='wazuh-db')"""

    vd.delete_mocked_agent(agent_id)

    """control_service('start', daemon='wazuh-db')"""


@pytest.fixture(scope='module')
def check_cve_db():
    """
    Fixture to check if the CVE database exists and its tables are created
    """
    def cve_tables_created():
        query_string = "SELECT count(*) FROM sqlite_master WHERE type='table'"
        query_result = int(vd.get_query_result(vd.CVE_DB_PATH, query_string)[0])
        return query_result == vd.CVE_NUM_TABLES

    db_status_ok = False
    attempts = 0

    while not db_status_ok:
        if os.path.exists(vd.CVE_DB_PATH) and cve_tables_created():
            db_status_ok = True
        attempts += 1

        if attempts > 30:
            raise AttributeError("Could not check that CVE database or its tables exist")

        time.sleep(1)
