# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import itertools
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_SUSE_FEEDS_CONF)
custom_suse_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_SUSE_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'SUSE_CUSTOM_FEED': custom_suse_oval_feed_path + "$"}]

ids = ['SUSE_configuration']

# SUSE Linux fields to check
test_data = [
    {"field": "name", "type": [str]},
    {"field": "packages", "type": [list]},
]

test_data_ids = [f"field: {item['field']}, value:{value}" for item in test_data for value in
                 vd.CUSTOM_INPUT_TEST_VALUES]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)

@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

@pytest.fixture
def modify_feed(test_data, custom_input, request):
    """
    Modify the SUSE Linux feed, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_suse_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)
    data = file.read_xml_file(file_path=custom_suse_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)
    modified_data = dict(data[0])
    modified_data[test_data['field']] = custom_input

    data[0] = modified_data
    file.write_file(file_path=custom_debian_suse_feed_path, data=modified_data)
    
    vd.clean_vuln_and_sys_programs_tables()
    control_service('restart', daemon='wazuh-modulesd')
    vd.set_system(system='Windows10')

    yield

    file.write_file(file_path=custom_debian_suse_feed_path, data=backup_data)    

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.SUSE_LOG,
                                        expected_vulnerabilities_number=vd.SUSE_NUM_CUSTOM_VULNERABILITIES)

@pytest.mark.parametrize('test_data, custom_input', itertools.product(test_data, vd.CUSTOM_INPUT_TEST_VALUES),
                         ids=test_data_ids)
def test_invalid_values_suse_linux_feed(test_data, custom_input, clean_vuln_tables, get_configuration,
                                        configure_environment, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing SUSE Linux feed with wrong field values
    """
    if any(isinstance(custom_input, x) for x in test_data['type']):
        expected_vulnerabilities = vd.SUSE_NUM_CUSTOM_VULNERABILITIES
        if test_data['field'] == 'packages' and isinstance(custom_input, list):
            # In this case, wazuh have to think that there are multiples packages with the 5 example vulnerabilities,
            # instead of only one package. For this reason we have to increase the number of expected vulnerabilities.
            expected_vulnerabilities = expected_vulnerabilities + 5 * (len(custom_input) - 1)
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.SUSE_LOG,
                                            expected_vulnerabilities_number=expected_vulnerabilities)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, timeout=10)

    vd.check_if_modulesd_is_running()
