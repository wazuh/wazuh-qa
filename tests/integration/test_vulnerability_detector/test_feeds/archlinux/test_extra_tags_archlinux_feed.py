# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import json
import os
from copy import deepcopy

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import read_json_file, write_json_file, write_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ARCHLINUX_FEEDS_CONF)
custom_archlinux_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ARCHLINUX_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'ARCHLINUX_CUSTOM_FEED': custom_archlinux_json_feed_path}]
ids = ['ARCHLINUX_configuration']

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_values, request):
    """Modify the Arch Linux JSON feed by setting a test tag value."""

    backup_data = read_json_file(custom_archlinux_json_feed_path)
    modified_data = deepcopy(backup_data)

    modified_data[0]['replace_this'] = test_values[1]
    modified_string = json.dumps(modified_data, indent=4)

    new_key = test_values[0]
    if isinstance(new_key, str):
        new_key = f'"{new_key}"'
    else:
        new_key = str(new_key)

    modified_string = modified_string.replace('"replace_this"', new_key)

    write_file(custom_archlinux_json_feed_path, modified_string)

    vd.clean_vuln_and_sys_programs_tables()
    control_service('restart', daemon='wazuh-modulesd')
    vd.set_system(system='ARCH')

    yield

    write_json_file(custom_archlinux_json_feed_path, backup_data)
    vd.clean_vuln_and_sys_programs_tables()
    file.truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default."""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ARCH_LOG,
                                        expected_vulnerabilities_number=vd.ARCH_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_values', vd.EXTRA_TEST_VALUES, ids=vd.EXTRA_TEST_IDS)
def test_extra_tags_arch_linux_feed(test_values, clean_vuln_tables, get_configuration, configure_environment,
                                    modify_feed):
    """Check if Vulnerability Detector behaves as expected while importing Arch Linux JSON feed with extra tags."""
    inserted_tag = test_values[0]

    if type(inserted_tag) in [str]:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ARCH_LOG,
                                            expected_vulnerabilities_number=vd.ARCH_NUM_CUSTOM_VULNERABILITIES)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)

    vd.check_if_modulesd_is_running()
