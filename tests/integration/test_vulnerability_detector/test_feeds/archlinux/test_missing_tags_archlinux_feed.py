# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from copy import deepcopy

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ARCHLINUX_FEEDS_CONF)
custom_archlinux_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ARCHLINUX_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'ARCHLINUX_CUSTOM_FEED': custom_archlinux_json_feed_path + "$"}]
ids = ['ARCHLINUX_configuration']

# Arch Linux fields to check
fields = ['name', 'packages', 'status', 'severity', 'type', 'affected', 'fixed', 'ticket', 'issues', 'advisories']

key_tags = ['name', 'packages', 'status', 'severity', 'affected']

xfail_list = []

field_ids = [f"missing: {field}" for field in fields]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=fields, ids=field_ids)
def remove_field_feed(request):
    """It allows to modify the feed by removing a certain field and loading the new feed configuration."""
    backup_data = read_json_file(custom_archlinux_json_feed_path)
    modified_data = deepcopy(backup_data)

    modified_data[0].pop(request.param, None)

    write_json_file(custom_archlinux_json_feed_path, modified_data)

    vd.clean_vuln_and_sys_programs_tables()
    control_service('restart', daemon='wazuh-modulesd')
    vd.set_system(system='Windows10')

    yield request.param

    write_json_file(custom_archlinux_json_feed_path, backup_data)
    vd.clean_vuln_and_sys_programs_tables()
    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ARCH_LOG,
                                        expected_vulnerabilities_number=vd.ARCH_NUM_CUSTOM_VULNERABILITIES)


def test_invalid_archlinux_feed(clean_vuln_tables, get_configuration, configure_environment, remove_field_feed):
    """Check if the feed is imported successfully by default."""

    if remove_field_feed not in key_tags:
        expected_vulnerabilities = vd.ARCH_NUM_CUSTOM_VULNERABILITIES
        if remove_field_feed == 'issues':
            expected_vulnerabilities -= 4
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ARCH_LOG,
                                            expected_vulnerabilities_number=expected_vulnerabilities,
                                            timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

        vd.check_if_modulesd_is_running()
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
