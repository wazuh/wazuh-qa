# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import json
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file, write_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ARCHLINUX_FEEDS_CONF)
custom_archlinux_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ARCHLINUX_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'ARCHLINUX_CUSTOM_FEED': custom_archlinux_json_feed_path + "$"}]
ids = ['ARCHLINUX_configuration']

test_data = [
    # CURLY BRACKETS
    {"pattern": r'(.*)(\{)(.*)', "update": '', "description": "Delete '{'"},
    {"pattern": r'(.*)(\})(.*)', "update": '', "description": "Delete '}'"},
    {"pattern": r'(.*)(\{)(.*)', "update": '{{', "description": "Add '{{'"},
    {"pattern": r'(.*)(\})(.*)', "update": '}}', "description": "Add '}}'"},
    {"pattern": r'(.*\"packages\": )(\[)(.*)', "update": ',{', "description": "Add '{' in the middle of feed"},
    {"pattern": r'(.*\"packages\": )(\[)(.*)', "update": ',}', "description": "Add '}' in the middle of feed"},
    {"pattern": r'(.*\"packages\": )(\[)(.*)', "update": ',{}', "description": "Add '{}' in the middle of feed"},
    # COMMA
    {"pattern": r'(.*\"status\": "Vulnerable\")(,)(.*)', "update": '', "description": "Delete key:value comma ','"},
    {"pattern": r'(.*\"status\")(:)(.*)', "update": ': ,',
     "description": "Add a comma before value key: ,value,"},
    {"pattern": r'(.*\"status\": \"Vulnerable\")(,)(.*)', "update": ',,',
     "description": "Add double comma after key:value,,"},
    {"pattern": r'(.*CVE-\d+-\d+)(\")(.*)', "update": '",,', "description": "Add double comma after list value,,"},
    # QUOTES
    {"pattern": r'(.*\"ticket\")(:)(.*)', "update": '":',
     "description": "Close a key with double quotation marks"},
    {"pattern": r'(.*\"ticket\": \"\d+\")(,)(.*)', "update": '",',
     "description": "Close value with double quotation marks"},
    # SEMICOLON
    {"pattern": r'(.*\"status\": "\w+\")(,)(.*)', "update": ';',
     "description": "Replace a comma with semicolon"},
    {"pattern": r'(.*\"status\")(:)(.*)', "update": ';',
     "description": "Replace a colon with semicolon"},
    # BRACKETS
    {"pattern": r'(.*\"issues\": )(\[)(.*)', "update": '', "description": "Missing open bracket"},
    {"pattern": r'(.*)(\])(,.*)', "update": '', "description": "Missing close bracket"},
    # MISSING INFO
    {"pattern": r'(.*"issues")(.*},)(.*)', "update": '', "description": "Delete some information"},
]

# Add EXTRA CHARS to test_data
for item in vd.TEST_CHARACTERS:
    test_data.append({"pattern": r'(.*\"ticket\": \"\d+\")(,)(.*)', "update": item,
                      "description": f"Replace ',' with '{item}'"})

test_data_ids = [item['description'] for item in test_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, request):
    """Modify the Arch Linux feed by setting a test field value."""
    backup_data = read_json_file(custom_archlinux_json_feed_path)
    modified_data = json.dumps(dict(backup_data[0]), indent=4)

    for item in backup_data[1:]:
        modified_data += ",\n" + json.dumps(dict(item), indent=4)

    modified_string_data = replace_regex(pattern=test_data['pattern'], new_value=test_data['update'],
                                         data=modified_data, replace_group=True)
    modified_string_data = f"[\n{modified_string_data}\n]"

    write_file(custom_archlinux_json_feed_path, modified_string_data)

    vd.clean_vuln_and_sys_programs_tables()
    control_service('restart', daemon='wazuh-modulesd')
    vd.set_system(system='Windows10')

    yield

    write_json_file(custom_archlinux_json_feed_path, backup_data)
    vd.clean_vuln_and_sys_programs_tables()
    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ARCH_LOG,
                                        expected_vulnerabilities_number=vd.ARCH_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_data', test_data, ids=test_data_ids)
def test_invalid_syntax_arch_linux_feed(test_data, clean_vuln_tables, get_configuration, configure_environment,
                                        modify_feed):
    """Check if the feed is imported successfully by default"""
    vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, parser_error=True)

    vd.check_if_modulesd_is_running()
