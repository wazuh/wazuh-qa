'''
brief: These tests will check if Vulnerability Detector downloads the different feeds (Redhat, Canonical, Debian and NVD) and imports them. It will check the confirmation message in the logs.

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    operating_system:
        - RedHat
        - Ubuntu
        - Debian
        - Windows
        - Arch Linux
    tiers:
        - 2
    tags:
        - NVD
        - MSU
'''

import os
import tempfile

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', 'wazuh_invalid_type_custom_feed.yaml')
files_path = tempfile.gettempdir()

custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_canonical_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CANONICAL_OVAL_FEED)
custom_debian_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_DEBIAN_OVAL_FEED)
custom_debian_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_DEBIAN_JSON_FEED)
custom_nvd_json_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)
custom_msu_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_MSU_JSON_FEED)
custom_archlinux_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ARCHLINUX_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

correctly_feeds = [custom_redhat_oval_feed_path, custom_canonical_oval_feed_path, custom_debian_oval_feed_path,
                   custom_nvd_json_path, custom_redhat_json_feed_path, custom_debian_json_feed_path,
                   custom_msu_json_feed_path, custom_archlinux_feed_path]
correctly_imported_feeds = []
for feeds in correctly_feeds:
    if feeds in [custom_redhat_json_feed_path, custom_msu_json_feed_path, custom_archlinux_feed_path]:
        correctly_imported_feeds.append(feeds + "$")
        correctly_imported_feeds.append(feeds + ".gz$")
        correctly_imported_feeds.append(feeds + ".bz2$")
    else:
        correctly_imported_feeds.append(feeds + "")
        correctly_imported_feeds.append(feeds + ".gz")
        correctly_imported_feeds.append(feeds + ".bz2")

# Data files
zip_data_file_name = 'invalid_feed_format_files.zip'
zip_data_url = f'https://ci.wazuh.com/qa/3.13/vulnerability_detector/{zip_data_file_name}'

zip_dest_path = os.path.join(files_path, zip_data_file_name)

custom_extensions = ['', '.avi', '.doc', '.jpg', '.json', '.xml', '.mp3', '.pdf', '.zip']
custom_correctly_extensions = ['', '.gz', '.bz2']
custom_files = [os.path.join(files_path, f"dummy{extension}") for extension in custom_extensions]

# Red Hat configurations
redhat_custom_files = custom_files + [custom_redhat_oval_feed_path + f"{extension}"
                                      for extension in custom_correctly_extensions]
redhat_configurations = [{'REDHAT_ENABLED': 'yes', 'REDHAT_CUSTOM_OVAL_FEED': custom_file,
                          'REDHAT_CUSTOM_JSON_FEED': custom_redhat_json_feed_path + '$', 'CANONICAL_ENABLED': 'no',
                          'ARCH_ENABLED': 'no', 'DEBIAN_ENABLED': 'no', 'MSU_ENABLED': 'no', 'NVD_ENABLED': 'no'}
                         for custom_file in redhat_custom_files]
redhat_metadata = [{'feed': 'redhat', 'custom_feed': custom_file, 'log_system_name': 'Red Hat Enterprise Linux 8',
                    'expected_num_vulnerabilities': vd.REDHAT_NUM_CUSTOM_VULNERABILITIES}
                   for custom_file in redhat_custom_files]
redhat_ids = [f"RedHat_{custom_file}" for custom_file in redhat_custom_files]

# JSON Red Hat configurations
json_redhat_custom_files = custom_files + [custom_redhat_json_feed_path + f"{extension}" + "$"
                                           for extension in custom_correctly_extensions]
json_redhat_configurations = [{'REDHAT_ENABLED': 'yes', 'REDHAT_CUSTOM_OVAL_FEED': custom_redhat_oval_feed_path,
                               'REDHAT_CUSTOM_JSON_FEED': custom_file, 'CANONICAL_ENABLED': 'no',
                               'ARCH_ENABLED': 'no', 'DEBIAN_ENABLED': 'no', 'MSU_ENABLED': 'no', 'NVD_ENABLED': 'no'}
                              for custom_file in json_redhat_custom_files]
json_redhat_metadata = [
    {'feed': 'redhat', 'custom_feed': custom_file, 'log_system_name': 'JSON Red Hat Enterprise Linux',
     'expected_num_vulnerabilities': vd.REDHAT_NUM_CUSTOM_VULNERABILITIES}
    for custom_file in json_redhat_custom_files]
json_redhat_ids = [f"JSON_RedHat_{custom_file}" for custom_file in json_redhat_custom_files]

# Canonical configurations
canonical_custom_files = custom_files + [custom_canonical_oval_feed_path + f"{extension}"
                                         for extension in custom_correctly_extensions]
canonical_configurations = [{'REDHAT_ENABLED': 'no', 'CANONICAL_ENABLED': 'yes',
                             'CANONICAL_CUSTOM_FEED': custom_file, 'DEBIAN_ENABLED': 'no', 'ARCH_ENABLED': 'no',
                             'MSU_ENABLED': 'no', 'NVD_ENABLED': 'no'} for custom_file in canonical_custom_files]
canonical_metadata = [{'feed': 'canonical', 'custom_feed': custom_file, 'log_system_name': 'Ubuntu Bionic',
                       'expected_num_vulnerabilities': vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES}
                      for custom_file in canonical_custom_files]
canonical_ids = [f"Canonical_{custom_file}" for custom_file in canonical_custom_files]

# Debian configurations
debian_custom_files = custom_files + [custom_debian_oval_feed_path + f"{extension}"
                                      for extension in custom_correctly_extensions]
debian_configurations = [{'REDHAT_ENABLED': 'no', 'CANONICAL_ENABLED': 'no', 'DEBIAN_ENABLED': 'yes',
                          'DEBIAN_CUSTOM_FEED': custom_file, 'DEBIAN_CUSTOM_JSON_FEED': custom_debian_json_feed_path,
                          'ARCH_ENABLED': 'no', 'MSU_ENABLED': 'no', 'NVD_ENABLED': 'no'}
                         for custom_file in debian_custom_files]
debian_metadata = [{'feed': 'debian', 'custom_feed': custom_file, 'log_system_name': 'Debian Buster',
                    'expected_num_vulnerabilities': vd.DEBIAN_NUM_CUSTOM_VULNERABILITIES}
                   for custom_file in debian_custom_files]
debian_ids = [f"Debian_{custom_file}" for custom_file in debian_custom_files]

# JSON Debian configurations
json_debian_custom_files = custom_files + [custom_debian_json_feed_path]
json_debian_configurations = [{'REDHAT_ENABLED': 'no', 'CANONICAL_ENABLED': 'no', 'DEBIAN_ENABLED': 'yes', 'ARCH_ENABLED': 'no',
                               'DEBIAN_CUSTOM_FEED': custom_debian_oval_feed_path,
                               'DEBIAN_CUSTOM_JSON_FEED': custom_file, 'MSU_ENABLED': 'no', 'NVD_ENABLED': 'no'}
                              for custom_file in json_debian_custom_files]
json_debian_metadata = [{'feed': 'json debian', 'custom_feed': custom_file, 'log_system_name': 'Debian Buster',
                         'expected_num_vulnerabilities': vd.DEBIAN_NUM_CUSTOM_VULNERABILITIES}
                        for custom_file in json_debian_custom_files]
json_debian_ids = [f"JSON_Debian_{custom_file}" for custom_file in json_debian_custom_files]

# MSU configurations
msu_custom_files = custom_files + [custom_msu_json_feed_path + f"{extension}" + "$"
                                   for extension in custom_correctly_extensions]
msu_configurations = [{'REDHAT_ENABLED': 'no', 'CANONICAL_ENABLED': 'no', 'DEBIAN_ENABLED': 'no',
                       'ARCH_ENABLED': 'no', 'MSU_ENABLED': 'yes', 'MSU_CUSTOM_FEED': custom_file, 'NVD_ENABLED': 'no'}
                      for custom_file in msu_custom_files]
msu_metadata = [{'feed': 'msu', 'custom_feed': custom_file, 'log_system_name': 'Microsoft Security Update',
                 'expected_num_vulnerabilities': 0}
                for custom_file in msu_custom_files]
msu_ids = [f"MSU_{custom_file}" for custom_file in msu_custom_files]

# NVD configurations
nvd_custom_files = custom_files + [custom_nvd_json_path + f"{extension}" for extension in custom_correctly_extensions]
nvd_configurations = [{'REDHAT_ENABLED': 'no', 'CANONICAL_ENABLED': 'no', 'DEBIAN_ENABLED': 'no', 'MSU_ENABLED': 'no',
                       'ARCH_ENABLED': 'no', 'NVD_ENABLED': 'yes', 'NVD_CUSTOM_FEED': custom_file} for custom_file in nvd_custom_files]
nvd_metadata = [{'feed': 'nvd', 'custom_feed': custom_file, 'log_system_name': 'National Vulnerability Database',
                 'expected_num_vulnerabilities': vd.NVD_NUM_CUSTOM_VULNERABILITIES}
                for custom_file in nvd_custom_files]
nvd_ids = [f"NVD_{custom_file}" for custom_file in nvd_custom_files]

# Arch Linux configurations
archlinux_custom_files = custom_files + [custom_archlinux_feed_path + f"{extension}" + "$"
                                         for extension in custom_correctly_extensions]
archlinux_configurations = [{'REDHAT_ENABLED': 'no', 'CANONICAL_ENABLED': 'no', 'DEBIAN_ENABLED': 'no',
                             'MSU_ENABLED': 'no', 'NVD_ENABLED': 'no', 'ARCH_ENABLED': 'yes',
                             'ARCH_CUSTOM_FEED': custom_file} for custom_file in archlinux_custom_files]
archlinux_metadata = [{'feed': 'arch', 'custom_feed': custom_file, 'log_system_name': 'Arch Linux',
                       'expected_num_vulnerabilities': vd.ARCH_NUM_CUSTOM_VULNERABILITIES}
                      for custom_file in archlinux_custom_files]
archlinux_ids = [f"ArchLinux_{custom_file}" for custom_file in archlinux_custom_files]

# Global configuration
parameters = redhat_configurations + json_redhat_configurations + canonical_configurations + debian_configurations + \
             json_debian_configurations + msu_configurations + nvd_configurations + archlinux_configurations
metadata = redhat_metadata + json_redhat_metadata + canonical_metadata + debian_metadata + json_debian_metadata + \
           msu_metadata + nvd_metadata + archlinux_metadata
ids = redhat_ids + json_redhat_ids + canonical_ids + debian_ids + json_debian_ids + msu_ids + nvd_ids + archlinux_ids

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module')
def manage_files(request):
    """Download and clean files used for testing"""
    file.download_file(source_url=zip_data_url, dest_path=zip_dest_path)

    file.decompress_zip(zip_file_path=zip_dest_path, dest_file_path=files_path)

    yield

    for extracted_file in custom_files:
        file.remove_file(extracted_file)

    file.remove_file(zip_dest_path)


def test_invalid_type_custom_feeds(manage_files, clean_vuln_tables, get_configuration, configure_environment,
                                   restart_modulesd):
    """
    test_logic:
        Check that when importing bad feed files, vulnerability report a log parse error otherwise they are imported correctly
    """
    custom_feed = get_configuration['metadata']['custom_feed']
    log_system_name = get_configuration['metadata']['log_system_name']

    if get_configuration['metadata']['feed'] == 'nvd':
        pytest.xfail("Add error messages to this case use. Issue: https://github.com/wazuh/wazuh/issues/5210")

    if custom_feed in correctly_imported_feeds:
        if '.gz' in custom_feed or '.bz2' in custom_feed:
            vd.check_feed_uncompressed_successfully(
                wazuh_log_monitor=wazuh_log_monitor,
                feed=custom_feed
            )
        vd.check_feed_imported_successfully(
            wazuh_log_monitor=wazuh_log_monitor,
            log_system_name=log_system_name,
            expected_vulnerabilities_number=get_configuration['metadata']['expected_num_vulnerabilities']
        )

        vd.clean_vuln_and_sys_programs_tables()
    else:
        expected_vulnerabilities_number = 1 if log_system_name == 'JSON Red Hat Enterprise Linux' else 0
        test_skipped = 1 if get_configuration['metadata']['feed'] == 'msu' and custom_feed == '/tmp/dummy.json' else 0

        if get_configuration['metadata']['feed'] != 'json debian' and not test_skipped:
            vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor,
                                                 expected_vulnerabilities_number=expected_vulnerabilities_number
                                                 )
        else:
            if custom_feed != '/tmp/dummy.json':
                vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                                   log_event=f"Couldn't get the Debian feed .*"
                                   )

        if expected_vulnerabilities_number > 0:
            vd.clean_vuln_and_sys_programs_tables()
