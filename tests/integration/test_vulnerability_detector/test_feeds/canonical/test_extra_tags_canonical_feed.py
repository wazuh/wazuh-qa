'''
brief: Set of tests that are based on checking the behavior of Vulnerability Detector when there is an extra tag in the feed.

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    operating_system:
        - Ubuntu
    wazuh_max_version: 4.0.0
    wazuh_min_version: 4.1.5
    tiers:
        - 2
    tags:
        - feeds
        - canonical
'''
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import insert_xml_tag

# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_CANONICAL_FEEDS_CONF)
custom_canonical_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CANONICAL_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'CANONICAL_CUSTOM_FEED': custom_canonical_oval_feed_path}]
ids = ['CANONICAL_configuration']

# Insert extra tags before <generator> tag
insert_pattern = r'(.*)(<generator>)(.*)'

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_values, request):
    """
    Modify the Canonical OVAL feed, setting a test tag value
    """
    backup_data = file.read_xml_file(file_path=custom_canonical_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES)

    modified_data = insert_xml_tag(pattern=insert_pattern, tag=test_values[0], value=test_values[1],
                                   data=str(backup_data))

    file.write_file(file_path=custom_canonical_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BIONIC')

    yield

    file.write_file(file_path=custom_canonical_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """
    test_logic:
        Check if the feed is imported successfully by default
    checks:
        - Feed is imported successfully with the original feed.    
    """
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BIONIC_LOG,
                                        expected_vulnerabilities_number=vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_values', vd.EXTRA_TEST_VALUES, ids=vd.EXTRA_TEST_IDS)
def test_extra_tags_canonical_feed(test_values, clean_vuln_tables, get_configuration, configure_environment,
                                   modify_feed):
    """
    test_logic:
        Check if vulnerability detector behaves as expected when importing Canonical OVAL feed with extra tags
    checks:
        - Vulnerabilities are inserted into the `vulnerabilities` database.
        - Action status message displayed in `ossec.log`.
        - `wazuh-modulesd` is still running once the test has finished (it didn't crash).
    """
    inserted_tag = test_values[0]

    if inserted_tag != ' ' and type(inserted_tag) in [str, int]:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BIONIC_LOG,
                                            expected_vulnerabilities_number=vd.CANONICAL_NUM_CUSTOM_VULNERABILITIES)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)

    vd.check_if_modulesd_is_running()
