# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import itertools
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex

# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_DEBIAN_FEEDS_CONF)
custom_debian_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_DEBIAN_OVAL_FEED)
custom_debian_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_DEBIAN_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'DEBIAN_CUSTOM_FEED': custom_debian_oval_feed_path,
               'DEBIAN_JSON_FEED': custom_debian_json_feed_path}]
ids = ['DEBIAN_configuration']

test_data = [
    {'name': 'generator', 'pattern': r'(<generator>)(.*)(<\/generator>)', 'expected_fail': False},
    {'name': 'product_name', 'pattern': r'(<oval:product_name>)(.*)(<\/oval:product_name>)', 'expected_fail': False},
    {'name': 'schema_version', 'pattern': r'(<oval:schema_version>)(.*)(<\/oval:schema_version>)',
     'expected_fail': False},
    {'name': 'timestamp', 'pattern': r'(<oval:timestamp>)(.*)(<\/oval:timestamp>)', 'expected_fail': False},
    {'name': 'definitions', 'pattern': r'(<definitions>)(.*)(<\/definitions>)', 'expected_fail': True},
    {'name': 'definition', 'pattern': r'(<definition\s.*>)(.*)(<\/definition>)', 'expected_fail': True},
    {'name': 'metadata', 'pattern': r'(<metadata.*>)(.*)(<\/metadata>)', 'expected_fail': False},
    {'name': 'title', 'pattern': r'(<title.*>)(.*)(<\/title>)', 'expected_fail': False},
    {'name': 'description', 'pattern': r'(<description.*>)(.*)(<\/description>)', 'expected_fail': False},
    {'name': 'affected', 'pattern': r'(<affected.*>)(.*)(<\/affected>)', 'expected_fail': False},
    {'name': 'platform', 'pattern': r'(<platform.*>)(.*)(<\/platform>)', 'expected_fail': False},
    {'name': 'product', 'pattern': r'(<product.*>)(.*)(<\/product>)', 'expected_fail': False},
    {'name': 'reference', 'pattern': r'(<reference ref_id=")(.*)("\sref.*source="CVE"\s*\/>)', 'expected_fail': False},
    {'name': 'debian', 'pattern': r'(<debian>)(.*)(<\/debian>)', 'expected_fail': False},
    {'name': 'date', 'pattern': r'(<date>)(.*)(<\/date>)', 'expected_fail': False},
    {'name': 'criteria', 'pattern': r'(<criteria.*>)(.*)(<\/criteria>)', 'expected_fail': False},
    {'name': 'criterion', 'pattern': r'(<criterion.*test_ref=")(oval:org.debian.oval:tst:1)("\/>)',
     'expected_fail': False},
    {'name': 'tests', 'pattern': r'(<tests>)(.*)(<\/tests>)', 'expected_fail': False},
    {'name': 'textfilecontent54_test', 'pattern': r'(<textfilecontent54_test.*>)(.*)(<\/textfilecontent54_test>)',
     'expected_fail': False},
    {'name': 'test_object_ref', 'pattern': r'(<object object_ref=")(oval:org.debian.oval:obj:1)("\s*\/>)',
     'expected_fail': False},
    {'name': 'test_state_ref', 'pattern': r'(<state state_ref=")(oval:org.debian.oval:ste:1)(\s*"\/>)',
     'expected_fail': False},
    {'name': 'uname_test', 'pattern': r'(<uname_test.*>)(.*)(<\/uname_test>)', 'expected_fail': False},
    {'name': 'test_uname_object_ref', 'pattern': r'(<object object_ref=")(oval:org.debian.oval:obj:2)("\s*\/>)',
     'expected_fail': False},
    {'name': 'dpkginfo_test', 'pattern': r' (<dpkginfo_test.*>)(.*)(<\/dpkginfo_test>)', 'expected_fail': False},
    {'name': 'objects', 'pattern': r'(<objects>)(.*)(<\/objects>)', 'expected_fail': False},
    {'name': 'textfilecontent54_object', 'pattern': r'(<textfilecontent54_object.*>)(.*)(<\/textfilecontent54_object>)',
     'expected_fail': False},
    {'name': 'path', 'pattern': r'(<path>)(.*)(<\/path>)', 'expected_fail': False},
    {'name': 'filename', 'pattern': r'(<filename>)(.*)(<\/filename>)', 'expected_fail': False},
    {'name': 'instance', 'pattern': r'(<instance.*>)(.*)(<\/instance>)', 'expected_fail': False},
    {'name': 'uname_object', 'pattern': r'(<uname_object.*id=")(.*)("\s.*\s*\/>)', 'expected_fail': False},
    {'name': 'dpkginfo_object', 'pattern': r'(<dpkginfo_object.*version="1">)(.*)(<\/dpkginfo_object>)',
     'expected_fail': False},
    {'name': 'states', 'pattern': r'(<states>)(.*)(<\/states>)', 'expected_fail': False},
    {'name': 'textfilecontent54_state', 'pattern': r'(<textfilecontent54_state.*>)(.*)(<\/dpkginfo_state>)',
     'expected_fail': False},
    {'name': 'subexpression', 'pattern': r'(<subexpression.*>)(.*)(<\/subexpression>)', 'expected_fail': False},
    {'name': 'dpkginfo_state', 'pattern': r'(<dpkginfo_state.*version="1">)(.*)(<\/dpkginfo_state>)',
     'expected_fail': False},
    {'name': 'evr', 'pattern': r'(<evr.*than">)(.*)(<\/evr>)', 'expected_fail': False}
]

# Necessary tags to import successfully the vulnerabilities
key_tags = ['definitions', 'definition', 'metadata', 'reference', 'criteria']

# Add key tags indexes
tags_indexes = [test_data.index(tag) for tag in test_data if tag['name'] in key_tags]

# Add some non key indexes
tags_indexes.extend([test_data.index(tag) for extra_tag in ['product_name', 'affected', 'platform']
                     for tag in test_data if tag['name'] == extra_tag])

# Sub-list for testing a minimum of tags
tags = [test_data[index] for index in tags_indexes]

tags_ids = [f"tag: {tag['name']}, value:{value}" for tag in tags for value in vd.CUSTOM_INPUT_TEST_VALUES]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, custom_input, request):
    """
    Modify the Debian OVAL feed, setting a test tag value
    """
    backup_data = file.read_xml_file(file_path=custom_debian_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    modified_data = replace_regex(pattern=test_data['pattern'], new_value=custom_input, data=str(backup_data),
                                  replace_group=True)

    file.write_file(file_path=custom_debian_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BUSTER')

    yield

    file.write_file(file_path=custom_debian_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BUSTER_LOG,
                                        expected_vulnerabilities_number=vd.DEBIAN_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_data, custom_input', itertools.product(tags, vd.CUSTOM_INPUT_TEST_VALUES), ids=tags_ids)
def test_invalid_values_debian_feed(test_data, custom_input, clean_vuln_tables, get_configuration,
                                    configure_environment, restart_modulesd, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing Debian OVAL feed with wrong tag values
    """
    if test_data['expected_fail']:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, timeout=vd.DEBIAN_IMPORT_FEED_TIMEOUT)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BUSTER_LOG,
                                            expected_vulnerabilities_number=vd.DEBIAN_NUM_CUSTOM_VULNERABILITIES,
                                            timeout=vd.DEBIAN_IMPORT_FEED_TIMEOUT,
                                            check_vuln_number=False)
    vd.check_if_modulesd_is_running()
