# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import wazuh_testing.vulnerability_detector as vd

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.utils import replace_regex
from wazuh_testing.tools import file
from wazuh_testing.tools.services import control_service


# Marks
pytestmark = pytest.mark.tier(level=2)

current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_DEBIAN_FEEDS_CONF)
custom_debian_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_DEBIAN_OVAL_FEED)
custom_debian_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_DEBIAN_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'DEBIAN_CUSTOM_FEED': custom_debian_oval_feed_path,
               'DEBIAN_JSON_FEED': custom_debian_json_feed_path}]
ids = ['DEBIAN_configuration']

test_data = [
    {'name': 'no_changes', 'pattern': r''},
    {'name': 'generator', 'pattern': r'<generator>.*<\/generator>'},
    {'name': 'product_name', 'pattern': r'<oval:product_name>.*<\/oval:product_name>'},
    {'name': 'schema_version', 'pattern': r'<oval:schema_version>.*<\/oval:schema_version>'},
    {'name': 'timestamp', 'pattern': r'<oval:timestamp>.*<\/oval:timestamp>'},
    {'name': 'definitions', 'pattern': r'<definitions>.*<\/definitions>'},
    {'name': 'definition', 'pattern': r'<definition\s.*>.*<\/definition>'},
    {'name': 'metadata', 'pattern': r'<metadata.*>.*<\/metadata>'},
    {'name': 'title', 'pattern': r'<title.*>.*<\/title>'},
    {'name': 'description', 'pattern': r'<description.*>.*<\/description>'},
    {'name': 'affected', 'pattern': r'<affected.*>.*<\/affected>'},
    {'name': 'platform', 'pattern': r'<platform.*>.*<\/platform>'},
    {'name': 'product', 'pattern': r'<product.*>.*<\/product>'},
    {'name': 'reference', 'pattern': r'<reference.*source="CVE"\s*\/>'},
    {'name': 'debian', 'pattern': r'<debian>.*<\/debian>'},
    {'name': 'date', 'pattern': r'<date>.*<\/date>'},
    {'name': 'criteria', 'pattern': r'<criteria.*>.*<\/criteria>'},
    {'name': 'criterion', 'pattern': r'<criterion.*tst:1"\s*\/>'},
    {'name': 'tests', 'pattern': r'<tests>.*<\/tests>'},
    {'name': 'textfilecontent54_test', 'pattern': r'<textfilecontent54_test.*>.*<\/textfilecontent54_test>'},
    {'name': 'test_object_ref', 'pattern': r'<object.*obj:1"\s*\/>'},
    {'name': 'test_state_ref', 'pattern': r'<state.*ste:1"\s*\/>'},
    {'name': 'uname_test', 'pattern': r'<uname_test.*>.*<\/uname_test>'},
    {'name': 'test_uname_object_ref', 'pattern': r'<object object_ref="oval:org.debian.oval:obj:2"\s*\/>'},
    {'name': 'dpkginfo_test', 'pattern': r' <dpkginfo_test.*>.*<\/dpkginfo_test>'},
    {'name': 'objects', 'pattern': r'<objects>.*<\/objects>'},
    {'name': 'textfilecontent54_object', 'pattern': r'<textfilecontent54_object.*>.*<\/textfilecontent54_object>'},
    {'name': 'path', 'pattern': r'<path>.*<\/path>'},
    {'name': 'filename', 'pattern': r'<filename>.*<\/filename>'},
    {'name': 'instance', 'pattern': r'<instance.*>.*<\/instance>'},
    {'name': 'uname_object', 'pattern': r'<uname_object.*\/>'},
    {'name': 'dpkginfo_object', 'pattern': r'<dpkginfo_object.*<\/dpkginfo_object>'},
    {'name': 'states', 'pattern': r'<states>.*<\/states>'},
    {'name': 'textfilecontent54_state', 'pattern': r'<textfilecontent54_state.*>.*<\/dpkginfo_state>'},
    {'name': 'subexpression', 'pattern': r'<subexpression.*<\/subexpression>'},
    {'name': 'dpkginfo_state', 'pattern': r'<dpkginfo_state.*<\/dpkginfo_state>'},
    {'name': 'evr', 'pattern': r'<evr.*<\/evr>'}
]

test_data_ids = [f"missing: {tag['name']}" for tag in test_data]

key_tags = ['definitions', 'definition', 'metadata', 'reference', 'criteria']

xfail_list = ['definitions', 'metadata', 'reference', 'criteria']

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=test_data, ids=test_data_ids)
def remove_tag_feed(request):
    """
    It allows to modify the feed by removing a certain tag and loading the new feed configuration
    """
    backup_data = file.read_xml_file(file_path=custom_debian_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    data_removed_tag = replace_regex(request.param['pattern'], '', str(backup_data))

    file.write_file(file_path=custom_debian_oval_feed_path, data=data_removed_tag)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='BUSTER')

    yield request.param

    file.write_file(file_path=custom_debian_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BUSTER_LOG,
                                        expected_vulnerabilities_number=vd.DEBIAN_NUM_CUSTOM_VULNERABILITIES)


def test_missing_canonical_feed(clean_vuln_tables, get_configuration, configure_environment, remove_tag_feed):
    """Test to check vulnerability detector behavior when importing Debian feed with missing tags"""
    if remove_tag_feed['name'] in xfail_list:
        pytest.xfail('Xfailing due to issue: https://github.com/wazuh/wazuh/issues/5322')

    if remove_tag_feed['name'] in key_tags:
        # It is necessary increase timeout due to the download of a JSON aux file for Debian
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, timeout=vd.DEBIAN_IMPORT_FEED_TIMEOUT)
    else:
        # It is necessary increase timeout due to the download of a JSON aux file for Debian
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.BUSTER_LOG,
                                            expected_vulnerabilities_number=vd.DEBIAN_NUM_CUSTOM_VULNERABILITIES,
                                            timeout=vd.DEBIAN_IMPORT_FEED_TIMEOUT,
                                            check_vuln_number=False)
    vd.check_if_modulesd_is_running()
