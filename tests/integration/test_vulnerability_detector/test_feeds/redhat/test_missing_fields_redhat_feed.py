# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import wazuh_testing.vulnerability_detector as vd

from wazuh_testing.tools import LOG_FILE_PATH, file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex


# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': custom_redhat_json_feed_path,
               'REDHAT_CUSTOM_OVAL_FEED': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

test_data = [
    {'name': 'generator', 'pattern': r'(<generator>)(.*)(<\/generator>)'},
    {'name': 'product_name', 'pattern': r'(<oval:product_name>)(.*)(<\/oval:product_name>)'},
    {'name': 'product_version', 'pattern': r'(<oval:product_version>)(.*)(<\/oval:product_version>)'},
    {'name': 'schema_version', 'pattern': r'(<oval:schema_version>)(.*)(<\/oval:schema_version>)'},
    {'name': 'schema_version', 'pattern': r'(<oval:timestamp>)(2020-08-25T04:10:50)(</oval:timestamp>)'},
    {'name': 'definitions', 'pattern': r'(<definitions>)(.*)(<\/definitions>)'},
    {'name': 'definition', 'pattern': r'<definition.*>.*</criteria>\n..<\/definition>'},
    {'name': 'metadata', 'pattern': r'<metadata>.*<\/metadata>'},
    {'name': 'title', 'pattern': r'<title>.*\(moderate\)<\/title>'},
    {'name': 'description', 'pattern': r'(<description>)(.*)(<\/description>)'},
    {'name': 'affected', 'pattern': r'(<affected family="unix">)(.*)(<\/affected>)'},
    {'name': 'platform', 'pattern': r'(<platform>)(.*\d)(<\/platform>)'},
    {'name': 'reference', 'pattern': r'<reference ref_id=(\S+) ref_url=\S+ source=\S+ />'},
    {'name': 'advisory', 'pattern': r'<advisory .*>\n(.*)\n....</advisory>'},
    {'name': 'severity', 'pattern': r'<severity>\S+<\/severity>'},
    {'name': 'criteria', 'pattern': r'(<criteria.*>)(.*)\n...(<\/criteria>)'},
    {'name': 'criterion', 'pattern': r'(<criterion comment=\"perl-Convert-.*\" test_ref=\"(\S+)\" />)'},
    {'name': 'tests', 'pattern': r'<tests>.*<\/tests>'},
    {'name': 'rpminfo_test', 'pattern': r'<linux-def:rpminfo_test.*<\/linux-def:rpminfo_test>'},
    {'name': 'test_object', 'pattern': r'<linux-def:object object_ref=\"\S+\"\s\/>'},
    {'name': 'objects', 'pattern': r'<objects>.*<\/objects>'},
    {'name': 'rpminfo_object', 'pattern': r'<linux-def:rpminfo_object.*>.*<\/.*rpminfo_object>'},
    {'name': 'object_element', 'pattern': r'<linux-def:name>\S+<\/linux-def:name>'},
    {'name': 'states', 'pattern': r'<states>.*<\/states>'},
    {'name': 'rpminfo_state', 'pattern': r'<linux-def:rpminfo_state.*>.*<\/linux-def:rpminfo_state>'},
    {'name': 'state_object', 'pattern': r'<linux-def:rpmverifyfile_state.*>.*<\/linux-def:rpmverifyfile_state>'},
    {'name': 'variables', 'pattern': r'<variables>.*<\/variables>'}
]

key_tags = ['definitions', 'definition', 'metadata', 'severity', 'reference', 'criteria']

test_data_ids = [f"missing: {tag['name']}" for tag in test_data]

xfail_tags = ['definitions', 'reference', 'criteria']

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=test_data, ids=test_data_ids)
def remove_tag_feed(request):
    """
    It allows to modify the feed by removing a certain tag and loading the new feed configuration
    """
    backup_data = file.read_xml_file(file_path=custom_redhat_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    data_removed_tag = replace_regex(request.param['pattern'], '', str(backup_data))

    file.write_file(file_path=custom_redhat_oval_feed_path, data=data_removed_tag)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield request.param

    file.write_file(file_path=custom_redhat_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_invalid_redhat_feed(clean_vuln_tables, get_configuration, configure_environment, remove_tag_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feed with missing tags
    """
    if remove_tag_feed['name'] in xfail_tags:
        pytest.xfail("Xfailing due https://github.com/wazuh/wazuh/issues/5275")

    # If the tag removed is essential, then look for error messages
    if remove_tag_feed['name'] in key_tags:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor,
                                            log_system_name='Red Hat Enterprise Linux 8',
                                            expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES,
                                            check_vuln_number=False)

    vd.check_if_modulesd_is_running()
