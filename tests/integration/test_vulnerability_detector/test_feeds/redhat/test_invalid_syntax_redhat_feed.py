# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': custom_redhat_json_feed_path,
               'REDHAT_CUSTOM_OVAL_FEED': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Insert extra tags before <generator> tag
insert_pattern = r'(.*)(<generator>)(.*)'

test_data = [
    {"pattern": r'(.*)(<generator>)(.*)', "update": 'generator>', "description": "Delete '<'", "expected_fail": True},
    {"pattern": r'(.*)(<generator>)(.*)', "update": '<generator', "description": "Delete '>'", "expected_fail": True},
    {"pattern": r'(.*)(<generator>)(.*)', "update": 'generator', "description": "Delete '<>'", "expected_fail": True},
    {"pattern": r'(.*)(<generator>)(.*)', "update": '</generator>', "description": "Close initial tag",
     "expected_fail": True},
    {"pattern": r'(.*)(<definitions>)(.*)', "update": '', "description": "Delete opening tag", "expected_fail": True},
    {"pattern": r'(.*)(</definitions>)(.*)', "update": '', "description": "Delete closing tag", "expected_fail": True},
    {"pattern": r'(.*)(<definitions>)(.*)', "update": '<><definitions>', "description": "Empty opening tag",
     "expected_fail": True},
    {"pattern": r'(.*)(<definitions>)(.*)', "update": '</><definitions>', "description": "Empty closing tag",
     "expected_fail": True},
    {"pattern": r'(.*)(<definitions>)(.*)', "update": 'as.-*!`Ã±<definitions>', "description": "Random text before tag",
     "expected_fail": False},
    {"pattern": r'(<oval_definitions.*)(xmlns:oval.*)(<generator>.*)', "update": '', "description": "Delete info",
     "expected_fail": True},
]

# Add EXTRA CHARS to test_data
for item in vd.TEST_CHARACTERS:
    test_data.append({"pattern": r'(.*)(<metadata>)(.*)', "update": f"{item}<metadata>",
                      "description": f"Add {item} character before <metadata>", "expected_fail": False})
    test_data.append({"pattern": r'(.*)(<)(metadata>.*)', "update": item,
                      "description": f"Replace '<' with '{item}' in <metadata>", "expected_fail": True})

test_data_ids = [item['description'] for item in test_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, request):
    """
    Modify the redhat OVAL feed, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_redhat_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    modified_data = replace_regex(pattern=test_data['pattern'], new_value=test_data['update'], data=str(backup_data),
                                  replace_group=True)

    file.write_file(file_path=custom_redhat_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield

    file.write_file(file_path=custom_redhat_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    file.truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('test_data', test_data, ids=test_data_ids)
def test_extra_fields_redhat_feed(test_data, clean_vuln_tables, get_configuration, configure_environment, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feed with syntax errors
    """
    if test_data['expected_fail']:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor,
                                            log_system_name='Red Hat Enterprise Linux 8',
                                            expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES,
                                            check_vuln_number=False)
    vd.check_if_modulesd_is_running()
