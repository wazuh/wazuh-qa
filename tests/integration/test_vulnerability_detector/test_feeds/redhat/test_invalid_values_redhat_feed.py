'''
brief: Set of tests to check the behavior of Vulnerability Detector when the value of a tag is not correct: invalid type, strange characters...

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    operating_system:
        - RedHat
    wazuh_max_version: 4.0.0
    wazuh_min_version: 4.1.5
    tiers:
        - 2
    tags:
        - feeds
'''

import itertools
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.tools.utils import replace_regex

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': custom_redhat_json_feed_path,
               'REDHAT_CUSTOM_OVAL_FEED': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

test_data = [
    {'name': 'generator', 'pattern': r'(<generator>)(.*)(<\/generator>)', 'expected_fail': False},
    {'name': 'product_name', 'pattern': r'(<oval:product_name>)(.*)(<\/oval:product_name>)', 'expected_fail': False},
    {'name': 'product_version', 'pattern': r'(<oval:product_version>)(.*)(<\/oval:product_version>)',
     'expected_fail': False},
    {'name': 'schema_version', 'pattern': r'(<oval:schema_version>)(.*)(<\/oval:schema_version>)',
     'expected_fail': False},
    {'name': 'schema_version', 'pattern': r'(<oval:timestamp>)(2020-08-25T04:10:50)(</oval:timestamp>)',
     'expected_fail': False},
    {'name': 'definitions', 'pattern': r'(<definitions>)(.*)(<\/definitions>)', 'expected_fail': True},
    {'name': 'definition', 'pattern': r'(<definition.*>)(\n.*\n..)(</definition>)', 'expected_fail': True},
    {'name': 'metadata', 'pattern': r'(<metadata>)(.*)(<\/metadata>)', 'expected_fail': True},
    {'name': 'title', 'pattern': r'(<title.*>)(.*)(<\/title>)', 'expected_fail': False},
    {'name': 'description', 'pattern': r'(<description.*>)(.*)(<\/description>)', 'expected_fail': False},
    {'name': 'affected', 'pattern': r'(<affected.*family="unix">)(.*)(<\/affected>)', 'expected_fail': False},
    {'name': 'platform', 'pattern': r'(<platform.*>)(.*)(<\/platform>)', 'expected_fail': False},
    {'name': 'reference', 'pattern': r'(<reference.*ref_id=")(.*)("\s.*name=CVE-000"\s*\/>)', 'expected_fail': False},
    {'name': 'advisory', 'pattern': r'(<advisory.*>)(.*)(<\/advisory>)', 'expected_fail': False},
    {'name': 'severity', 'pattern': r'(<severity>)(.*)(<\/severity>)', 'expected_fail': False},
    {'name': 'criteria', 'pattern': r'(<criteria operator=\"OR\">)(.*)(<\/criteria>)', 'expected_fail': True},
    {'name': 'criterion', 'pattern': r'(<criterion comment=)(.*3\")(\s\/>)', 'expected_fail': True},
    {'name': 'tests', 'pattern': r'(<tests>)(.*)(<\/tests>)', 'expected_fail': True},
    {'name': 'rpminfo_test', 'pattern': r'(<linux-def:rpminfo_test.*id=\")(.*)(\".*<\/linux-def:rpminfo_test>)',
     'expected_fail': True},
    {'name': 'test_object', 'pattern': r'(<linux-def:object object_ref=")(.*)("\s\/>)', 'expected_fail': True},
    {'name': 'objects', 'pattern': r'(<objects>)(.*)(<\/objects>)', 'expected_fail': True},
    {'name': 'rpminfo_object',
     'pattern': r'(<linux-def:rpminfo_object.*id=")(.*)(\" version=\"630\">.*<\/.*rpminfo_object>)',
     'expected_fail': False},
    {'name': 'object_element', 'pattern': r'(<linux-def:name>)(.*ASN1)(<\/linux-def:name>)', 'expected_fail': False},
    {'name': 'states', 'pattern': r'(<states>)(.*)(<\/states>)', 'expected_fail': False},
    {'name': 'rpminfo_state',
     'pattern': r'(<linux-def:rpminfo_state id=\")(.*)(\" version=\"630\">.*<\/linux-def:rpminfo_state>)',
     'expected_fail': False},
    {'name': 'state_object',
     'pattern': r'(linux-def:rpmverifyfile_state id=\")(.*)(\" version=\"630\">.*</linux-def:rpmverifyfile_state)',
     'expected_fail': False},
    {'name': 'variables', 'pattern': r'(<variables>)(.*)(<\/variables>)', 'expected_fail': False},
    {'name': 'local_variable', 'pattern': r'(<local_variable.*id=\")(.*)(\" version=\"640\">.*<\/local_variable>)',
     'expected_fail': False}
]

# Necessary tags to import successfully the vulnerabilities
key_tags = ['definitions', 'definition', 'metadata', 'criteria', 'criterion', 'tests', 'rpminfo_test', 'test_object',
            'rpminfo_object', 'object_element', 'rpminfo_state', 'state_object', 'local_variable']

# Add key tags indexes
tags_indexes = [test_data.index(tag) for tag in test_data if tag['name'] in key_tags]

# Add some non key indexes
tags_indexes.extend([test_data.index(tag) for extra_tag in ['product_name', 'affected', 'platform']
                     for tag in test_data if tag['name'] == extra_tag])

# Sub-list for testing a minimum of tags
tags = [test_data[index] for index in tags_indexes]

tags_ids = [f"tag: {tag['name']}, value: {value}" for tag in tags for value in vd.CUSTOM_INPUT_TEST_VALUES]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, custom_input, request):
    """
    Modify the redhat OVAL feed, setting a test field value
    """
    backup_data = file.read_xml_file(file_path=custom_redhat_oval_feed_path, namespaces=vd.XML_FEED_NAMESPACES,
                                     xml_header=True)

    modified_data = replace_regex(pattern=test_data['pattern'], new_value=custom_input, data=str(backup_data),
                                  replace_group=True)

    file.write_file(file_path=custom_redhat_oval_feed_path, data='<?xml version="1.0" encoding="utf-8"?>')

    file.write_file(file_path=custom_redhat_oval_feed_path, data=modified_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield

    file.write_file(file_path=custom_redhat_oval_feed_path, data=backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


@pytest.mark.parametrize('test_data, custom_input', itertools.product(tags, vd.CUSTOM_INPUT_TEST_VALUES),
                         ids=tags_ids)
def test_invalid_redhat_feed(test_data, custom_input, clean_vuln_tables, get_configuration, configure_environment,
                             modify_feed):
    """
    test_logic:
        Check if vulnerability detector behaves as expected when importing redhat OVAL feed with wrong field values
    checks:
        - The original feed is successfully imported.
        - Vulnerabilities are inserted into the `vulnerabilities` database.
        - Action status message displayed in `ossec.log`.
        - `wazuh-modulesd` is still running once the test has finished (it didn't crash).
    """
    if test_data['expected_fail']:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor,
                                            log_system_name='Red Hat Enterprise Linux 8',
                                            expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES,
                                            check_vuln_number=False)

    vd.check_if_modulesd_is_running()
