# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
import itertools

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file
from wazuh_testing.tools.services import control_service
import wazuh_testing.vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_RHEL_FEEDS_CONF)
custom_redhat_oval_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'REDHAT_JSON_PATH': custom_redhat_oval_feed_path}]
ids = ['REDHAT_configuration']

# Custom inputs to check
inputs = [None, "", "dummy value", 12345, ['1', '2', '3', '4', '5'], "ñ", "テスト", "ИСПЫТАНИЕ", "测试", "اختبار"]

# Redhat fields to check
test_data = [
    {"field": "CVE", "type": str},
    {"field": "severity", "input": "", "type": str},
    {"field": "public_date", "type": str},
    {"field": "advisories", "type": list},
    {"field": "bugzilla", "type": str},
    {"field": "bugzilla_description", "type": str},
    {"field": "cvss_score", "type": str},
    {"field": "cvss_scoring_vector", "type": str},
    {"field": "CWE", "type": str},
    {"field": "affected_packages", "type": list},
    {"field": "resource_url", "type": str},
    {"field": "cvss3_scoring_vector", "type": str},
    {"field": "cvss3_score", "type": str}
]

test_data_ids = [f"field: {item['field']}, value:{value}" for item in test_data for value in inputs]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_data, custom_input, request):
    """
    Modify the redhat OVAL feed, setting a test field value
    """
    backup_data = read_json_file(custom_redhat_oval_feed_path)

    modified_data = dict(backup_data[0])

    modified_data[test_data['field']] = custom_input

    write_json_file(custom_redhat_oval_feed_path, [modified_data, backup_data[1]])

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='RHEL8')

    yield

    write_json_file(custom_redhat_oval_feed_path, backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default"""
    vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.REDHAT_LOG,
                                        expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_data, custom_input', itertools.product(test_data, inputs), ids=test_data_ids)
def test_invalid_redhat_feed(test_data, custom_input, get_configuration, configure_environment, modify_feed):
    """
    Check if vulnerability detector behaves as expected when importing redhat OVAL feed with wrong field values
    """
    if test_data['field'] == 'affected_packages':
        pytest.xfail("Add error messages to this case use. Issue: https://github.com/wazuh/wazuh/issues/5272")

    # If the field is "key" and the input type is not the field type, then look for error messages
    if test_data['field'] in vd.REDHAT_KEY_FIELDS_FEEDS and not type(custom_input) is test_data['type']:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor)
    else:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.REDHAT_LOG,
                                            expected_vulnerabilities_number=vd.REDHAT_NUM_CUSTOM_VULNERABILITIES)
    vd.check_if_modulesd_is_running()
