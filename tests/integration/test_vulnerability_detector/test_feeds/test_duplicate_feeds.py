'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux, Alma Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2022
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Trusty
    - Ubuntu Xenial
    - Ubuntu Bionic
    - Ubuntu Focal
    - Ubuntu Jammy
    - SUSE Linux Enterprise Desktop 15
    - AlmaLinux 8

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - scan_results
'''
import os
import pytest

from wazuh_testing.tools import configuration
from wazuh_testing.db_interface import cve_db
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
CUSTOM_FEED_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_duplicate_feeds.yaml')
test_alert_vuln_removal_path = os.path.join(TEST_CASES_PATH, 'cases_duplicate_feeds.yaml')

# Custom feeds path
custom_redhat_oval_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'redhat', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'redhat', vd.CUSTOM_REDHAT_JSON_FEED)
custom_debian_oval_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'debian', vd.CUSTOM_DEBIAN_OVAL_FEED)
custom_debian_json_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'debian', vd.CUSTOM_DEBIAN_JSON_FEED)
custom_canonical_oval_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'canonical', vd.CUSTOM_CANONICAL_OVAL_FEED)
custom_alas_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'alas', vd.CUSTOM_ALAS_JSON_FEED)
custom_archlinux_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'arch', vd.CUSTOM_ARCHLINUX_JSON_FEED)
custom_msu_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'msu', vd.CUSTOM_MSU_JSON_FEED)
custom_suse_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'suse', vd.CUSTOM_SUSE_OVAL_FEED)
custom_alma_feed_path = os.path.join(CUSTOM_FEED_PATH, 'feeds', 'almalinux', vd.CUSTOM_ALMA_OVAL_FEED)

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = configuration.get_test_cases_data(
    test_alert_vuln_removal_path)
configurations = configuration.load_configuration_template(configurations_path, configuration_parameters,
                                                           configuration_metadata)

# Set offline custom feeds configuration
to_modify = ['CUSTOM_REDHAT_OVAL_FEED_PATH', 'CUSTOM_REDHAT_JSON_FEED_PATH', 'CUSTOM_DEBIAN_OVAL_FEED_PATH',
             'CUSTOM_DEBIAN_JSON_FEED_PATH', 'CUSTOM_CANONICAL_OVAL_FEED_PATH', 'CUSTOM_ALAS_JSON_FEED_PATH',
             'CUSTOM_ARCHLINUX_JSON_FEED_PATH', 'CUSTOM_MSU_JSON_FEED_PATH', 'CUSTOM_SUSE_OVAL_FEED',
             'CUSTOM_ALMA_OVAL_FEED']
new_values = [custom_redhat_oval_feed_path, custom_redhat_json_feed_path, custom_debian_oval_feed_path,
              custom_debian_json_feed_path, custom_canonical_oval_feed_path, custom_alas_feed_path,
              custom_archlinux_feed_path, custom_msu_feed_path, custom_suse_feed_path, custom_alma_feed_path]
configurations = configuration.update_configuration_template(configurations, to_modify, new_values)
configuration_metadata = configuration.update_configuration_template(configuration_metadata, to_modify, new_values)


def check_update_finish_logs(log_monitor=None, provider_name='', provider_json_name=''):
    """Check the provider database update finish event in ossec.log

    Args:
        log_monitor (FileMonitor): Log monitor.
        provider_name (str): Provider name of the downloaded feed.
        provider_json_name (str): Provider json name of the downloaded feed.

    Returns:
        int: number of vulnerabilities inserted
    """
    if 'Red Hat Enterprise Linux 8' in provider_name:
        evm.check_provider_database_update_finish_log(log_monitor=log_monitor,
                                                      provider_name=provider_name)
        evm.check_provider_database_update_finish_log(log_monitor=log_monitor,
                                                      provider_name=provider_json_name)
    else:
        evm.check_provider_database_update_finish_log(log_monitor=log_monitor,
                                                      provider_name=provider_name)

    return cve_db.get_provider_feeds_number()


@pytest.mark.tier(level=2)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_duplicate_feeds(configuration, metadata, set_wazuh_configuration_vdt, truncate_monitored_files,
                         clean_cve_tables_func, setup_log_monitor, restart_modulesd_function):
    '''
    description: Check that the vulnerabilities are not repeated in the database when they are indexed from the feeds.

    test_phases:
        - Set a custom Wazuh configuration.
        - Restart wazuh-modulesd.
        - Wait until feeds are downloaded and indexed in the DB.
        - Get the number of vulnerabilities inserted in the DB.
        - Wait until the next feeds download and indexation.
        - Check that the number of vulnerabilities info is the same than the before indexation.

    wazuh_min_version: 4.4.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the vulnerabilities tables before and after running the test.
        - setup_log_monitor:
            type: fixture
            brief: Create the log monitor.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Verify that the number of vulnerabilities inserted in the VULNERABILITIES table of CVE DB is not duplicated.

    input_description:
        - The `case_duplicate_feeds.yaml` file provides the module configuration for this test.

    expected_output:
        - 'The update of the <provider_name> feed finished successfully'
    '''
    log_monitor = setup_log_monitor

    before_feeds_number = check_update_finish_logs(log_monitor=log_monitor,
                                                   provider_name=metadata['provider_name'],
                                                   provider_json_name=metadata['provider_json_name'])

    after_feeds_number = check_update_finish_logs(log_monitor=log_monitor,
                                                  provider_name=metadata['provider_name'],
                                                  provider_json_name=metadata['provider_json_name'])

    assert before_feeds_number == after_feeds_number
