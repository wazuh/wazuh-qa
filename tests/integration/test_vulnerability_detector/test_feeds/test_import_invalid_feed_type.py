'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Trusty
    - Ubuntu Xenial
    - Ubuntu Bionic

    - Ubuntu Focal
    - Ubuntu Jammy
    - SUSE Linux Enterprise Desktop 15
    
references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - feeds
'''
import os
import pytest
import json

from wazuh_testing.tools.configuration import get_test_cases_data
from wazuh_testing.processes import check_if_modulesd_is_running
from wazuh_testing.tools.file import read_yaml
from wazuh_testing.db_interface import cve_db
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_import_invalid_feed_type.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_import_invalid_feed_type.yaml')

# test_import_invalid_feed_type configurations
configurations = read_yaml(configurations_path)
metadata = [item['metadata'] for item in read_yaml(cases_path)]
_, configuration_metadata, case_ids = get_test_cases_data(cases_path)

# In this test module, we do not build configurations via use cases, but we build them separately
if len(configurations) != len(metadata):
    raise ValueError(f"Number of configurations must be the same than the use cases. {len(configurations)} "
                     f"!= {len(metadata)}")

# Replace custom feed URL tags in configurations
for index, (configuration, use_case) in enumerate(zip(configurations, metadata)):
    configurations[index] = json.loads(json.dumps(configuration).replace('CUSTOM_FEED_URL',
                                                                         use_case['custom_feed_url']))


@pytest.mark.tier(level=2)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=case_ids)
def test_import_invalid_feed_type(configuration, metadata, set_wazuh_configuration_vdt, truncate_monitored_files,
                                  clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check the vulnerability detector behavior when importing unexpected file types as feeds.

    test_phases:
        - Set a custom Wazuh configuration, with custom URL feeds which refer to files of unexpected type.
        - Check the error when updating the provider data.
        - Check the error when updating the CVE database.
        - Check that no junk data has been inserted into the database.
        - Check that wazuh-modulesd is running (it has not crashed after parsing unexpected file types).

    wazuh_min_version: 4.4.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check the error when updating the provider database.
        - Check the error when updating the CVE database.
        - Check that no junk data has been inserted into the database.
        - Check that wazuh-modulesd is running (it has not crashed after parsing unexpected file types).

    input_description:
        - The `configuration_import_invalid_feed_type.yaml` file provides the module configuration for this test.
        - The `cases_import_invalid_feed_type` file provides the test cases.

    expected_output:
        - r"Failed when updating '{provider_feed_name}' database"
        - r"ERROR: .* CVE database could not be updated."
    '''
    if metadata['target'] == 'nvd':
        pytest.xfail(reason='no error reported when importing invalid NVD feed. '
                            'https://github.com/wazuh/wazuh/issues/5210')

    # Check in log that the provider database could not be updated
    for provider_feed_name in metadata['provider_feed_names']:
        evm.check_error_when_updating_provider_db(provider_feed_name)

    # Check the general error when updating the CVE database
    evm.check_error_when_updating_cve_database()

    # Check that no junk data has been inserted in the DB
    if metadata['target'] == 'msu':
        assert cve_db.get_MSU_feeds_number() == 0
    elif metadata['target'] == 'nvd':
        assert cve_db.get_NVD_feeds_number() == 0
    else:
        assert cve_db.get_provider_feeds_number() == 0

    # Check that wazuh-modulesd is running and has not crashed when trying to parse files with unexpected file types
    check_if_modulesd_is_running()
