'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: feeds

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Trusty
    - Ubuntu Xenial
    - Ubuntu Bionic
    - Ubuntu Focal
    - Ubuntu Jammy
    - SUSE Linux Enterprise Desktop 11
    - SUSE Linux Enterprise Desktop 12
    - SUSE Linux Enterprise Desktop 15
    - SUSE Linux Enterprise Server 11
    - SUSE Linux Enterprise Server 12
    - SUSE Linux Enterprise Server 15

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/
    - https://documentation.wazuh.com/current/user-manual/capabilities/syscollector.html

tags:
    - vulnerability
    - vulnerability_detector
    - download
    - feeds
'''
import os
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_download_feeds.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_download_feeds.yaml')

# Test configurations
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters, configuration_metadata)


@pytest.mark.tier(level=2)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=case_ids)
def test_download_feeds(configuration, metadata, set_wazuh_configuration_vdt, truncate_monitored_files,
                        clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check if modulesd downloads successfully the feeds from different providers and os, and check that
                 the feed update date does not exceed a set limit.

    test_phases:
        - Set a custom Wazuh configuration.
        - Restart wazuh-modulesd.
        - Check in log that the database provider has been updated successfully.
        - Check that the timestamp of the feed metadata does not exceed the established threshold limit.

    wazuh_min_version: 4.4.0

    tier: 2

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Check that it starts the feed download.
        - Check that the feed is downloaded successfully.
        - Check that the feed update date does not exceed a set limit.

    input_description:
        - The `configuration_download_feeds.yaml` file provides the module configuration for this test.
        - The `cases_download_feeds` file provides the test cases.

    expected_output:
        - r'Starting .* database update'
        - r'The update of the .* feed finished successfully'
    '''
    if metadata['provider_os'] == 'BIONIC':
        pytest.xfail(reason='Ubuntu Bionic feed parsing error - Wazuh/Wazuh Issue #13556')

    # Check that the feed update has started
    evm.check_provider_database_update_start_log(metadata['provider_name'])
    # Check that the feed has been updated successfully
    evm.check_provider_database_update_finish_log(provider_name=metadata['provider_name'],
                                                  timeout=metadata['download_timeout'])

    if 'provider_json_name' in metadata:
        evm.check_provider_database_update_start_log(metadata['provider_json_name'])
        evm.check_provider_database_update_finish_log(provider_name=metadata['provider_json_name'],
                                                      timeout=metadata['download_timeout'])

    # Check that the timestamp of the feed metadata does not exceed the established threshold limit.
    if metadata['update_treshold_weeks'] != 'None':
        try:
            assert vd.feed_is_recently_updated(provider_name=metadata['provider_name'],
                                               provider_os=metadata['provider_os'],
                                               threshold_weeks=metadata['update_treshold_weeks']), '' \
                                               f"The {metadata['provider_os']} feed has not been recently updated"
        except AssertionError:
            pytest.xfail(reason="The vendor didn't update its feed, so the test fails. But this is not a Wazuh defect.")
