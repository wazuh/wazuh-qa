# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from datetime import timedelta
from time import sleep

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', 'wazuh_download_providers_feeds.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Providers data
provider_info = {
    'redhat': {
        'aux': {
            'provider': 'json_redhat',
            'system_log': 'JSON Red Hat Enterprise Linux',
        },
        'os': ['5', '6', '7', '8'],
        'update_from_year': 1999,
        'system_log': 'Red Hat Enterprise Linux',
        'download_timeout': 1800
    },
    'canonical': {
        'os': ['trusty', 'xenial', 'bionic', 'focal'],
        'update_from_year': '',
        'system_log': 'Ubuntu',
        'download_timeout': 360
    },
    'debian': {
        'os': ['stretch', 'buster'],
        'update_from_year': '',
        'system_log': 'Debian',
        'download_timeout': 360
    },
    'nvd': {
        'os': [],
        'update_from_year': 2002,
        'system_log': 'National Vulnerability Database',
        'download_timeout': 1800
    },
    'msu': {
        'os': [],
        'update_from_year': 2002,
        'system_log': 'Microsoft Security Update',
        'download_timeout': 360
    },
    'arch': {
        'os': [],
        'update_from_year': 2002,
        'system_log': 'Arch Linux',
        'download_timeout': 360
    },
    'suse': {
        'os': ['11-server', '11-desktop', '12-server', '12-desktop', '15-server', '15-desktop'],
        'output_os': ['Server 11', 'Desktop 11', 'Server 12', 'Desktop 12', 'Server 15', 'Desktop 15'],
        'update_from_year': '',
        'system_log': 'SUSE Linux Enterprise',
        'download_timeout': 1800
    },
}

# Set configuration
parameters = []
metadata = []
ids = []

for provider, values in provider_info.items():

    # When 'os' differs from the value printed in logs, 'output_os' is used instead
    if 'output_os' not in values:
        for os in values['os']:
            parameters.append({'PROVIDER_NAME': provider, 'OS': os, 'UPDATE_FROM_YEAR': values['update_from_year']})
            metadata.append({'provider_name': provider, 'os': os, 'update_from_year': values['update_from_year'],
                            'system_log': values['system_log'], 'download_timeout': values['download_timeout']})
            ids.append(f"{provider}_{os}")

    else:
        for os in values['os']:
            parameters.append({'PROVIDER_NAME': provider, 'OS': os, 'UPDATE_FROM_YEAR': values['update_from_year']})
            ids.append(f"{provider}_{os}")
        for os in values['output_os']:
            metadata.append({'provider_name': provider, 'os': os, 'update_from_year': values['update_from_year'],
                            'system_log': values['system_log'], 'download_timeout': values['download_timeout']})

    # If empty os list
    if len(values['os']) == 0:
        parameters.append({'PROVIDER_NAME': provider, 'OS': '', 'UPDATE_FROM_YEAR': values['update_from_year']})
        metadata.append({'provider_name': provider, 'os': '', 'update_from_year': values['update_from_year'],
                         'system_log': values['system_log'], 'download_timeout': values['download_timeout']})
        ids.append(provider)

    # Auxiliary/secondary feeds for a provider
    if 'aux' in values:
        parameters.append(
            {'PROVIDER_NAME': provider, 'OS': values['os'][0], 'UPDATE_FROM_YEAR': values['update_from_year']})
        metadata.append(
            {'provider_name': provider, 'os': values['os'][0], 'update_from_year': values['update_from_year'],
             'system_log': values['aux']['system_log'], 'download_timeout': values['download_timeout']})
        ids.append(values['aux']['provider'])

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
MODULESD_PREFIX = r'.*wazuh-modulesd.*'


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_download_feeds(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd downloads successfully the feeds from different providers and os.
    Additionaly, check that the updates are applied only when required. Ex: Outdated local database.
    """
    check_apply_test({'test_download_feeds'}, get_configuration['tags'])

    provider = get_configuration['metadata']['provider_name']
    os = get_configuration['metadata']['os'].capitalize()
    system_log = get_configuration['metadata']['system_log']
    download_timeout = get_configuration['metadata']['download_timeout']
    callback_system_log = system_log

    # If provider configuration has <os> tag
    if os and system_log == provider_info[provider]['system_log']:
        callback_system_log = f"{system_log} {os}"

    try:
        # Check that it starts the feed download
        wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                                callback=vd.make_vuln_callback(f"Starting '{callback_system_log}' database update"),
                                error_message=f"Could not find the provider {callback_system_log} feed download")

        if get_configuration['metadata']['provider_name'] == "debian":
            # Check Debian Security Tracker feed
            wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                                    callback=vd.make_vuln_callback(f"Indexing vulnerabilities from the Debian "
                                                                   f"Security Tracker."),
                                    error_message=f"Could not find the Debian Security Tracker feed download")

        # Check that the feed is downloaded successfully
        wazuh_log_monitor.start(timeout=download_timeout,
                                callback=vd.make_vuln_callback(f"The update of the '{callback_system_log}' feed \
                                                                 finished successfully"),
                                error_message=f"The provider {callback_system_log} download has taken more than \
                                                {download_timeout / 60} minutes")

        # Travels the time set in the update interval parameter
        check_time_travel(time_travel=True, interval=timedelta(seconds=10))

        # Download again the feed.
        # No updates should be applied since the local copy is up-to-date.

        if get_configuration['metadata']['provider_name'] == "nvd":
            # There's no "already up-to-date" message for the nvd.
            year = get_configuration['metadata']['update_from_year']
            with pytest.raises(TimeoutError):
                vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                                   log_event=fr"The feed '{callback_system_log} ({year})' is outdated. Fetching the " 
                                             fr"last version.",
                                   update_position=False, timeout=15, prefix=MODULESD_PREFIX)
                raise AttributeError(f'Unexpected outdated feed message for the provider {callback_system_log}')

        else:
            if get_configuration['metadata']['provider_name'] == "arch":
                pytest.xfail("The expected message doesn't exist for Arch Linux. Issue: "
                             "https://github.com/wazuh/wazuh/issues/8194")
            else:
                wazuh_log_monitor.start(timeout=download_timeout,
                                    callback=vd.make_vuln_callback(
                                        f"The feed '{callback_system_log}' is in its latest version."),
                                    error_message=f"Could not find the provider {callback_system_log} updated feed "
                                                  f"log after the interval update")
    finally:
        control_service('stop', daemon='wazuh-db')

        # Clean NVD tables when the download has finished
        vd.clean_vuln_and_sys_programs_tables()

        # Wait for cleaning NVD tables
        sleep(5)

        control_service('start', daemon='wazuh-db')
