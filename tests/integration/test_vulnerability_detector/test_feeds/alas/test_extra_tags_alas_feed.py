# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import os
from copy import deepcopy

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file, read_json_file, write_json_file, write_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=2)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, '..', '..', 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'test_feeds', vd.INVALID_ALAS_FEEDS_CONF)
custom_alas_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS_JSON_FEED)
custom_alas2_json_feed_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_ALAS2_JSON_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set Amazon Linux 1 and 2 configuration
parameters = [
    {'ALAS_CUSTOM_FEED': custom_alas_json_feed_path},
    {'ALAS2_CUSTOM_FEED': custom_alas2_json_feed_path}
]
metadata = [
    {'alas_custom_feed': custom_alas_json_feed_path},
    {'alas2_custom_feed': custom_alas2_json_feed_path}
]
ids = [
    'ALAS_configuration',
    'ALAS2_configuration'
]


# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture
def modify_feed(test_values, get_configuration, request):
    """Modify the Amazon Linux JSON feed by setting a test tag value."""
    alas_feed_path = get_configuration['metadata']['alas_custom_feed']
    alas2_feed_path = get_configuration['metadata']['alas_custom_feed']
    if alas_feed_path == custom_alas_json_feed_path:
        custom_feed_path = custom_alas_json_feed_path
    elif alas2_feed_path == custom_alas2_json_feed_path:
        custom_feed_path = custom_alas2_json_feed_path

    backup_data = read_json_file(custom_feed_path)
    modified_data = deepcopy(backup_data)

    # Insert key:value pair as string, since otherwise, you could not insert lists or dictionaries as a key
    modified_string_data = vd.insert_data_json_feed(data=modified_data, field_name=test_values[0],
                                                    field_value=test_values[1], append_data=None, brackets=False)

    write_file(custom_feed_path, modified_string_data)

    vd.clean_vuln_and_sys_programs_tables()

    control_service('restart', daemon='wazuh-modulesd')

    vd.set_system(system='ALAS')

    yield

    write_json_file(custom_feed_path, backup_data)

    vd.clean_vuln_and_sys_programs_tables()

    truncate_file(LOG_FILE_PATH)


def test_no_feed_changes(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    """Check if the feed is imported successfully by default."""
    if get_configuration['metadata']['alas_custom_feed'] == custom_alas_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS_LOG,
                                            expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
    elif get_configuration['metadata']['alas2_custom_feed'] == custom_alas2_json_feed_path:
        vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS2_LOG,
                                            expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)


@pytest.mark.parametrize('test_values', vd.EXTRA_TEST_VALUES, ids=vd.EXTRA_TEST_IDS)
def test_extra_tags_alas_linux_feed(test_values, clean_vuln_tables, get_configuration, configure_environment,
                                    modify_feed):
    """Check if Vulnerability Detector behaves as expected while importing Amazon Linux JSON feed with extra tags."""
    field = test_values[0]

    if type(field) in [str]:
        if get_configuration['metadata']['alas_custom_feed'] == custom_alas_json_feed_path:
            vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS_LOG,
                                                expected_vulnerabilities_number=vd.ALAS_NUM_CUSTOM_VULNERABILITIES)
        elif get_configuration['metadata']['alas2_custom_feed'] == custom_alas2_json_feed_path:
            vd.check_feed_imported_successfully(wazuh_log_monitor=wazuh_log_monitor, log_system_name=vd.ALAS2_LOG,
                                                expected_vulnerabilities_number=vd.ALAS2_NUM_CUSTOM_VULNERABILITIES)
    else:
        vd.check_failure_when_importing_feed(wazuh_log_monitor=wazuh_log_monitor, parser_error=True)

    vd.check_if_modulesd_is_running()
