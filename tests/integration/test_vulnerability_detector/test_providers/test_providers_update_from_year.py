import os
import pytest
import re

from wazuh_testing import global_parameters
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import callback_detect_update_from_year_result, \
                                                 callback_download_redhat_feed_from_year, \
                                                 nvd_check_feed_download_regex, \
                                                 UpdateFromYearResult

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_update_from_year.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

test_providers = ['nvd', 'redhat']
test_years = [1998, 1999, 2001, 2002, 2005, 2010, 2015, 2020]

min_year = {
  'redhat': 1999,
  'nvd': 2002
}

parameters = []
metadata = []
ids = []

for provider in test_providers:
    for year in test_years:
        parameters.append({'PROVIDER': provider, 'UPDATE_FROM_YEAR': year})
        metadata.append({'provider': provider, 'update_from_year': year})
        ids.append(f'{provider}_{year}')

# Configuration data
configurations = load_wazuh_configurations(
    configurations_path, __name__, params=parameters, metadata=metadata)

# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


# Tests
def test_update_from_year(get_configuration, configure_environment, restart_modulesd):

    """
    Check if vulnerability detector download feeds from the correct year based on  `update_from_year` option
    """

    configured_provider = get_configuration['metadata']['provider']
    configured_update_from = get_configuration['metadata']['update_from_year']

    callback_result = wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                                     callback=callback_detect_update_from_year_result).result()
    if callback_result.result == 'invalid_year':
        assert configured_update_from < min_year[configured_provider], \
            f"{configured_update_from} is a valid year for {configured_provider}, vulnerability detector should have not fail!"

    elif callback_result.result == 'provider_added':
        assert configured_provider == callback_result.actual_provider, "Vulnerability detector is using a wrong provider"
        assert configured_update_from == callback_result.actual_update_from, "Vulnerability detector is using a wrong year as update_from value"
        url_update_from = wazuh_log_monitor.start(timeout=global_parameters.default_timeout,
                                                  callback=callback_download_redhat_feed_from_year,
                                                  error_message="No feed downloaded").result()
        assert configured_update_from <= url_update_from

        if configured_provider == 'nvd':
            with open(LOG_FILE_PATH) as log_file:
                for line in log_file:
                    match_download_feed = re.match(nvd_check_feed_download_regex, line)
                    if match_download_feed is not None:
                        an_update_from_year = int(match_download_feed.group(1))
                        assert configured_update_from <= an_update_from_year, "A feed was download from a year previous to the selected one"

        assert configured_update_from >= min_year[configured_provider], \
            f"{configured_update_from} is not a valid year for {configured_provider}, vulnerability detector should fail and notify that!"

