# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = pytest.mark.tier(level=1)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_providers_update_from_year.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

test_providers = ['redhat', 'nvd']
test_years = [1998, 2001, 2002, 2005, 2010, 2015, 2020]

min_year = {
    'nvd': 2002,
    'redhat': 1999
}

parameters = []
metadata = []
ids = []

for provider in test_providers:
    for year in test_years:
        parameters.append({'PROVIDER': provider, 'UPDATE_FROM_YEAR': year})
        metadata.append({'provider': provider, 'update_from_year': year})
        ids.append(f'{provider}_{year}')

INVALID_YEAR_MESSAGE = "ERROR: Invalid content for 'update_from_year' option at module 'vulnerability-detector'"
MODULESD_PREFIX = r'.*wazuh-modulesd.*'

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_update_from_year(clean_vuln_tables, get_configuration, configure_environment,
                          restart_modulesd_catching_ossec_conf_error):
    """ Check if vulnerability detector download feeds from the correct year based on `update_from_year` option """

    update_year = get_configuration['metadata']['update_from_year']
    provider = get_configuration['metadata']['provider']

    # If valid year
    if update_year >= min_year[provider]:
        if provider == 'redhat':
            correct_year_log_event = fr".*Downloading .*cve.json\?after=1999-01-01.*"
            wrong_year_log_event = fr".*Downloading .*cve.json\?after={update_year}-01-01.*"
        else:  # NVD provider
            correct_year_log_event = fr".*Downloading .*nvdcve-\d.\d-{update_year}.meta.*"
            wrong_year_log_event = fr".*Downloading .*nvdcve-\d.\d-{update_year - 1}.meta.*"

        # Check that there is no download from one year before of the update from year value
        with pytest.raises(TimeoutError):
            vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=wrong_year_log_event,
                               update_position=False, timeout=90, prefix=MODULESD_PREFIX)
            raise AttributeError(f'It has been downloaded a feed from an invalid year {update_year} for {provider}')

        # Check update from year log event
        vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=correct_year_log_event, update_position=False,
                           timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT, prefix=MODULESD_PREFIX)
    else:
        log_event = "ERROR: Invalid content for 'update_from_year' option at module 'vulnerability-detector'"
        vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=log_event, update_position=False,
                           timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT, prefix=MODULESD_PREFIX)

    vd.clean_vd_tables()
