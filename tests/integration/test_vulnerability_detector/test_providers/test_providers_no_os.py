# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service
from wazuh_testing.vulnerability_detector import make_vuln_callback, VULN_DETECTOR_GLOBAL_TIMEOUT

# Marks
pytestmark = pytest.mark.tier(level=1)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_os.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'PROVIDER': 'canonical'},
    {'PROVIDER': 'debian'},
    {'PROVIDER': 'redhat'},
    {'PROVIDER': 'nvd'},
    {'PROVIDER': 'msu'},
    {'PROVIDER': 'arch'},
]

metadata = [
    {'provider_name': 'Ubuntu', 'error': 1},
    {'provider_name': 'Debian', 'error': 1},
    {'provider_name': 'Red Hat Enterprise Linux', 'os': ['5', '6', '7', '8', '']},
    {'provider_name': 'National Vulnerability Database', 'os': ['']},
    {'provider_name': 'Microsoft Security Update', 'os': ['']},
    {'provider_name': 'Arch Linux', 'os': ['']},
]

ids = [f"{item['PROVIDER']}" for item in params]

# configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=params, metadata=metadata)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_providers_no_os(clean_vuln_tables, get_configuration, configure_environment):
    """
    Check if modulesd downloads the feeds without specifing the os version.
    """
    check_apply_test({'test_providers_no_os'}, get_configuration['tags'])
    provider_name = get_configuration['metadata']['provider_name']

    # Those providers that aren't expected to work without the <os> tag.
    try:
        control_service('restart')
    except ValueError:
        assert 'error' in get_configuration['metadata']

    if 'error' in get_configuration['metadata']:
        wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                                callback=vd.make_vuln_callback(r".* \(\d+\): Configuration error at.*",
                                                               prefix='.*wazuh-modulesd.*'),
                                error_message=f"Error log 'Configuration error at '/var/ossec/etc/ossec.conf'.' "
                                              f"not found")
    else:
        for os in get_configuration['metadata']['os']:
            if os != '':
                os_name = f"{provider_name} {os}"
            else:
                os_name = f"JSON {provider_name}" if 'Red Hat' in provider_name else f"{provider_name}"

            wazuh_log_monitor.start(
                timeout=80 if 'Red Hat' in os_name else VULN_DETECTOR_GLOBAL_TIMEOUT,
                callback=make_vuln_callback(f"Starting '{os_name}' database update"),
                error_message=f"Could not find {os_name} update starting log",
            )
