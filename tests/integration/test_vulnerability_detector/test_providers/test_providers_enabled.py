# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback, VULN_DETECTOR_GLOBAL_TIMEOUT

# Marks
pytestmark = pytest.mark.tier(level=1)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_enabled.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'ENABLED': 'yes', 'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'ENABLED': 'yes', 'PROVIDER': 'debian', 'OS': 'buster'},
    {'ENABLED': 'yes', 'PROVIDER': 'redhat', 'OS': '7'},
    {'ENABLED': 'yes', 'PROVIDER': 'nvd', 'OS': ''},
    {'ENABLED': 'yes', 'PROVIDER': 'msu', 'OS': ''},

    {'ENABLED': 'no', 'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'ENABLED': 'no', 'PROVIDER': 'debian', 'OS': 'buster'},
    {'ENABLED': 'no', 'PROVIDER': 'redhat', 'OS': '7'},
    {'ENABLED': 'no', 'PROVIDER': 'nvd', 'OS': ''},
    {'ENABLED': 'no', 'PROVIDER': 'msu', 'OS': ''},
]

metadata = [
    {'enabled': 'yes', 'provider_name': 'Ubuntu Bionic'},
    {'enabled': 'yes', 'provider_name': 'Debian Buster'},
    {'enabled': 'yes', 'provider_name': 'Red Hat Enterprise Linux 7'},
    {'enabled': 'yes', 'provider_name': 'National Vulnerability Database'},
    {'enabled': 'yes', 'provider_name': 'Microsoft Security Update'},
    {'enabled': 'no', 'provider_name': 'Ubuntu Bionic'},
    {'enabled': 'no', 'provider_name': 'Debian Buster'},
    {'enabled': 'no', 'provider_name': 'Red Hat Enterprise Linux 7'},
    {'enabled': 'no', 'provider_name': 'National Vulnerability Database'},
    {'enabled': 'no', 'provider_name': 'Microsoft Security Update'},
]

ids = [f"{item['ENABLED']}-{item['PROVIDER']}" for item in params]

# configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=params, metadata=metadata)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_enabled(get_configuration, configure_environment, restart_modulesd):
    """
    Check if modulesd downloads the feeds from different providers when enabled is set to yes.
    """
    provider_name = get_configuration['metadata']['provider_name']
    if get_configuration['metadata']['enabled'] == 'no':
        with pytest.raises(TimeoutError):
            wazuh_log_monitor.start(timeout=VULN_DETECTOR_GLOBAL_TIMEOUT,
                                    callback=make_vuln_callback("Starting.+database update"))
            raise AttributeError(f"Unexpected event {provider_name} database updating")
    else:
        wazuh_log_monitor.start(
            timeout=VULN_DETECTOR_GLOBAL_TIMEOUT,
            callback=make_vuln_callback(f"Starting '{provider_name}' database update"),
            error_message=f"Could not find {provider_name} update starting log",
        )
