'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: providers

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Ubuntu Jammy
    - SUSE Linux Enterprise Desktop 15

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#provider

tags:
    - settings
    - vulnerability
    - vulnerability_detector
    - providers
'''
import os
import pytest
from datetime import date

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_update_from_year.yaml')
test_enabled_cases_path = os.path.join(TEST_CASES_PATH, 'cases_update_from_year.yaml')

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = get_test_cases_data(test_enabled_cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters, configuration_metadata)
current_year = date.today().year

# Set current year to the <update_from_year> tag configurations
for index in range(len(configurations)):
    configurations[index]['sections'][0]['elements'][1]['provider']['elements'][2] = \
        {'update_from_year': {'value': current_year}}


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_update_from_year(configuration, metadata, set_wazuh_configuration_vdt, truncate_monitored_files,
                          clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check if vulnerability detector download feeds from the correct year based on `update_from_year`
                 option.

    test_phases:
        - Set a custom Wazuh configuration.
        - Restart wazuh-modulesd.
        - Check that the feed is being downloading from the specified year until current date.

    wazuh_min_version: 4.4.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all tables of the CVE database before and after finishing the test.
        - restart_modulesd_catching_ossec_conf_error:
            type: fixture
            brief: Restart the `modulesd` daemon and catch the ossec configuration errors.

    assertions:
        - Verify that the feeds download is performed for the actual year when NVD is set as provider.
        - Verity that when the provider is not NVD the warning message is catched.

    input_description:
        - The `test_providers_update_from_year.yaml` file provides the module configuration for this test.

    expected_output:
        - rf".*Downloading .*nvdcve-d.d-{update_year}.meta.*"
        - "INFO: 'update_from_year' option at module 'vulnerability-detector' is deprecated"
        - "'update_from_year' option cannot be used for 'msu' provider."
        - f"Invalid option 'update_from_year' for '{provider}' provider at 'vulnerability-detector'"
    '''
    update_year = current_year
    provider = metadata['provider']

    if provider == 'nvd':
        evm.check_nvd_download_log(update_year)
    else:
        evm.check_invalid_provider_update_from_year_log(provider)
