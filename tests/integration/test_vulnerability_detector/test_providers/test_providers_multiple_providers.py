'''
brief: The tests will modify the value of `enabled` tag in `ossec.conf` and check the result in `ossec.log`.

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - modulesd
    operating_system:
        - Windows
        - Ubuntu
        - Debian
        - Redhat
        - Arch Linux
    tiers:
        - 0
'''
import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_custom_files = os.path.join(current_test_path, '..', 'data')
test_data_path = os.path.join(current_test_path, "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_multiple_providers.yaml")
custom_redhat_oval_feed_path = os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_path = os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)
custom_redhat_oval_feed_url = 'file://' + os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_redhat_json_feed_url = 'file://' + os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_REDHAT_JSON_FEED)
custom_debian_oval_feed_path = os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_DEBIAN_OVAL_FEED)
custom_debian_json_feed_path = os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_DEBIAN_JSON_FEED)
custom_debian_oval_feed_url = 'file://' + os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_DEBIAN_OVAL_FEED)
custom_debian_json_feed_url = 'file://' + os.path.join(test_data_custom_files, 'feeds', vd.CUSTOM_DEBIAN_JSON_FEED)
config = ['test_redhat_default', 'test_redhat_path', 'test_redhat_multipath', 'test_redhat_path_multipath',
          'test_redhat_url', 'test_redhat_multiurl', 'test_redhat_url_multiurl', 'test_debian_default',
          'test_debian_path', 'test_debian_multipath', 'test_debian_path_multipath', 'test_debian_url',
          'test_debian_multiurl', 'test_debian_url_multiurl']
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'PROVIDER': 'redhat', 'OS': '8', 'OS_PATH': custom_redhat_oval_feed_path, 'PATH': custom_redhat_json_feed_path,
     'OS_URL': custom_redhat_oval_feed_url, 'URL': custom_redhat_json_feed_url},
    {'PROVIDER': 'debian', 'OS': 'buster', 'OS_PATH': custom_debian_oval_feed_path,
     'PATH': custom_debian_json_feed_path,
     'OS_URL': custom_debian_oval_feed_url, 'URL': custom_debian_json_feed_url}
]

metadata = [
    {'provider': 'redhat', 'os': '8', 'os_path': custom_redhat_oval_feed_path, 'path': custom_redhat_json_feed_path,
     'os_url': custom_redhat_oval_feed_url, 'url': custom_redhat_json_feed_url},
    {'provider': 'debian', 'os': 'buster', 'os_path': custom_debian_oval_feed_path,
     'path': custom_debian_json_feed_path,
     'os_url': custom_debian_oval_feed_url, 'url': custom_debian_json_feed_url}
]

ids = [f"{item}" for item in config]

# configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=params, metadata=metadata)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """
    test_logic:
        Get configurations from the module."""
    return request.param


def test_multiple_providers(clean_vuln_tables, get_configuration, configure_environment, restart_modulesd):
    r"""
    test_logic:
        From now on, Redhat and Debian providers use two feeds to fetch vulnerabilities and CVEs' metadata.
        \<os path=...\> option indicates the local path where the OVAL feed is whereas \<path\> indicates
        the local path where the another feed is. The same goes for \<os url=...\> and \<url\> options.
        This test verifies the path/url and multipath/url options work properly according to the configuration
        and check there are no conflicts when downloading or reading the feeds.
    """
    provider = get_configuration['metadata']['provider']

    if provider == 'redhat':
        os_feed = 'https://www.redhat.com/security/data/oval/v2/RHEL8/rhel-8-including-unpatched.oval.xml.bz2'
        feed = 'https://access.redhat.com/labs/securitydataapi/cve.json?after=1999-01-01&per_page=1000&page=1'
    else:
        os_feed = 'https://www.debian.org/security/oval/oval-definitions-buster.xml'
        feed = 'https://security-tracker.debian.org/tracker/data/json'

    try:
        if get_configuration['sections'][0]['elements'][1]['provider']['elements'][1]['os']['attributes']:
            if 'path' in get_configuration['tags'][0]:
                os_feed = get_configuration['metadata']['os_path']
            else:
                os_feed = get_configuration['metadata']['os_url']
    except (KeyError, IndexError):
        pass

    try:
        if get_configuration['sections'][0]['elements'][1]['provider']['elements'][2]:
            path_enable = True
            if 'path' in get_configuration['tags'][0]:
                feed = get_configuration['metadata']['path']
            else:
                feed = get_configuration['metadata']['url']
    except (KeyError, IndexError):
        path_enable = False

    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                            callback=vd.make_vuln_callback(rf"(Path|Url): ('{os_feed}'|'none').*",
                                                           prefix='.*wazuh-modulesd.*'),
                            error_message=f"OVAL feed {os_feed} from provider {provider} not correctly assigned")

    if path_enable and provider == 'redhat':
        wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                                callback=vd.make_vuln_callback(rf"Multi (path|url): '{feed}'.*",
                                                               prefix='.*wazuh-modulesd.*'),
                                error_message=f"Feed {feed} from provider {provider} was not correctly assigned")

    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                            callback=vd.make_vuln_callback(rf"(Fetching feed from|Downloading) '{os_feed}'.*",
                                                           prefix='.*wazuh-modulesd.*'),
                            error_message=f"Event 'Fetching or Downloading {os_feed} was not received")

    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                            callback=vd.make_vuln_callback(f"((Fetching .* from|Downloading) '{feed}'|.*Trying to "
                                                           f"download).*",
                                                           prefix='.*wazuh-modulesd.*'),
                            error_message=f"Event 'Trying to download {feed}' was not received")

    vd.clean_vuln_and_sys_programs_tables()
