# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import make_vuln_callback, VULN_DETECTOR_GLOBAL_TIMEOUT

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")
configurations_path = os.path.join(test_data_path, "wazuh_providers_os.yaml")

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

params = [
    {'PROVIDER': 'alas', 'OS': 'amazon-linux'},
    {'PROVIDER': 'alas', 'OS': 'amazon-linux-2'},
    {'PROVIDER': 'canonical', 'OS': 'trusty'},
    {'PROVIDER': 'canonical', 'OS': 'xenial'},
    {'PROVIDER': 'canonical', 'OS': 'bionic'},
    {'PROVIDER': 'debian', 'OS': 'stretch'},
    {'PROVIDER': 'debian', 'OS': 'buster'},
    {'PROVIDER': 'redhat', 'OS': '5'},
    {'PROVIDER': 'redhat', 'OS': '6'},
    {'PROVIDER': 'redhat', 'OS': '7'},
    {'PROVIDER': 'redhat', 'OS': '8'},
    {'PROVIDER': 'nvd', 'OS': ''},
    {'PROVIDER': 'msu', 'OS': ''},
]

metadata = [
    {'provider_name': 'Amazon Linux 1'},
    {'provider_name': 'Amazon Linux 2'},
    {'provider_name': 'Ubuntu Trusty'},
    {'provider_name': 'Ubuntu Xenial'},
    {'provider_name': 'Ubuntu Bionic'},
    {'provider_name': 'Debian Stretch'},
    {'provider_name': 'Debian Buster'},
    {'provider_name': 'Red Hat Enterprise Linux 5'},
    {'provider_name': 'Red Hat Enterprise Linux 6'},
    {'provider_name': 'Red Hat Enterprise Linux 7'},
    {'provider_name': 'Red Hat Enterprise Linux 8'},
    {'provider_name': 'National Vulnerability Database', 'os_warning': 1},
    {'provider_name': 'Microsoft Security Update', 'os_warning': 1},
]

ids = [f"{item['PROVIDER']}-{item['OS']}" for item in params]

# configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=params, metadata=metadata)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_providers(get_configuration, configure_environment, restart_modulesd):
    """Check if modulesd downloads the feeds for each os.

    For this, it verifies that the update of the feeds is started by checking
    the log file. Additionally, it verifies that a warning message is generated
    regarding the improper use of the <os> tag in providers that do not use it.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset the logs file and start a new monitor.
    """
    check_apply_test({'test_providers_os'}, get_configuration['tags'])

    provider_name = get_configuration['metadata']['provider_name']
    if 'os_warning' in get_configuration['metadata']:
        wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_GLOBAL_TIMEOUT,
                                callback=vd.make_vuln_callback(rf".*Invalid option 'os' for .* provider.*",
                                                               prefix='.*wazuh-modulesd.*'),
                                error_message=f"Warning log 'Invalid option 'os' for '{provider_name}' "
                                              f"provider not found")
    wazuh_log_monitor.start(
        timeout=VULN_DETECTOR_GLOBAL_TIMEOUT,
        callback=make_vuln_callback(f"Starting '{provider_name}' database update"),
        error_message=f"Could not find {provider_name} update starting log",
    )
