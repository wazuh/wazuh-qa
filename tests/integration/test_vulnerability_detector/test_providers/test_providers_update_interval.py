# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from datetime import timedelta

import pytest
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.time import time_to_seconds
from wazuh_testing.vulnerability_detector import make_vuln_callback

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_providers_update_interval.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

time_units = ['60s', '60m', '1h', '1d']
parameters = []
metadata = []
ids = []

for item in time_units:
    parameters.extend([
        {'PROVIDER_NAME': 'redhat', 'OS': '8', 'INTERVAL': item},
        {'PROVIDER_NAME': 'canonical', 'OS': 'bionic', 'INTERVAL': item},
        {'PROVIDER_NAME': 'debian', 'OS': 'buster', 'INTERVAL': item},
        {'PROVIDER_NAME': 'nvd', 'OS': '', 'INTERVAL': item},
        {'PROVIDER_NAME': 'msu', 'OS': '', 'INTERVAL': item}
    ])

    metadata.extend([
        {'provider_name': 'redhat', 'os': '8', 'interval': item},
        {'provider_name': 'canonical', 'os': 'bionic', 'interval': item},
        {'provider_name': 'debian', 'os': 'buster', 'interval': item},
        {'provider_name': 'nvd', 'os': '', 'interval': item},
        {'provider_name': 'msu', 'os': '', 'interval': item}
    ])

    ids.extend([f"Redhat_{item}", f"Canonical_{item}", f"Debian_{item}", f"NVD_{item}", f"MSU_{item}"])

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)

# Callbacks
callback_provider_database_updating = make_vuln_callback('Starting .* database update')


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


def test_update_interval(get_configuration, configure_environment, restart_modulesd):
    """
    Check if the provider database update is triggered after the set interval time has passed
    """
    check_apply_test({'test_providers_update_interval'}, get_configuration['tags'])

    provider = get_configuration['metadata']['provider_name']
    interval_update_time = get_configuration['metadata']['interval']
    seconds_to_travel = time_to_seconds(interval_update_time)

    # Check that the update has not started prematurely
    with pytest.raises(TimeoutError):
        wazuh_log_monitor.start(timeout=8,
                                callback=callback_provider_database_updating)
        raise AttributeError(f'Unexpected event {provider} database updating')

    # Travels the time set in the update interval parameter
    check_time_travel(time_travel=True, interval=timedelta(seconds=seconds_to_travel))

    # Check that the feed is downloaded after the set update interval
    # (10s for vuln thread refresh + 5s to wait callback)
    wazuh_log_monitor.start(timeout=15,
                            callback=callback_provider_database_updating,
                            error_message=f"Could not find the provider {provider} updating feed log after \
                                            the interval update")
