# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_different_cves.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.VULNERABILITIES)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)}]
ids = ['test_different_cves']

vulnerabilities = file.read_json(vulnerabilities_data_path)

vulnerabilities_nvd = vulnerabilities['vulnerabilities_nvd_different']
vulnerabilities_provider = vulnerabilities['vulnerabilities_provider_different']

rpm_expected_alerts_nvd = len(list(filter(lambda x: x['vulnerable'] in ['all', 'rpm'], vulnerabilities_nvd)))
rpm_expected_alerts_provider = len(list(filter(lambda x: x['vulnerable'] in ['all', 'rpm'], vulnerabilities_provider)))

deb_expected_alerts_nvd = len(list(filter(lambda x: x['vulnerable'] in ['all', 'deb'], vulnerabilities_nvd)))
deb_expected_alerts_provider = len(list(filter(lambda x: x['vulnerable'] in ['all', 'deb'], vulnerabilities_provider)))

system_data = [
    {"target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8",
     "format": "rpm", "nvd_vulnerabilities_number": rpm_expected_alerts_nvd,
     "provider_vulnerabilities_number": rpm_expected_alerts_provider},
    {"target": "RHEL7", "os_name": "CentOS Linux", "os_major": "7", "os_minor": "8", "name": "centos7",
     "format": "rpm", "nvd_vulnerabilities_number": rpm_expected_alerts_nvd,
     "provider_vulnerabilities_number": rpm_expected_alerts_provider},
    {"target": "RHEL6", "os_name": "CentOS Linux", "os_major": "6", "os_minor": "10", "name": "centos6",
     "format": "rpm", "nvd_vulnerabilities_number": rpm_expected_alerts_nvd,
     "provider_vulnerabilities_number": rpm_expected_alerts_provider},
    {"target": "RHEL5", "os_name": "CentOS Linux", "os_major": "5", "os_minor": "11", "name": "centos5",
     "format": "rpm", "nvd_vulnerabilities_number": rpm_expected_alerts_nvd,
     "provider_vulnerabilities_number": rpm_expected_alerts_provider},
    {"target": "BIONIC", "os_name": "Ubuntu", "os_major": "18", "os_minor": "04", "name": "Ubuntu-bionic",
     "format": "deb", "nvd_vulnerabilities_number": deb_expected_alerts_nvd,
     "provider_vulnerabilities_number": deb_expected_alerts_provider},
    {"target": "XENIAL", "os_name": "Ubuntu", "os_major": "16", "os_minor": "04", "name": "Ubuntu-xenial",
     "format": "deb", "nvd_vulnerabilities_number": deb_expected_alerts_nvd,
     "provider_vulnerabilities_number": deb_expected_alerts_provider},
    {"target": "TRUSTY", "os_name": "Ubuntu", "os_major": "14", "os_minor": "04", "name": "Ubuntu-trusty",
     "format": "deb", "nvd_vulnerabilities_number": deb_expected_alerts_nvd,
     "provider_vulnerabilities_number": deb_expected_alerts_provider},
    {"target": "BUSTER", "os_name": "Debian GNU/Linux", "os_major": "10", "os_minor": "", "name": "debian10",
     "format": "deb", "nvd_vulnerabilities_number": deb_expected_alerts_nvd,
     "provider_vulnerabilities_number": deb_expected_alerts_provider},
    {"target": "STRETCH", "os_name": "Debian GNU/Linux", "os_major": "9", "os_minor": "", "name": "debian9",
     "format": "deb", "nvd_vulnerabilities_number": deb_expected_alerts_nvd,
     "provider_vulnerabilities_number": deb_expected_alerts_provider}
]

system_data_ids = [system['target'] for system in system_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    # Insert half vulnerabilities for provider feed
    for vulnerability in vulnerabilities_provider:
        vd.insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=request.param['target'])

    # Insert vulnerable packages
    for vulnerability in vulnerabilities_nvd:
        vd.insert_package(**vulnerability['package'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent=mock_agent)


def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                mock_vulnerability_scan):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """
    provider_vulnerabilities_number = mock_vulnerability_scan["provider_vulnerabilities_number"]
    nvd_vulnerabilities_number = mock_vulnerability_scan["nvd_vulnerabilities_number"]

    # Check the vulnerabilities of packages inserted
    for item in vulnerabilities_provider:
        if item['vulnerable'] == mock_vulnerability_scan["format"] or item['vulnerable'] == 'all':
            vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])

    for item in vulnerabilities_nvd:
        if item['vulnerable'] == mock_vulnerability_scan["format"] or item['vulnerable'] == 'all':
            vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])

    # Check that the number of provider vulnerabilities is the expected
    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event=f"A total of '{nvd_vulnerabilities_number}' vulnerabilities have been reported "
                                 "for agent '.*' thanks to the 'NVD' feed.")

    # Check that the number of NVD vulnerabilities is the expected
    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event=f"A total of '{provider_vulnerabilities_number}' vulnerabilities have been reported "
                                 "for agent '.*' thanks to the 'vendor' feed.")

    vd.check_if_modulesd_is_running()
