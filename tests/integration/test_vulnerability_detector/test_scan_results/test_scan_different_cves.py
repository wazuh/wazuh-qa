# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_different_cves.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.VULNERABILITIES)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)}]
ids = ['test_different_cves']

vulnerabilities = file.read_json(vulnerabilities_data_path)

vulnerabilities_nvd = vulnerabilities['vulnerabilities_nvd_different']
vulnerabilities_provider = vulnerabilities['vulnerabilities_provider_different']

rpm_expected_alerts_nvd = len(list(filter(lambda x: x['vulnerable'] in ['all', 'rpm'], vulnerabilities_nvd)))
rpm_expected_alerts_provider = len(list(filter(lambda x: x['vulnerable'] in ['all', 'rpm'], vulnerabilities_provider)))

deb_expected_alerts_nvd = len(list(filter(lambda x: x['vulnerable'] in ['all', 'deb'], vulnerabilities_nvd)))
deb_expected_alerts_provider = len(list(filter(lambda x: x['vulnerable'] in ['all', 'deb'], vulnerabilities_provider)))

pkg_expected_alerts_nvd = len(list(filter(lambda x: x['vulnerable'] in ['all', 'pkg'], vulnerabilities_nvd)))
pkg_expected_alerts_provider = len(list(filter(lambda x: x['vulnerable'] in ['all', 'pkg'], vulnerabilities_provider)))

systems = ['ALAS', 'ALAS2', 'RHEL8', 'RHEL7', 'RHEL6', 'RHEL5',
           'BIONIC', 'XENIAL', 'TRUSTY', 'BUSTER', 'STRETCH', 'ARCH']
system_data = [vd.SYSTEM_DATA[system] for system in systems]
system_data_ids = [system['target'] for system in system_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    vd.insert_osinfo(agent=mock_agent, scan_id = 0, hostname=vd.MOCKED_AGENT_NAME, os_name=request.param['os_name'],
                     os_major=request.param['os_major'],os_minor=request.param['os_minor'])

    # Insert half vulnerabilities for provider feed
    for vulnerability in vulnerabilities_provider:
        vd.insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=request.param['target'])

    # Insert vulnerable packages
    for vulnerability in vulnerabilities_nvd:
        vd.insert_package(**vulnerability['package'], source=vulnerability['package']['name'],
                          vendor=vd.VENDOR[request.param['target']], format=request.param['format'], agent=mock_agent)


@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                mock_vulnerability_scan):
    """This test checks what happens if a vulnerability is being reported by NVD
    and not by the OS provider or vice-versa.

    When a package has a specific provider defined, if this provider matches with the OVAL provider,
    then the provider feed has priority versus the NVD one but, if the package's provider is a generic one,
    then NVD feed has priority.

    In this test, we check that NVD feed has priority with the generic package's provider and the
    provider feed has priority for those packages where the provider matches the feeds' one.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset the logs file and start a new monitor.
        check_cve_db (fixture): Check if the CVE database exists and its tables are created.
        mock_vulnerability_scan (fixture): It allows to mock the vulnerability scan inserting custom packages,
                                           feeds and changing the host system.
    """
    provider_vulnerabilities_number = 0
    nvd_vulnerabilities_number = 0

    if mock_vulnerability_scan['format'] == 'rpm':
        provider_vulnerabilities_number = rpm_expected_alerts_provider
        nvd_vulnerabilities_number = rpm_expected_alerts_nvd
    elif mock_vulnerability_scan['format'] == 'deb':
        provider_vulnerabilities_number = deb_expected_alerts_provider
        nvd_vulnerabilities_number = deb_expected_alerts_nvd

    # Check the vulnerabilities of packages inserted
    for item in vulnerabilities_provider:
        if item['vulnerable'] == mock_vulnerability_scan["format"] or item['vulnerable'] == 'all':
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package=item['package']['name'],
                                              cve=item['cve']['cveid'])
    for item in vulnerabilities_nvd:
        if item['vulnerable'] == mock_vulnerability_scan["format"] or item['vulnerable'] == 'all':
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package=item['package']['name'],
                                              cve=item['cve']['cveid'])

    # Check that the number of provider vulnerabilities is the expected
    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event=f"A total of '{nvd_vulnerabilities_number}' vulnerabilities have been reported "
                                 "for agent '.*' thanks to the 'NVD' feed.")

    # Check that the number of NVD vulnerabilities is the expected
    vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor,
                       log_event=f"A total of '{provider_vulnerabilities_number}' vulnerabilities have been reported "
                                 "for agent '.*' thanks to the 'vendor' feed.")

    vd.check_if_modulesd_is_running()
