# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = pytest.mark.tier(level=0)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_macos_inventory.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'macos_vulnerabilities.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.REAL_NVD_FEED)}]
ids = ['macos_scan_configuration']

# Read JSON data template
macos_vulnerabilities = file.read_json_file(vulnerabilities_data_path)

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)

macos_systems = [macos_system['target'] for macos_system in macos_vulnerabilities]


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=macos_vulnerabilities, ids=macos_systems)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME,
                     os_platform=request.param['os_platform'], version=request.param['version'])

    # Insert data in sys_osinfo and sys_programs tables
    vd.insert_osinfo(agent=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], os_patch=request.param['os_patch'],
                     release=request.param['release'])

    for vulnerability in request.param['vulnerabilities']:
        vd.insert_package(**vulnerability['package'], agent=mock_agent, source=vulnerability['package']['name'])


def test_macos_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                      mock_vulnerability_scan, mock_agent):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """

    if mock_vulnerability_scan['os_name'] == "Mac OS X":
        vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package="mac_os_x",
                                          cve=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package="mac_os_x",
                                          cve=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent, package="mac_os_x", version=mock_vulnerability_scan['os_version'], cve=mock_vulnerability_scan['cve'], condition='inserted')

    else:
        vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package="mac_os_x_server",
                                          cve=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package="mac_os_x_server",
                                          cve=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent, package="mac_os_x_server", version=mock_vulnerability_scan['os_version'], cve=mock_vulnerability_scan['cve'], condition='inserted')

    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                          cve=item['cve']['cveid'])
        vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package=item['package']['name'],
                                          cve=item['cve']['cveid'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent, package=item['package']['name'], version=item['package']['version'],
                                              cve=item['cve']['cveid'], condition='inserted')

    vd.check_if_modulesd_is_running()
