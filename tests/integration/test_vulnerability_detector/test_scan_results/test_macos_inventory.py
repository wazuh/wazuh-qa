# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_macos_inventory.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', 'macos_vulnerabilities.json')
nvd_vulnerabilities_data_path = os.path.join(test_data_path, 'feeds', vd.REAL_NVD_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.REAL_NVD_FEED)}]
ids = ['macos_scan_configuration']

# Read JSON data template
macos_vulnerabilities = file.read_json_file(vulnerabilities_data_path)
nvd_vulnerabilities = file.read_json_file(nvd_vulnerabilities_data_path)

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)

macos_systems = [macos_system['target'] for macos_system in macos_vulnerabilities]


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=macos_vulnerabilities, ids=macos_systems)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME,
                     os_platform=request.param['os_platform'], version=request.param['version'])

    # Insert data in sys_osinfo and sys_programs tables
    vd.insert_osinfo(agent=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], os_patch=request.param['os_patch'],
                     release=request.param['release'])

    # For every OS, clean the previous CVE's, so avoid an alert supression by duplicated
    vd.clean_vulnerabilities_inventory(agent=mock_agent)

    for vulnerability in request.param['vulnerabilities']:
        vd.insert_package(**vulnerability['package'], agent=mock_agent, source=vulnerability['package']['name'])

    # Update sync status for both packages and hotfixes
    vd.update_sync_info(agent=mock_agent, component="syscollector-packages")
    vd.update_sync_info(agent=mock_agent, component="syscollector-hotfixes")

    # Clean the vulnerabilities inventory from the agent database
    vd.clean_vulnerabilities_inventory(agent=mock_agent)

    # Forcing a full-scan
    vd.update_last_full_scan(1, mock_agent)

@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_macos_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                      mock_vulnerability_scan, mock_agent):
    """Check if inserted vulnerable packages are reported by vulnerability detector.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset the logs file and start a new monitor.
        check_cve_db (fixture): Check if the CVE database exists and its tables are created.
        mock_vulnerability_scan (fixture): It allows to mock the vulnerability scan inserting custom packages,
                                           feeds and changing the host system.
    """
    # Check the vulnerabilities of the OS
    if mock_vulnerability_scan['os_name'] == "Mac OS X":
        vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package="mac_os_x",
                                        cve=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package="mac_os_x",
                                          cve=mock_vulnerability_scan['cve'])
        severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=nvd_vulnerabilities['CVE_Items'],
                                                                        cve_id=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                              package="mac_os_x",
                                              version=mock_vulnerability_scan['os_version'],
                                              arch=mock_vulnerability_scan['architecture'],
                                              cve=mock_vulnerability_scan['cve'],
                                              condition='inserted',
                                              severity=severity,
                                              cvss2=cvss2_score,
                                              cvss3=cvss3_score)
    else:
        vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package="mac_os_x_server",
                                        cve=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package="mac_os_x_server",
                                          cve=mock_vulnerability_scan['cve'])
        severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=nvd_vulnerabilities['CVE_Items'],
                                                                        cve_id=mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                              package="mac_os_x_server",
                                              version=mock_vulnerability_scan['os_version'],
                                              arch=mock_vulnerability_scan['architecture'],
                                              cve=mock_vulnerability_scan['cve'],
                                              condition='inserted',
                                              severity=severity,
                                              cvss2=cvss2_score,
                                              cvss3=cvss3_score)

    # Check the vulnerabilities of packages inserted
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                        cve=item['cve']['cveid'])
        vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package=item['package']['name'],
                                          cve=item['cve']['cveid'])
        severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=nvd_vulnerabilities['CVE_Items'],
                                                                        cve_id=item['cve']['cveid'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                              package=item['package']['name'],
                                              version=item['package']['version'],
                                              arch=item['package']['architecture'],
                                              cve=item['cve']['cveid'],
                                              condition='inserted',
                                              severity=severity,
                                              cvss2=cvss2_score,
                                              cvss3=cvss3_score)

    # Update the OS
    vd.insert_osinfo(agent=mock_agent,
                     os_name=mock_vulnerability_scan['os_name'],
                     os_major=mock_vulnerability_scan['os_major'],
                     os_minor=mock_vulnerability_scan['os_minor'],
                     os_patch=mock_vulnerability_scan['os_patch_fixed'],
                     release=mock_vulnerability_scan['release'])

    # Remove the vulnerable packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.delete_package(item['package']['name'], mock_agent)

    # Check the removed vulnerabilities report of the updated OS
    if mock_vulnerability_scan['os_name'] == "Mac OS X":
        vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, "mac_os_x", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor, "mac_os_x", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                              package="mac_os_x",
                                              version=mock_vulnerability_scan['os_version'],
                                              arch=item['package']['architecture'],
                                              cve=mock_vulnerability_scan['cve'],
                                              condition='removed')
    else:
        vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, "mac_os_x_server", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                  "mac_os_x_server",
                                                  mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                              package="mac_os_x_server",
                                              version=mock_vulnerability_scan['os_version'],
                                              arch=item['package']['architecture'],
                                              cve=mock_vulnerability_scan['cve'],
                                              condition='removed')

    # Check the removed vulnerabilities report of deleted packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
        vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor, item['package']['name'], item['cve']['cveid'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                              package=item['package']['name'],
                                              version=item['package']['version'],
                                              arch=item['package']['architecture'],
                                              cve=item['cve']['cveid'],
                                              condition='removed')


    # Update the OS
    vd.insert_osinfo(agent=mock_agent, os_name=mock_vulnerability_scan['os_name'], os_major=mock_vulnerability_scan['os_major'],
                     os_minor=mock_vulnerability_scan['os_minor'], os_patch=mock_vulnerability_scan['os_patch_fixed'],
                     release=mock_vulnerability_scan['release'])

    # Remove the vulnerable packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.delete_package(item['package']['name'], mock_agent)

    # Check the removed vulnerabilities report of the updated OS
    if mock_vulnerability_scan['os_name'] == "Mac OS X":
        vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, "mac_os_x", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor, "mac_os_x", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent, package="mac_os_x", version=mock_vulnerability_scan['os_version'],
                                              cve=mock_vulnerability_scan['cve'], condition='removed')
    else:
        vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, "mac_os_x_server", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor, "mac_os_x_server", mock_vulnerability_scan['cve'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent, package="mac_os_x_server", version=mock_vulnerability_scan['os_version'],
                                              cve=mock_vulnerability_scan['cve'], condition='removed')

    # Check the removed vulnerabilities report of deleted packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
        vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor, item['package']['name'], item['cve']['cveid'])
        vd.check_vulnerability_scan_inventory(agent=mock_agent, package=item['package']['name'], version=item['package']['version'],
                                              cve=item['cve']['cveid'], condition='removed')

    vd.check_if_modulesd_is_running()
