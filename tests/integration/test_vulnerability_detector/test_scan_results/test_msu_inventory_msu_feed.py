'''
brief: Module description

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    tiers:
        - 1
'''

import os
import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
custom_msu_json_path = os.path.join(test_data_path, 'custom_msu.json')
configurations_path = os.path.join(test_data_path, 'wazuh_msu_inventory.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED),
               'MSU_JSON_PATH': custom_msu_json_path}]
ids = ['msu_scan_configuration']

# read vulnerabilities
vulnerabilities = file.read_json(custom_msu_json_path)

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)

system_data = [
    {"target": "WINDOWS10", "os_name": "Microsoft Windows 10", "os_major": "10", "os_release": "1809",
     "os_minor": "0", "name": "windows", "hotfixes": ["4540670", "KB4550947"], "arch": "x64"},
    # Scenario: Two supersedences, and no original patch.
    {"target": "WINDOWS_SERVER_2016", "os_name": "Microsoft Windows Server 2016", "os_major": "10",
     "os_release": "1607",
     "os_minor": "0", "name": "windows", "hotfixes": ["4534271", "4556813"], "arch": "*"},
    # Scenario: Original patch + supersedence.
    {"target": "WINDOWS_SERVER_2019", "os_name": "Microsoft Windows Server 2019", "os_major": "10",
     "os_release": "1809", "arch": "x86",
     "os_minor": "0", "name": "windows", "hotfixes": ["4534275"]},
    # Scenario: Original patch of a recently released CVE. (only supersedence)
]

system_data_ids = [system['target'] for system in system_data]
MODULESD_PREFIX = r'.*wazuh-modulesd.*'


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """
    test_logic:
        Get configurations from the module.
    parameters:
        - request
    """
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    test_logic:
        Mocks the vulnerability scan inserting custom hotfixes, feeds and changing the host system

    parameters:
        - request:
            type: dictionary
            brief: containing the data to mock the system and the agent
        - mock_agent:
            type: callable
            brief: fixture used to mock the agent
    """
    # Modify the necessary databases. The arch follows a special format rather than the usual x64.
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME, os_arch=request.param['arch'])

    vd.insert_osinfo(agent=mock_agent, os_name=request.param['os_name'], os_release=request.param['os_release'],
                     architecture=request.param['arch'])

    for patch in request.param["hotfixes"]:
        vd.insert_hotfix(agent=mock_agent, hotfix=patch)


def is_hotfix_installed(cve_patch, dependencies, hotfixes):
    """
    test_logic:
        - Check if the given CVE's hotfix (or at least one of its supersedences) is installed.

    parameters:
        - cve_patch:
            type: str
            brief: Patch that fixes the CVE being analyzed.
        - dependencies:
            type: str
            brief: The complete list of dependencies in the MSU.
        - hotfixes:
            type: str
            brief: The patches installed in the agent.
    """

    if cve_patch in hotfixes:
        return True, cve_patch

    else:
        # Check if any of the supersedences are installed
        for base, supersedence in dependencies.items():
            if cve_patch == base:
                for super_patch in supersedence:
                    if super_patch in hotfixes:
                        return True, super_patch

        return False, cve_patch


def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db, mock_agent,
                                mock_vulnerability_scan):
    """
    test_logic:
        Check if a missing patch triggers a vulnerability(only windows).
    """
    hotfixes = mock_vulnerability_scan['hotfixes']
    dep = vulnerabilities['dependencies']

    for cve, item in vulnerabilities['vulnerabilities'].items():
        installed, hotfix = is_hotfix_installed(item[0]['patch'], dep, hotfixes)
        if installed:
            wazuh_log_monitor.start(
                timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                update_position=False,
                callback=vd.make_vuln_callback(
                    f"Agent '{mock_agent}' has installed '{hotfix}' that corrects the vulnerability '{cve}'"
                ),
                error_message=f"Could not find the report which says that the patch {hotfix} solves {cve}"
            )
        else:
            wazuh_log_monitor.start(
                timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                update_position=False,
                callback=vd.make_vuln_callback(
                    f"Agent '{mock_agent}' is vulnerable to '{cve}'. Condition: 'KB{hotfix} patch is not installed'"
                ),
                error_message=f"Could not find the report which says that the system" +
                              f" is vulnerable to {cve} due to missing {hotfix}"
            )

    vd.check_if_modulesd_is_running()
