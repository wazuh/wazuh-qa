# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file
from wazuh_testing import vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=0)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_suse_inventory.yaml')
suse_vulnerabilities_data_path = os.path.join(test_data_path, 'suse_vulnerabilities.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.REAL_NVD_FEED)}]
ids = ['suse_scan_configuration']

# Read JSON data template
suse_vulnerabilities = file.read_json_file(suse_vulnerabilities_data_path)

suse_data_ids = [system['target'] for system in suse_vulnerabilities]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=suse_vulnerabilities, ids=suse_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    # Add custom vulnerabilities and feeds
    id=1
    
    for vulnerability in request.param['vulnerabilities']:
        for package in vulnerability['package']:
            vd.insert_package(**package, agent=mock_agent, source=package['name'])
            vd.insert_vulnerability(**vulnerability['cve'], package=package['name'],
                                    target=request.param['target'], deps_id=id)
            for dep in vulnerability['dependency']:
                vd.insert_pkg_dep(id=dep['test_ref'], target=request.param['target'], package_id=id)
            id+=1
        for dependency in vulnerability['dependency']:
                vd.insert_dependency(id=dependency['test_ref'], name=dependency['name'], operation=dependency['operation'], 
                                     operation_value=dependency['operation_value'], target=request.param['target'], installed=dependency['installed'])


def test_suse_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                       mock_vulnerability_scan):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """
    vulnerabilities_number = len(mock_vulnerability_scan['vulnerabilities'])

    # Check that the number of OVAL vulnerabilities is the expected
    vd.check_detected_vulnerabilities_number(wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=vulnerabilities_number,
                                             feed_source='OVAL', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Check the vulnerabilities of packages inserted
    for item in mock_vulnerability_scan['vulnerabilities']:
        for packg in item['package']:
            vulnerable = False
            for deps in item['dependency']:
                if '1' in deps['installed']:
                    vulnerable = True
                    break
            if not vulnerable:
                log_event = f"Package '{packg['name']}' not vulnerable to '{item['cve']['cveid']}'."
                vd.check_log_event(wazuh_log_monitor=wazuh_log_monitor, log_event=log_event)
            else:
                vd.check_vulnerability_scan_event(wazuh_log_monitor=wazuh_log_monitor, package=packg['name'],
                                                cve=item['cve']['cveid'])
    vd.check_if_modulesd_is_running()
