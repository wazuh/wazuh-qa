# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from datetime import timedelta
from shutil import copy

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools import file
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_nvd_configuration.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', vd.VULNERABILITIES)
custom_cpe_helper_data_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_CPE_HELPER)
custom_msu_data_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_MSU)
custom_nvd_vulnerabilities_data_path = os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

SCAN_TIMEOUT = 40

copy(custom_cpe_helper_data_path, vd.CPE_HELPER_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED),
               'MSU_JSON_PATH': custom_msu_data_path}]
ids = ['scan_nvd_configuration']

# Read JSON data template
nvd_vulnerabilities = file.read_json_file(vulnerabilities_data_path)
custom_nvd_vulnerabilities = file.read_json_file(custom_nvd_vulnerabilities_data_path)

systems = ['WINDOWS10', 'MAC0', 'MAC', 'MACS', 'ARCH', 'ALAS', 'ALAS2', 'RHEL8', 'RHEL7', 'RHEL6', 'RHEL5',
           'BIONIC', 'XENIAL', 'TRUSTY', 'BUSTER', 'STRETCH']
system_data = []

for system in systems:
    if system == 'MAC0':
        system_data.append(vd.SYSTEM_DATA['MAC'])
        system_data[-1].update({"version": 'Wazuh v4.0'})
    else:
        system_data.append(vd.SYSTEM_DATA[system])
        system_data[-1].update({"version": 'Wazuh v4.1'})

system_data_ids = [system['target'] for system in system_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """
    Get configurations from the module.
    """
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME,
                     os_platform=request.param['os_platform'], version=request.param['version'])

    vd.insert_osinfo(agent=mock_agent, scan_id=0, hostname=vd.MOCKED_AGENT_NAME, os_name=request.param['os_name'],
                     os_major=request.param['os_major'], os_minor=request.param['os_minor'])

    # Insert a vulnerability in table VULNERABILITIES
    vd.insert_vulnerability(cveid='CWE-000', operation='less than', operation_value='1.0.0',
                            package='test', target=request.param['target'])

    # Add custom vulnerabilities and feeds
    for vulnerability in nvd_vulnerabilities['vulnerabilities_nvd']:
        vd.insert_package(**vulnerability['package'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent=mock_agent)

    # Update sync status for both packages and hotfixes
    vd.update_sync_info(agent=mock_agent, component="syscollector-packages")
    vd.update_sync_info(agent=mock_agent, component="syscollector-hotfixes")

    # Clean the vulnerabilities inventory from the agent database
    vd.clean_vulnerabilities_inventory(agent=mock_agent)

    # Forcing a full-scan
    vd.update_last_full_scan(1, mock_agent)


#@pytest.mark.skip(reason="It will be blocked by #1602, when it was solve we can enable again this test")
def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                mock_vulnerability_scan, mock_agent):
    """Check if inserted vulnerable packages are reported by vulnerability detector.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset the logs file and start a new monitor.
        check_cve_db (fixture): Check if the CVE database exists and its tables are created.
        mock_vulnerability_scan (fixture): It allows to mock the vulnerability scan inserting custom packages,
                                           feeds and changing the host system.
    """
    vulnerabilities_number = len(nvd_vulnerabilities['vulnerabilities_nvd'])

    if mock_vulnerability_scan['format'] == 'pkg' and mock_vulnerability_scan['version'] == 'Wazuh v4.0':
        version = mock_vulnerability_scan['version']
        wazuh_log_monitor.start(
            timeout=SCAN_TIMEOUT,
            update_position=False,
            callback=vd.make_vuln_callback(fr"Agent .* has an unsupported Wazuh version: '{version}'"),
            error_message="The expected event 'Agent .* has an unsupported Wazuh version' not found"
        )

        return

    # Check vulnerabilities report of inserted packages
    try:
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor,
                                            package=item['package']['name'],
                                            cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                              package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=custom_nvd_vulnerabilities['CVE_Items'],
                                                                            cve_id=item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='inserted',
                                                  severity=severity,
                                                  cvss2=cvss2_score,
                                                  cvss3=cvss3_score)
    except TimeoutError:
        check_time_travel(time_travel=True, interval=timedelta(seconds=300))
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor,
                                            package=item['package']['name'],
                                            cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                              package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            severity, cvss2_score, cvss3_score = vd.find_cve_severity_score(cve_array=custom_nvd_vulnerabilities['CVE_Items'],
                                                                            cve_id=item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='inserted',
                                                  severity=severity,
                                                  cvss2=cvss2_score,
                                                  cvss3=cvss3_score)

    # Check that the number of NVD vulnerabilities is the expected
    if mock_vulnerability_scan["format"] != "win":
        vd.check_detected_vulnerabilities_number(wazuh_log_monitor=wazuh_log_monitor,
                                                 expected_vulnerabilities_number=vulnerabilities_number,
                                                 feed_source='NVD', timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT)
    # Remove the vulnerable packages
    for item in nvd_vulnerabilities['vulnerabilities_nvd']:
        vd.delete_package(item['package']['name'], mock_agent)

    # Check the removed vulnerabilities report of deleted packages
    try:
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            vd.check_vulnerability_scan_remove_log(wazuh_log_monitor,
                                                   item['package']['name'],
                                                   item['cve']['cveid'])
            vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                      item['package']['name'],
                                                      item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='removed')
    except TimeoutError:
        check_time_travel(time_travel=True, interval=timedelta(seconds=300))
        for item in nvd_vulnerabilities['vulnerabilities_nvd']:
            vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
            vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                      item['package']['name'],
                                                      item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=item['cve']['cveid'],
                                                  condition='removed')

    vd.check_if_modulesd_is_running()
