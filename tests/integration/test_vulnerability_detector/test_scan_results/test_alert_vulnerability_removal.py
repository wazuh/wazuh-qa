# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import os
import time

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import ALERT_FILE_PATH, LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=0)]

local_internal_options = {
    'wazuh_modules.debug': 2,
    'monitord.rotate_log': 0
}

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
test_feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
configurations_path = os.path.join(test_data_path, 'wazuh_alert_vulnerability_removal.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)
test_packet_vendor = 'WazuhIntegrationTests'
test_packet_version = '1.0.0'
test_packet_version_not_vulnerable = '2.1.0'
test_packet_0_name = 'wazuhintegrationpackage-0'
test_packet_1_name = 'wazuhintegrationpackage-1'
test_packet_0_cve = 'CVE-000'
test_packet_1_cve = 'CVE-001'

# Offline feeds
buster_oval_feed_path = os.path.join(test_feed_path, vd.CUSTOM_DEBIAN_OVAL_FEED)
debian_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_DEBIAN_JSON_FEED)
nvd_json_feed_path = os.path.join(test_feed_path, vd.CUSTOM_NVD_FEED)
parameters = [{
    'BUSTER_FEED_PATH': buster_oval_feed_path,
    'DEBIAN_JSON_FEED_PATH': debian_json_feed_path,
    'NVD_JSON_FEED_PATH': nvd_json_feed_path
}]
metadata = parameters

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope="module")
def get_local_internal_options():
    """Get configurations from the module."""
    return local_internal_options


@pytest.fixture(scope="function")
def add_simulated_agent(get_configuration):
    """Add a simulated agent to the system with basic functionality.

    For this purpose, it adds a dummy agent, inserts in its database (sys_programs table) two test packages,
    and configures its database to appear to be up to date (sync_info table)."""
    agent_id, sender, injector = vd.create_simulated_agent()
    vd.insert_package(agent=agent_id, name=test_packet_0_name, vendor=test_packet_vendor,
                      version=test_packet_version, source='NULL')
    vd.insert_package(agent=agent_id, name=test_packet_1_name, vendor=test_packet_vendor,
                      version=test_packet_version, source='NULL')
    vd.update_sync_info(agent=agent_id)
    yield agent_id
    injector.stop_receive()
    vd.delete_simulated_agent(agent_id)


def test_alert_vulnerability_removal(configure_local_internal_options, get_configuration, configure_environment,
                                     restart_modulesd, add_simulated_agent):
    """Check if the Vulnerability Detector module generates an alert when a vulnerability is removed from the inventory.

    For this purpose, the manager is configured to use custom feeds that include vulnerabilities associated
    with two test packages. Those packages are added to the database of the simulated agent and, after enrollment
    of the agent, the vulnerability detector must launch the first scan on it, which is of BASELINE type.

    When the BASELINE scan is done, it will check that the vulnerabilities are added to the vuln_cves table.
    This will be verified by checking the log file. After this, one of the test packages will be removed
    and the other will be upgraded to a non-vulnerable version. These situations should generate alerts.

    Finally, it waits for the next scan, which should be of PARTIAL_SCAN type and, after it is finished,
    the alerts that should have been generated after the removal of the vulnerabilities are searched for.

    Args:
        configure_local_internal_options (fixture): Set internal configuration for testing.
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset ossec.log and start a new monitor.
        add_simulated_agent (fixture): Add a simulated agent to the manager for testing.
    """
    check_apply_test({'alert_vulnerability_removal'}, get_configuration['tags'])
    agent_id = add_simulated_agent

    # Set LAST_UPDATE to the current time on NVD_METADATA of CVEs DB to simulate the feeds update.
    vd.modify_nvd_metadata_vuldet(int(time.time()))

    # Callbacks
    callback_detect_baseline_scan_start = vd.make_vuln_callback(f"A baseline scan will be run on agent '{agent_id}'")
    callback_detect_partial_scan_start = vd.make_vuln_callback(f"A partial scan will be run on agent '{agent_id}'")
    callback_detect_scan_end = vd.make_vuln_callback(f"Finished vulnerability assessment for agent '{agent_id}'")
    callback_detect_test_package_0_alert = vd.make_vuln_callback(
        pattern=f"{test_packet_0_cve} affecting {test_packet_0_name} was eliminated", prefix='.*')
    callback_detect_test_package_1_alert = vd.make_vuln_callback(
        pattern=f"{test_packet_1_cve} affecting {test_packet_1_name} was eliminated", prefix='.*')

    # Detect the baseline scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_baseline_scan_start,
                            error_message='No baseline scan start has been detected in the log.')

    # Check if the NVD vulnerabilities are detected.
    vd.check_detected_vulnerabilities_number(agent=agent_id,
                                             wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=2,
                                             feed_source='NVD', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Detect baseline scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No baseline scan end has been detected in the log.')

    # Delete test package 0.
    vd.delete_package(agent=agent_id, package=test_packet_0_name)

    # Update test package 1 to a non-vulnerable version.
    vd.update_package(agent=agent_id, package=test_packet_1_name, version=test_packet_version_not_vulnerable)

    # Detect a partial scan.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_partial_scan_start,
                            error_message='No partial scan start has been detected in the log.')

    # Detect a partial scan completion.
    wazuh_log_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                            callback=callback_detect_scan_end,
                            error_message='No partial scan end has been detected in the log.')

    # Ensure the removal of test package 0 has generated an alert.
    wazuh_alert_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT, update_position=False,
                              callback=callback_detect_test_package_0_alert,
                              error_message='No alert for test package 0 has been detected in the log.')

    # Ensure the test package update 1 has generated an alert.
    wazuh_alert_monitor.start(timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT,
                              callback=callback_detect_test_package_1_alert,
                              error_message='No alert for test package 1 has been detected in the log.')
