'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: Wazuh is able to detect vulnerabilities in the applications installed in agents using the Vulnerability Detector
       module. This software audit is performed through the integration of vulnerability feeds indexed by Redhat,
       Canonical, Debian, Amazon Linux and NVD Database.

components:
    - vulnerability_detector

suite: scan_results

targets:
    - manager

daemons:
    - wazuh-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Jammy
    - Suse Enterprise Linux Server 15
    - Suse Enterprise Linux Server 12
    - Suse Enterprise Linux Server 11
    - Suse Enterprise Linux Desktop 15
    - Suse Enterprise Linux Desktop 12
    - Suse Enterprise Linux Desktop 11

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - scan_results
'''
import os
import pytest

from wazuh_testing.tools.configuration import get_test_cases_data
from wazuh_testing.tools.file import read_yaml
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_scan_provider_vulnerabilities.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_scan_provider_vulnerabilities.yaml')

# Test configurations
configurations = read_yaml(configurations_path)
metadata = [item['metadata'] for item in read_yaml(cases_path)]
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = vd.update_feed_path_configurations(configurations, metadata, TEST_FEEDS_PATH)
systems = [metadata['system'] for metadata in configuration_metadata]


@pytest.mark.tier(level=1)
@pytest.mark.parametrize('configuration, metadata, agent_system', zip(configurations, configuration_metadata, systems),
                         ids=case_ids)
def test_scan_provider_vulnerabilities(configuration, metadata, agent_system, set_wazuh_configuration_vdt,
                                       truncate_monitored_files, clean_cve_tables_func,
                                       prepare_full_scan_with_vuln_packages_and_custom_system,
                                       restart_modulesd_function):
    '''
    description: Check if the vulnerability alerts are reported making vulnerabilities found only by OVAL and not NVD.

    test_phases:
        - Set a custom Wazuh configuration.
        - Mock an agent with custom system and vulnerable packages (only are vulnerables by OVAL feed)
        - Force a full scan.
        - Restart wazuh-modulesd.
        - Check that the vulnerabilities have been detected for all packages using only OVAL source. (0 for NVD)
        - Check that vulnerability alerts have been generated for all packages.

    wazuh_min_version: 4.4.0

    tier: 1

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - agent_system:
            type: str
            brief: System to set to the mocked agent.
        - set_wazuh_configuration_vdt:
            type: fixture
            brief: Set wazuh configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - prepare_full_scan_with_vuln_packages_and_custom_system:
            type: fixture
            brief: Setup the initial test state.
        - restart_modulesd_function:
            type: fixture
            brief: Restart wazuh-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Verify that the log vulnerability report appears in ossec.log for each vulnerable package.
        - Verify that the alert vulnerability report appears in alerts.json for each vulnerable package.

    input_description:
        - The `scan_nvd_vulnerabilities.yaml` file provides the module configuration for this test.
        - The `cases_scan_nvd_vulnerabilities.yaml` file provides the test cases.

    expected_output:
        - f"The '{package}' package .* from agent '{agent_id}' is vulnerable to '{cve}'"
        - f".*"agent":."id":"{agent_id}".*{cve} affects {package}"
    '''
    if agent_system == 'JAMMY':
        pytest.skip('OVAL does not have any vulnerability yet, it is not possible to scan the Ubuntu 22 agent.')

    agent_id = prepare_full_scan_with_vuln_packages_and_custom_system

    # Check potential vulnerabilities using the OVAL feed
    evm.check_oval_detect_potential_vulnerabilities(vulnerabilities_number=5, agent_id=agent_id)

    # Check potential vulnerabilities using the NVD feed
    evm.check_nvd_detect_potential_vulnerabilities(vulnerabilities_number=0, agent_id=agent_id)

    # Check reported vulnerabilities in log using the OVAL feed
    evm.check_oval_report_vulnerabilities(vulnerabilities_number=5, agent_id=agent_id)

    # Check reported vulnerabilities in log using the NVD feed
    evm.check_nvd_report_vulnerabilities(vulnerabilities_number=0, agent_id=agent_id)

    # Check the vulnerabilities alerts
    for package in vd.VULNERABLE_PACKAGES:
        evm.check_vulnerability_affects_alert(agent_id=agent_id, package=package['name'], cve=package['cveid'])
