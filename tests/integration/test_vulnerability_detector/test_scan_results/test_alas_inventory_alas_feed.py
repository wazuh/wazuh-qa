# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os

import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import file, LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor

# Marks
pytestmark = [pytest.mark.server, pytest.mark.tier(level=1)]

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
custom_alas_json_path = os.path.join(test_data_path, 'feeds', 'custom_alas_feed.json')
custom_alas2_json_path = os.path.join(test_data_path, 'feeds', 'custom_alas2_feed.json')
alas_vulnerabilities_data_path = os.path.join(test_data_path, 'vulnerabilities', 'alas_vulnerabilities.json')
configurations_path = os.path.join(test_data_path, 'configuration', 'wazuh_alas_inventory.yaml')
wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

# Set configuration
parameters = [
    {'ALAS_CUSTOM_FEED': custom_alas_json_path, 'ALAS2_CUSTOM_FEED': custom_alas2_json_path,
     'NVD_JSON_PATH': os.path.join(test_data_path, 'feeds', vd.CUSTOM_NVD_FEED)}]

# read vulnerabilities
vulnerabilities = file.read_json(alas_vulnerabilities_data_path)

ids = [vulnerability['name'] for vulnerability in vulnerabilities]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)
local_internal_options = {'wazuh_modules.debug': '2'}

# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=['alas_feed'])
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=vulnerabilities, ids=ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    os_name = request.param['os_name']
    os_version = request.param['os_version']
    os_major = request.param['os_major']
    os_minor = request.param['os_minor']

    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=os_name, os_version=os_version, os_major=os_major,
                     os_minor=os_minor, name=vd.MOCKED_AGENT_NAME)

    vd.insert_osinfo(agent=mock_agent, scan_id=0, hostname=vd.MOCKED_AGENT_NAME, os_name=os_name,
                     os_major=os_major, os_minor=os_minor)

    # Add custom vulnerabilities and feeds
    for vulnerability in request.param['vulnerabilities']:
        vd.insert_package(**vulnerability['package'], agent=mock_agent, source=vulnerability['package']['name'],
                          vendor=f"{vd.VENDOR[request.param['target']]}")

    # Update sync status for both packages and hotfixes
    vd.update_sync_info(agent=mock_agent, component="syscollector-packages")
    vd.update_sync_info(agent=mock_agent, component="syscollector-hotfixes")

    # Clean the vulnerabilities inventory from the agent database
    vd.clean_vulnerabilities_inventory(agent=mock_agent)

    # Forcing a full-scan
    vd.update_last_full_scan(1, mock_agent)


def test_amazon_linux_vulnerabilities_report(configure_local_internal_options_module, get_configuration,
                                             configure_environment, restart_modulesd, check_cve_db,
                                             mock_vulnerability_scan, file_monitoring, mock_agent):
    """Check if inserted vulnerable packages are reported by vulnerability detector.

    Args:
        get_configuration (fixture): Get configurations from the module.
        configure_environment (fixture): Configure a custom environment for testing.
        restart_modulesd (fixture): Reset the logs file and start a new monitor.
        check_cve_db (fixture): Check if the CVE database exists and its tables are created.
        mock_vulnerability_scan (fixture): It allows to mock the vulnerability scan inserting custom packages,
                                           feeds and changing the host system.
    """
    vulnerabilities_number = 0
    for item in mock_vulnerability_scan['vulnerabilities']:
        vulnerabilities_number += len(item['cve']['cveid'])

    # Check that the number of OVAL vulnerabilities is the expected
    vd.check_detected_vulnerabilities_number(wazuh_log_monitor=log_monitor,
                                             expected_vulnerabilities_number=vulnerabilities_number,
                                             feed_source='OVAL', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Check the vulnerabilities of packages inserted
    for item in mock_vulnerability_scan['vulnerabilities']:
        for cve_id in item['cve']['cveid']:
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor,
                                            package=item['package']['name'],
                                            cve=cve_id)
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor,
                                              package=item['package']['name'],
                                              cve=cve_id)
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=cve_id,
                                                  condition='inserted')

    # Remove the vulnerable packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.delete_package(item['package']['name'], mock_agent)

    # Check the removed vulnerabilities report of deleted packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        for cve_id in item['cve']['cveid']:
            vd.check_vulnerability_scan_remove_log(wazuh_log_monitor,
                                                   package=item['package']['name'],
                                                   cve=cve_id)
            vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor,
                                                      package=item['package']['name'],
                                                      cve=cve_id)
            vd.check_vulnerability_scan_inventory(agent=mock_agent,
                                                  package=item['package']['name'],
                                                  version=item['package']['version'],
                                                  arch=item['package']['architecture'],
                                                  cve=cve_id,
                                                  condition='removed')

    vd.check_if_modulesd_is_running()
