'''
brief: These tests will mock RedHat systems and insert custom vulnerabilities and vulnerable packages to check
       if Vulnerability Detector generates the alerts from the RedHat provider feed.

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    operating_system:
        - RedHat
    tiers:
        - 0
    tags:
        - NVD
'''

import os
import pytest

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file
from wazuh_testing import vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=0)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_redhat_inventory.yaml')
redhat_vulnerabilities_data_path = os.path.join(test_data_path, 'redhat_vulnerabilities.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.REAL_NVD_FEED)}]
ids = ['redhat_scan_configuration']

# Read JSON data template
redhat_vulnerabilities = file.read_json_file(redhat_vulnerabilities_data_path)

redhat_data_ids = [system['target'] for system in redhat_vulnerabilities]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """
    test_logic:
        Get configurations from the module.
    parameters:
        - request
    """
    return request.param


@pytest.fixture(scope='module', params=redhat_vulnerabilities, ids=redhat_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    test_logic:
    Mocks the vulnerability scan inserting custom hotfixes, feeds and changing the host system

    parameters:
        - request:
            type: dictionary
            brief: containing the data to mock the system and the agent
        - mock_agent:
            type: callable
            brief: fixture used to mock the agent
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    # Add custom vulnerabilities and feeds
    for vulnerability in request.param['vulnerabilities']:
        vd.insert_package(**vulnerability['package'], agent=mock_agent, source=vulnerability['package']['name'])
        vd.insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=request.param['target'])


def test_redhat_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                       mock_vulnerability_scan):
    """
    test_logic:
        Check if inserted vulnerable packages are reported by vulnerability detector
    parameters:
        - mock_vulnerability_scan:
            type: dict
            brief: vulnerability scan mock
    checks:
        - A report of the corresponding vulnerabilities is generated in the `ossec.log`.
    """
    vulnerabilities_number = len(mock_vulnerability_scan['vulnerabilities'])

    # Check that the number of OVAL vulnerabilities is the expected
    vd.check_detected_vulnerabilities_number(wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=vulnerabilities_number,
                                             feed_source='OVAL', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Check the vulnerabilities of packages inserted
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.check_vulnerability_scan_event(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                          cve=item['cve']['cveid'])
    vd.check_if_modulesd_is_running()
