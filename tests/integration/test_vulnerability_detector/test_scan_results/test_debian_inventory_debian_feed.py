# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import re
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file
from wazuh_testing import vulnerability_detector as vd

# Marks
pytestmark = pytest.mark.tier(level=0)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_debian_inventory.yaml')
debian_vulnerabilities_data_path = os.path.join(test_data_path, 'debian_vulnerabilities.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
wazuh_alert_monitor = FileMonitor(ALERT_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.REAL_NVD_FEED)}]
ids = ['debian_scan_configuration']

# Read JSON data template
debian_vulnerabilities = file.read_json_file(debian_vulnerabilities_data_path)

debian_data_ids = [system['target'] for system in debian_vulnerabilities]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=debian_vulnerabilities, ids=debian_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    vd.insert_osinfo(agent=mock_agent, scan_id = 0, hostname=vd.MOCKED_AGENT_NAME, os_name=request.param['os_name'],
                     os_major=request.param['os_major'],os_minor=request.param['os_minor'])

    # Add custom vulnerabilities and feeds
    for vulnerability in request.param['vulnerabilities']:
        vd.insert_package(**vulnerability['package'], agent=mock_agent, source=vulnerability['package']['name'])
        vd.insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=request.param['target'])

    # Update sync status for both packages and hotfixes
    vd.update_sync_info(agent=mock_agent, component="syscollector-packages")
    vd.update_sync_info(agent=mock_agent, component="syscollector-hotfixes")

    # Clean the vulnerabilities inventory from the agent database
    vd.clean_vulnerabilities_inventory(agent=mock_agent)

    # Forcing a full-scan
    vd.update_last_full_scan(1,mock_agent)


def test_debian_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                       mock_vulnerability_scan, mock_agent):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """

    # Kernel packages with pattern are discarded by vulnerability detector
    pattern = 'linux-image-(.*)'
    vulnerabilities = mock_vulnerability_scan['vulnerabilities']
    vulnerabilities_number = len([vulnerability for vulnerability in vulnerabilities if re.search(pattern, vulnerability['package']['name']) is None])

    # Check that the number of OVAL vulnerabilities is the expected
    vd.check_detected_vulnerabilities_number(wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=vulnerabilities_number,
                                             feed_source='OVAL', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Check the vulnerabilities of packages inserted and kernel packages discarded
    for item in vulnerabilities:
        exist = re.search(pattern, item['package']['name'])
        if not exist:
            vd.check_vulnerability_scan_log(wazuh_log_monitor=wazuh_log_monitor, package=item['package']['name'],
                                            cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_alert(wazuh_alert_monitor=wazuh_alert_monitor, package=item['package']['name'],
                                              cve=item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent, package=item['package']['name'], version=item['package']['version'],
                                                  cve=item['cve']['cveid'], condition='inserted')
        else:
            kernel_pkg = exist.group(1)
            vd.check_vulnerability_scan_discarded(wazuh_log_monitor=wazuh_log_monitor, package=kernel_pkg)
    
    # Remove the vulnerable packages
    for item in mock_vulnerability_scan['vulnerabilities']:
        vd.delete_package(item['package']['name'], mock_agent)

    # Check the removed vulnerabilities report of deleted packages
    for item in mock_vulnerability_scan['vulnerabilities']:
            vd.check_vulnerability_scan_remove_log(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
            vd.check_vulnerability_scan_remove_alerts(wazuh_alert_monitor, item['package']['name'], item['cve']['cveid'])
            vd.check_vulnerability_scan_inventory(agent=mock_agent, package=item['package']['name'], version=item['package']['version'],
                                                  cve=item['cve']['cveid'], condition='removed')

    vd.check_if_modulesd_is_running()
