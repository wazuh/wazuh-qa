'''
brief: These tests will mock RedHat, Canonical, and Debian, and insert custom vulnerabilities
       and vulnerable packages to check if Vulnerability Detector generates the vulnerability
       alerts from NVD and providers feed.

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    operating_system:
        - RedHat
        - Debian
        - Ubuntu
    tiers:
        - 0
    tags:
        - NVD
        - Feeds
'''

import os
from datetime import timedelta

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.fim import check_time_travel
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = pytest.mark.tier(level=0)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_provider_and_nvd_configuration.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, vd.VULNERABILITIES)

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
SCAN_TIMEOUT = 40

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED)}]
ids = ['scan_nvd_configuration']

# Read JSON data template
vulnerabilities = file.read_json_file(vulnerabilities_data_path)

system_data = [
    {"target": "RHEL8", "os_name": "CentOS Linux", "os_major": "8", "os_minor": "1", "name": "centos8",
     "format": "rpm", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "RHEL7", "os_name": "CentOS Linux", "os_major": "7", "os_minor": "8", "name": "centos7",
     "format": "rpm", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "RHEL6", "os_name": "CentOS Linux", "os_major": "6", "os_minor": "10", "name": "centos6",
     "format": "rpm", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "RHEL5", "os_name": "CentOS Linux", "os_major": "5", "os_minor": "11", "name": "centos5",
     "format": "rpm", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "BIONIC", "os_name": "Ubuntu", "os_major": "18", "os_minor": "04", "name": "Ubuntu-bionic",
     "format": "deb", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "XENIAL", "os_name": "Ubuntu", "os_major": "16", "os_minor": "04", "name": "Ubuntu-xenial",
     "format": "deb", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "TRUSTY", "os_name": "Ubuntu", "os_major": "14", "os_minor": "04", "name": "Ubuntu-trusty",
     "format": "deb", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "BUSTER", "os_name": "Debian GNU/Linux", "os_major": "10", "os_minor": "", "name": "debian10",
     "format": "deb", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])},
    {"target": "STRETCH", "os_name": "Debian GNU/Linux", "os_major": "9", "os_minor": "", "name": "debian9",
     "format": "deb", "nvd_vulnerabilities_number": len(vulnerabilities['vulnerabilities_nvd']),
     "provider_vulnerabilities_number": len(vulnerabilities['vulnerabilities_provider'])}
]

system_data_ids = [system['target'] for system in system_data]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """
    test_logic:
        Get configurations from the module.
    parameters:
        - request
    """
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    test_logic:
    Mocks the vulnerability scan inserting custom hotfixes, feeds and changing the host system

    parameters:
        - request:
            type: dictionary
            brief: containing the data to mock the system and the agent
        - mock_agent:
            type: callable
            brief: fixture used to mock the agent
    checks:
        - As many NVD and provider alerts are generated as there are vulnerabilities.
        - There is 0 NVD vulnerability alerts for Red Hat provider.
        - The expected number of reported alerts is generated by NVD and provider.
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=vd.MOCKED_AGENT_NAME)

    # Insert half vulnerabilities for provider feed
    for vulnerability in vulnerabilities['vulnerabilities_provider']:
        vd.insert_vulnerability(**vulnerability['cve'], package=vulnerability['package']['name'],
                                target=request.param['target'])

    # Insert vulnerable packages
    for vulnerability in (vulnerabilities['vulnerabilities_nvd'] + vulnerabilities['vulnerabilities_provider']):
        vd.insert_package(**vulnerability['package'], source=vulnerability['package']['name'],
                          format=request.param['format'], agent=mock_agent)


def test_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                mock_vulnerability_scan):
    """
    test_logic:
        Check if inserted vulnerable packages are reported by vulnerability detector
    parameters:
        - mock_vulnerability_scan:
            type: dict
            brief: vulnerability scan mock
    """
    provider_vulnerabilities_number = mock_vulnerability_scan["provider_vulnerabilities_number"]
    nvd_vulnerabilities_number = mock_vulnerability_scan["nvd_vulnerabilities_number"]

    # Check the vulnerabilities of packages inserted
    try:
        for item in vulnerabilities['vulnerabilities_provider']:
            vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
    except TimeoutError:
        check_time_travel(time_travel=True, interval=timedelta(seconds=300))
        for item in vulnerabilities['vulnerabilities_provider']:
            vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])

    if mock_vulnerability_scan["format"] != "rpm":
        try:
            for item in vulnerabilities['vulnerabilities_nvd']:
                vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])
        except TimeoutError:
            check_time_travel(time_travel=True, interval=timedelta(seconds=300))
            for item in vulnerabilities['vulnerabilities_nvd']:
                vd.check_vulnerability_scan_event(wazuh_log_monitor, item['package']['name'], item['cve']['cveid'])

    # Check that the number of provider vulnerabilities is the expected
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            f"A total of '{provider_vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
            "thanks to the 'vendor' feed."
        ),
        error_message=f"The expected number of vulnerabilities for vendor have not been found",
    )

    # Check that the number of NVD vulnerabilities is the expected
    wazuh_log_monitor.start(
        timeout=SCAN_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            f"A total of '{nvd_vulnerabilities_number}' vulnerabilities have been reported for agent '.*' " +
            "thanks to the 'NVD' feed."
        ),
        error_message=f"The expected number of vulnerabilities for NVD have not been found",
    )

    vd.check_if_modulesd_is_running()
