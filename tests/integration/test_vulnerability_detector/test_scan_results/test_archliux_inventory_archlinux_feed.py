'''
brief: Desc

copyright:
    Copyright (C) 2015-2021, Wazuh Inc.

    Created by Wazuh, Inc. <info@wazuh.com>.

    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

metadata:
    modules:
        - Vulnerability detector
    daemons:
        - wazuh-modulesd
    operating_system:
        - Arch linux
    wazuh_max_version: 4.0.0
    wazuh_min_version: 4.1.5
    tiers:
        - 1
    tags:
        - NVD
        - Feeds
'''
import os
import pytest

import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools import file

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
custom_arch_json_path = os.path.join(test_data_path, 'custom_archlinux_feed.json')
configurations_path = os.path.join(test_data_path, 'wazuh_archlinux_inventory.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'ARCH_CUSTOM_FEED': custom_arch_json_path, 'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED)}]


# read vulnerabilities
vulnerabilities = file.read_json(custom_arch_json_path)

ids = [ vulnerability['name'] for vulnerability in vulnerabilities ]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters)

# Agent data

os_name = 'Arch Linux'
os_major = ''
os_minor = ''


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=['arch_feed'])
def get_configuration(request):
    """
    test_logic:
        Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=vulnerabilities, ids=ids)
@vd.mock_cve_db
def mock_vulnerability_scan(request, mock_agent):
    """
    test_logic:
    Mocks the vulnerability scan inserting custom hotfixes, feeds and changing the host system

    parameters:
        - request: 
            type: dictionary
            brief: containing the data to mock the system and the agent
        - mock_agent:
            type: callable
            brief: fixture used to mock the agent
    """
    # Mock system
    vd.modify_system(agent_id=mock_agent, os_name=os_name, os_major=os_major,
                     os_minor=os_minor, name=vd.MOCKED_AGENT_NAME)

    vulnerability = request.param

    for package in vulnerability['packages']:
        vd.insert_package(agent=mock_agent, source='', name=package, version=vulnerability['affected'])

def test_arch_linux_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd, check_cve_db,
                                           mock_vulnerability_scan):
    """
    test_logic:
        Check if inserted vulnerable packages are reported by vulnerability detector
    """
    vulnerabilities_number = len(mock_vulnerability_scan['issues'])

    # Check that the number of OVAL vulnerabilities is the expected
    vd.check_detected_vulnerabilities_number(wazuh_log_monitor=wazuh_log_monitor,
                                             expected_vulnerabilities_number=vulnerabilities_number,
                                             feed_source='OVAL', timeout=vd.VULN_DETECTOR_SCAN_TIMEOUT)

    # Check the vulnerabilities of packages inserted
    for package in mock_vulnerability_scan['packages']:
        for issue in mock_vulnerability_scan['issues']:
            vd.check_vulnerability_scan_event(wazuh_log_monitor=wazuh_log_monitor, package=package, cve=issue)
    vd.check_if_modulesd_is_running()
