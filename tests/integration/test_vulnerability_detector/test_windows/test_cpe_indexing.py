# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from time import sleep

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'cpe_indexing.yaml')
custom_msu_json_path = os.path.join(test_data_path, 'custom_msu.json')

# Set configuration
local_internal_options = {'wazuh_modules.debug': '2'}
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED),
               'MSU_JSON_PATH': custom_msu_json_path}]
metadata = [{'nvd_json_path': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED)}]
ids = ['cpe_index_configuration']

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)

common_system_data = {'name': 'windows', 'os_major': '10', 'os_minor': '0', 'os_release': '1000'}
# Architecture with associate name extension
architecture_name_extension = {'x86_64': '', 'x86' : '_I386'}
system_data = []
target_name_index_system_data = [
    {'target': 'WINDOWS_SERVER_2013', 'os_name': "Microsoft Windows Server 2003", 'index_name': 'windows_server_2003'},
    {'target': 'WINDOWS_SERVER_2013_R2', 'os_name': "Microsoft Windows Server 2003 R2", 'index_name': 'windows_server_2003'},
    {'target': 'WINDOWS_XP', 'os_name': "Microsoft Windows XP", 'index_name': 'windows_xp'},
    {'target': 'WINDOWS_VISTA', 'os_name': "Microsoft Windows Vista",'index_name': 'windows_vista'},
    {'target': 'WINDOWS_7', 'os_name': "Microsoft Windows 7",'index_name': 'windows_7'},
    {'target': 'WINDOWS_8', 'os_name': "Microsoft Windows 8",'index_name': 'windows_8'},
    {'target': 'WINDOWS_8.1', 'os_name': "Microsoft Windows 8.1",'index_name': 'windows_8.1',},
    {'target': 'WINDOWS_10', 'os_name': "Microsoft Windows 10",'index_name': 'windows_10'},
    {'target': 'WINDOWS_SERVER_2008', 'os_name': "Microsoft Windows Server 2008",'index_name': 'windows_server_2008'},
    {'target': 'WINDOWS_SERVER_2008_R2', 'os_name': "Microsoft Windows Server 2008 R2",'index_name': 'windows_server_2008'},
    {'target': 'WINDOWS_SERVER_2012', 'os_name': "Microsoft Windows Server 2012",'index_name': 'windows_server_2012'},
    {'target': 'WINDOWS_SERVER_2012_R2', 'os_name': "Microsoft Windows Server 2012 R2",'index_name': 'windows_server_2012'},
    {'target': 'WINDOWS_SERVER_2016', 'os_name': "Microsoft Windows Server 2016",'index_name': 'windows_server_2016'},
    {'target': 'WINDOWS_SERVER_2019', 'os_name': "Microsoft Windows Server 2019",'index_name': 'windows_server_2019',},
]
for architecture, architecture_extension in architecture_name_extension.items():
    for system_data_case in target_name_index_system_data:
        target_system_data = system_data_case.copy()
        target_system_data.update(common_system_data)
        target_system_data['target'] += architecture_extension
        target_system_data['architecture'] = architecture
        system_data.append(target_system_data)

system_data_ids = [system['target'] for system in system_data]


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
def mock_system(request, mock_agent):
    control_service('start', daemon='wazuh-analysisd')
    control_service('stop', daemon='wazuh-db')
    control_service('stop', daemon='wazuh-modulesd')

    vd.clean_vd_tables(agent=mock_agent)

    # Modify the necessary databases
    vd.modify_system(os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=request.param['name'],
                     os_arch=request.param['architecture'], agent_id=mock_agent)
    vd.insert_osinfo(os_name=request.param['os_name'], os_release=request.param['os_release'],
                     architecture=request.param['architecture'], agent=mock_agent)
    vd.insert_hotfix(agent=mock_agent)
    vd.insert_vulnerability(cveid='CWE-000', operation='less than', operation_value='1.0.0',
                            package='test', target=request.param['target'])
    vd.insert_package(agent=mock_agent)

    # Insert a vulnerability in the NVD_CVE table since this is needed
    # for the vulnerability detector to generate the required log.
    query_string = "INSERT INTO NVD_CVE \
                    (NVD_METADATA_YEAR, CVE_ID, CWE_ID, ASSIGNER, DESCRIPTION, VERSION, PUBLISHED, LAST_MODIFIED) \
                    VALUES (0, 'CVE-000', 'CWE-000', 'WAZUH', 'Wazuh integration test NVD vulnerability', '4.0', 0, 1)"
    vd.make_query(vd.CVE_DB_PATH, [query_string])

    truncate_file(LOG_FILE_PATH)

    control_service('start', daemon='wazuh-db')
    # Update sync status for both packages and hotfixes
    vd.update_sync_info(agent=mock_agent, component="syscollector-packages")
    vd.update_sync_info(agent=mock_agent, component="syscollector-hotfixes")

    control_service('start', daemon='wazuh-modulesd')

    yield request.param

    # Clean tables
    vd.clean_vd_tables(agent=mock_agent)


@pytest.mark.skip(reason="It will be blocked by wazuh/wazuh#9309, when it is solved we can enable again this test")
def test_window_version_indexing(get_configuration, configure_environment,
                                 configure_local_internal_options_module, restart_modulesd,
                                 check_cve_db, mock_system, file_monitoring):
    log_monitor.start(
        timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            rf"The CPE 'o:microsoft:{mock_system['index_name']}:(-|r2|{mock_system['os_release']}):" +
            rf"({mock_system['os_release']})?:::::{mock_system['architecture']}:' from the agent '.*' was indexed."
        ),
        error_message=f"{mock_system['os_name']} was not indexed"
    )
