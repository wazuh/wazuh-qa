# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
from time import sleep

import pytest
import wazuh_testing.vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)

# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'cpe_indexing.yaml')
custom_msu_json_path = os.path.join(test_data_path, 'custom_msu.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED),
               'MSU_JSON_PATH': custom_msu_json_path}]
metadata = [{'nvd_json_path': os.path.join(test_data_path, vd.CUSTOM_NVD_FEED)}]
ids = ['cpe_index_configuration']

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)

system_data = [
    {"target": "WINDOWS_SERVER_2013", "os_name": "Microsoft Windows Server 2003",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2003",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2013_R2", "os_name": "Microsoft Windows Server 2003 R2",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2003",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_XP", "os_name": "Microsoft Windows XP",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_xp",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_VISTA", "os_name": "Microsoft Windows Vista",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_vista",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_7", "os_name": "Microsoft Windows 7",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_7",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_8", "os_name": "Microsoft Windows 8",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_8",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_8.1", "os_name": "Microsoft Windows 8.1",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_8.1",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_10", "os_name": "Microsoft Windows 10",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_10",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2008", "os_name": "Microsoft Windows Server 2008",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2008",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2008_R2", "os_name": "Microsoft Windows Server 2008 R2",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2008",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2012", "os_name": "Microsoft Windows Server 2012",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2012",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2012_R2", "os_name": "Microsoft Windows Server 2012 R2",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2012",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2016", "os_name": "Microsoft Windows Server 2016",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2016",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2019", "os_name": "Microsoft Windows Server 2019",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2019",
     "os_release": "1000", "architecture": "x86_64"},
    {"target": "WINDOWS_SERVER_2013_I386", "os_name": "Microsoft Windows Server 2003",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2003",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2013_R2_I386", "os_name": "Microsoft Windows Server 2003 R2",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2003",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_XP_I386", "os_name": "Microsoft Windows XP",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_xp",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_VISTA_I386", "os_name": "Microsoft Windows Vista",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_vista",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_7_I386", "os_name": "Microsoft Windows 7",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_7",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_8_I386", "os_name": "Microsoft Windows 8",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_8",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_8.1_I386", "os_name": "Microsoft Windows 8.1",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_8.1",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_10_I386", "os_name": "Microsoft Windows 10",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_10",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2008_I386", "os_name": "Microsoft Windows Server 2008",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2008",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2008_R2_I386", "os_name": "Microsoft Windows Server 2008 R2",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2008",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2012_I386", "os_name": "Microsoft Windows Server 2012",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2012",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2012_R2_I386", "os_name": "Microsoft Windows Server 2012 R2",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2012",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2016_I386", "os_name": "Microsoft Windows Server 2016",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2016",
     "os_release": "1000", "architecture": "x86"},
    {"target": "WINDOWS_SERVER_2019_I386", "os_name": "Microsoft Windows Server 2019",
     "os_major": "10", "os_minor": "0", "name": "windows", "index_name": "windows_server_2019",
     "os_release": "1000", "architecture": "x86"},
]

system_data_ids = [system['target'] for system in system_data]


@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=system_data, ids=system_data_ids)
def mock_system(request):
    control_service('stop', daemon='wazuh-db')

    vd.clean_vd_tables(agent='000')

    # Modify the necessary databases
    vd.modify_system(os_name=request.param['os_name'], os_major=request.param['os_major'],
                     os_minor=request.param['os_minor'], name=request.param['name'],
                     os_arch=request.param['architecture'])
    vd.insert_osinfo(os_name=request.param['os_name'], os_release=request.param['os_release'],
                     architecture=request.param['architecture'])
    vd.insert_hotfix()
    vd.insert_vulnerability(cveid='CWE-000', operation='less than', operation_value='1.0.0',
                            package='test', target=request.param['target'])
    vd.insert_package()

    # Insert a vulnerability in the NVD_CVE table since this is needed
    # for the vulnerability detector to generate the required log.
    query_string = "INSERT INTO NVD_CVE \
                    (NVD_METADATA_YEAR, CVE_ID, CWE_ID, ASSIGNER, DESCRIPTION, VERSION, PUBLISHED, LAST_MODIFIED) \
                    VALUES (0, 'CVE-000', 'CWE-000', 'WAZUH', 'Wazuh integration test NVD vulnerability', '4.0', 0, 1)"
    vd.make_query(vd.CVE_DB_PATH, [query_string])

    truncate_file(LOG_FILE_PATH)

    control_service('start', daemon='wazuh-db')

    yield request.param

    control_service('stop', daemon='wazuh-db')

    # Clean tables
    vd.clean_vd_tables(agent='000')

    control_service('start', daemon='wazuh-db')


@pytest.mark.skip(reason="It will be blocked by wazuh/wazuh#9309, when it was solve we can enable again this test")
def test_window_version_indexing(get_configuration, configure_environment, restart_modulesd, check_cve_db, mock_system):
    wazuh_log_monitor.start(
        timeout=vd.VULN_DETECTOR_EXTENDED_GLOBAL_TIMEOUT,
        update_position=False,
        callback=vd.make_vuln_callback(
            rf"The CPE 'o:microsoft:{mock_system['index_name']}:(-|r2|{mock_system['os_release']}):" +
            rf"({mock_system['os_release']})?:::::{mock_system['architecture']}:' from the agent '.*' was indexed."
        ),
        error_message=f"{mock_system['os_name']} was not indexed"
    )
