import os
import pytest
from wazuh_testing.tools import file
from wazuh_testing.tools import configuration
from ContextMigrationTool import ContextMigrationTool

test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')

test_cases_path = os.path.join(test_data_path, 'test_cases')
feed_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data')


# Configuration and cases data
test_invalid_feeds_path = os.path.join(test_cases_path, 'cases_invalid_feed.yaml')

test_input_empty_feed_path = os.path.join(feed_path, 'input_feed', 'invalid_feed', 'empty_feed.json')
test_input_txt_feed_path = os.path.join(feed_path, 'input_feed', 'invalid_feed', 'feed.txt')
test_input_invalid_json_feed_path = os.path.join(feed_path, 'input_feed', 'invalid_feed', 'invalid_feed_json.json')
test_input_invalid_xml_feed_path = os.path.join(feed_path, 'input_feed', 'invalid_feed', 'invalid_feed_xml.xml')



test_output_feed_path = os.path.join(feed_path, 'output_feed', 'cve5.json')

_, configuration_metadata, test_case_ids = configuration.get_test_cases_data(test_invalid_feeds_path)

# Set offline custom feeds configuration
to_modify = ['CUSTOM_EMPTY_FEED_JSON_PATH', 'CUSTOM_TXT_FEED_JSON_PATH', 'CUSTOM_INVALID_JSON_PATH',
             'CUSTOM_INVALID_XML_PATH']
new_values = [test_input_empty_feed_path, test_input_txt_feed_path, test_input_invalid_json_feed_path,
              test_input_invalid_xml_feed_path]

configuration_metadata = configuration.update_configuration_template(configuration_metadata, to_modify, new_values)


@pytest.mark.parametrize('metadata', configuration_metadata, ids=test_case_ids)
def test_invalid_feed(metadata):

    format = metadata['format']

    cmt = ContextMigrationTool(f"-i {config_file}")

    # Validate output file is a correct json
    assert file.validate_json_file(test_output_feed_path), "File is not JSON 'parseable'"
