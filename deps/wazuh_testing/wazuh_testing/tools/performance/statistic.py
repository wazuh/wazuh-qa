# Copyright (C) 2015-2021, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

from tempfile import gettempdir
import csv
import logging
from datetime import datetime
from os.path import basename, isfile, join, splitext
from threading import Thread, Event
from time import sleep

import wazuh_testing.tools as tls

logger = logging.getLogger('wazuh-statistics-monitor')
logger.setLevel(logging.INFO)


class StatisticMonitor:
    """This class generates a Python object to monitor the statistics file generated by Wazuh.

    There are four files: wazuh-analysisd.state, wazuh-remoted.state, wazuh-agentd.state and wazuh-logcollector.state
    and each one of them has unique characteristics and data. This class will parse the file, extract the data to a
    Python dictionary and then create a CSV file.

    Attributes:
        time_step (int): Time between intervals.
        target (str, optional): target file to monitor.
        dst_dir (str, optional): path to store the file.
    """
    def __init__(self, target='agent', time_step=5, dst_dir=gettempdir()):
        self.event = None
        self.thread = None
        self.time_step = time_step
        self.target = target
        self.dst_dir = dst_dir
        self.parse_json = False

        if self.target == 'agent':
            self.statistics_file = tls.AGENT_STATISTICS_FILE
        elif self.target == 'logcollector':
            self.statistics_file = tls.LOGCOLLECTOR_STATISTICS_FILE
            self.parse_json = True
        elif self.target == 'remote':
            self.statistics_file = tls.REMOTE_STATISTICS_FILE
        elif self.target == 'analysis':
            self.statistics_file = tls.ANALYSIS_STATISTICS_FILE
        else:
            raise ValueError(f'The target {self.target} is not a valid one.')

        state_file = splitext(basename(self.statistics_file))[0]
        self.csv_file = join(self.dst_dir, f'{state_file}.csv')

    def parse_state_file(self):
        """Read the data from the statistics file generated by Wazuh

        Returns:
            dict: dictionary containing all the data from the statistics file
        """
        logging.info("Getting statistics data from {}".format(self.statistics_file))
        data = {'Timestamp': datetime.now().strftime('%H:%M:%S')}
        with open(self.statistics_file) as state_file:
            for line in state_file:
                if line.rstrip() and line.rstrip()[0] != '#':
                    key, value = line.splitlines()[0].split('=')
                    data[key] = value.split("'")[1]
        return data

    def _write_csv(self, data):
        """Write the data collected from the .state into a CSV file

        Args:
            data (dict): dictionary containing the info from the .state file.
        """
        header = not isfile(self.csv_file)
        with open(self.csv_file, 'a', newline='') as f:
            csv_writer = csv.writer(f)
            if header:
                csv_writer.writerow(list(data))

            csv_writer.writerow(list(data.values()))
        logger.debug(f'Added new entry in {self.csv_file}')

    def _monitor_stats(self):
        while not self.event.is_set():
            data = dict()
            try:
                data = self.parse_state_file()
            except Exception as e:
                logger.error(f'Exception with {self.statistics_file} | {str(e)}')
            finally:
                self._write_csv(data)
            sleep(self.time_step)

    def run(self):
        self.event = Event()
        self.thread = Thread(target=self._monitor_stats)
        self.thread.start()

    def start(self):
        self.run()
        logger.info(f'Started monitoring statistics from {self.statistics_file}')

    def shutdown(self):
        self.event.set()
        self.thread.join()
