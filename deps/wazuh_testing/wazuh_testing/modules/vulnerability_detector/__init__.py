import os
import json
from datetime import datetime, timedelta
from copy import deepcopy

from wazuh_testing.tools.time import parse_date_time_format
from wazuh_testing.db_interface import agent_db, cve_db


# Timeouts
T_5 = 5
T_10 = 10
T_15 = 15
T_20 = 20
T_60 = 60
T_40 = 40
T_180 = 180
T_360 = 360
T_800 = 800

CUSTOM_VULNERABLE_PACKAGES = 'custom_vulnerable_packages.json'
CUSTOM_NVD_FEED = 'custom_nvd_feed.json'
CUSTOM_NVD_ALTERNATIVE_FEED = 'custom_nvd_alternative_feed.json'
CUSTOM_REDHAT_JSON_FEED = 'custom_redhat_json_feed.json'
CUSTOM_REDHAT_OVAL_FEED = 'custom_redhat_oval_feed.xml'
CUSTOM_CANONICAL_OVAL_FEED = 'custom_canonical_oval_feed.xml'
CUSTOM_DEBIAN_OVAL_FEED = 'custom_debian_oval_feed.xml'
CUSTOM_DEBIAN_JSON_FEED = 'custom_debian_json_feed.json'
CUSTOM_MSU_JSON_FEED = 'custom_msu.json'
CUSTOM_CPE_HELPER = 'custom_cpe_helper.json'
CUSTOM_GENERIC_CPE_HELPER = 'custom_generic_cpe_helper.json'
CUSTOM_ARCHLINUX_JSON_FEED = 'custom_archlinux_feed.json'
CUSTOM_ALAS_JSON_FEED = 'custom_alas_feed.json'
CUSTOM_ALAS2_JSON_FEED = 'custom_alas2_feed.json'
CUSTOM_SUSE_OVAL_FEED = 'custom_suse_oval_feed.xml'

VULNERABILITY_DETECTOR_PREFIX = r'.*wazuh-modulesd:vulnerability-detector.*'

VULNERABLE_PACKAGES = [
    {
        "name": "custom-package-0",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-000"
    },
    {
        "name": "custom-package-1",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-001"
    },
    {
        "name": "custom-package-2",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-002"
    },
    {
        "name": "custom-package-3",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-003"
    },
    {
        "name": "custom-package-4",
        "version": "1.0.0",
        "vendor": "wazuh-mocking",
        "cveid": "CVE-004"
    }
]

SUSE_SYSTEM_PACKAGE = {
    'SLES15': [
        {
            "name": "sle-module-basesystem-release",
            "version": "15.2",
            "format": "rpm",
            "vendor": "SUSE LLC <https://www.suse.com/>"
        }
    ]
}


def update_feed_path_configurations(configurations, metadata, feeds_path):
    """Replace feed path tags in the configuration template, using the metadata information.

    Args:
        configurations (list(dict)): List of configuration templates.
        metadata (list(dict)): List of configuration templates metadata.
        feeds_path (str): Absolute path where the feeds are located.

    Returns:
        list(dict): List of configurations with the feeds path updated.
    """
    new_configurations = deepcopy(configurations)

    for index, _ in enumerate(configurations):
        if 'json_feed' in metadata[index] and metadata[index]['json_feed'] is not None:
            new_configurations[index] = json.loads(json.dumps(new_configurations[index]).
                                                   replace(metadata[index]['json_feed_tag'],
                                                   os.path.join(feeds_path, metadata[index]['provider_name'],
                                                                metadata[index]['json_feed'])))

        if 'oval_feed' in metadata[index] and metadata[index]['oval_feed'] is not None:
            new_configurations[index] = json.loads(json.dumps(new_configurations[index]).
                                                   replace(metadata[index]['oval_feed_tag'],
                                                   os.path.join(feeds_path, metadata[index]['provider_name'],
                                                                metadata[index]['oval_feed'])))

        if 'nvd_feed_tag' in metadata[index] and 'nvd_feed' in metadata[index]:
            new_configurations[index] = json.loads(json.dumps(new_configurations[index]).
                                                   replace(metadata[index]['nvd_feed_tag'],
                                                   os.path.join(feeds_path, 'nvd', metadata[index]['nvd_feed'])))

    return new_configurations


def insert_vulnerable_packages(agent_id='000', vendor='Red Hat, Inc.', count=5):
    """Insert vulnerable packages to an agent.

    Args:
        agent_id (str): Agent ID.
        vendor (str): Package vendor.
        count (int): Number of vulnerable packages to insert.

    Raises:
        ValueError: If count parameter has an invalid value.
    """
    if count > len(VULNERABLE_PACKAGES):
        raise ValueError(f"Count parameter must be lower or equal than {len(VULNERABLE_PACKAGES)}")

    for package in VULNERABLE_PACKAGES[:count]:
        agent_db.insert_package(name=package['name'], version=package['version'], source=package['name'],
                                agent_id=agent_id, vendor=vendor)


def insert_vulnerabilities_agent_inventory(agent_id='000', status='VALID'):
    """Insert vulnerabilities in the agent inventory.

    Args:
        agent_id (str): Agent ID.
        status (str): Vulnerability status (PENDING, VALID, OBSOLETE).
    """
    for package in VULNERABLE_PACKAGES:
        agent_db.insert_vulnerability_in_agent_inventory(agent_id=agent_id, name=package['name'],
                                                         cve=package['cveid'], status=status)


def insert_suse_system_package(agent_id='000', version='SLES15'):
    """Insert suse OS package to an agent.

    Args:
        agent_id (str): Agent ID.
        version (str): Package version.

    Raises:
        ValueError: If version parameter has an invalid value.
    """
    if version not in SUSE_SYSTEM_PACKAGE:
        raise ValueError(f"Suse system parameter invalid.")

    for package in SUSE_SYSTEM_PACKAGE[version]:
        agent_db.insert_package(name=package['name'], version=package['version'], source=package['name'],
                                agent_id=agent_id, vendor=package['vendor'])


def feed_is_recently_updated(provider_name, provider_os, threshold_weeks):
    """Check if the provider OS feed is recently updated according to a specified threshold.

    Args:
        provider_name (str): Provider name (example: Canonical).
        provider_os (str): Provider OS (example: FOCAL).
        threshold_weeks (int): Number of weeks to decide if the feed is recently updated.

    Returns:
        boolean: True if the feed is considered recently updated, False otherwise.
    """
    if provider_name == 'National Vulnerability Database':
        current_year = datetime.now().year
        feed_update_timestamp = cve_db.get_nvd_metadata_timestamp(year=current_year)
    else:
        feed_update_timestamp = cve_db.get_metadata_timestamp(provider_os=provider_os)

    if feed_update_timestamp is None:
        raise ValueError(f"Could not find the feed update timestamp data for {provider_os}")

    # Parse the metadata timestamp to a common format
    feed_update_timestamp = datetime.strptime(parse_date_time_format(feed_update_timestamp), '%Y-%m-%d %H:%M:%S')

    # Return whether or not the timestamp exceeds the threshold_weeks
    return False if (datetime.now() - timedelta(weeks=threshold_weeks)) > feed_update_timestamp else True
