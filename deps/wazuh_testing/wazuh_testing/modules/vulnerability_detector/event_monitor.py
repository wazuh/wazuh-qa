import re

from wazuh_testing.modules import vulnerability_detector as vd
from wazuh_testing.tools import LOG_FILE_PATH, ALERT_FILE_PATH
from wazuh_testing.tools.monitoring import FileMonitor


def make_vuln_callback(pattern, prefix=vd.VULNERABILITY_DETECTOR_PREFIX):
    """Create a callback function from a text pattern.

    It already contains the vulnerability-detector prefix.

    Args:
        pattern (str): String to match on the log.
        prefix (str): regular expression used as prefix before the pattern.

    Returns:
        lambda: function that returns if there's a match in the file

    Examples:
        >>> callback_bionic_update_started = make_vuln_callback("Starting Ubuntu Bionic database update")
    """
    pattern = r'\s+'.join(pattern.split())
    regex = re.compile(r'{}{}'.format(prefix, pattern))

    return lambda line: regex.match(line) is not None


def callback_detect_vulnerability_scan_sleeping(line):
    msg = rf"{vd.VULNERABILITY_DETECTOR_PREFIX} Sleeping for (.*)..."
    match = re.match(msg, line)

    return match.group(1) if match is not None else ""


def check_vuln_detector_event(file_monitor=None, callback='', error_message=None, update_position=True,
                              timeout=vd.T_60, prefix=vd.VULNERABILITY_DETECTOR_PREFIX, accum_results=1,
                              file_to_monitor=LOG_FILE_PATH):
    """Check if a vulnerability event occurs

    Args:
        file_monitor (FileMonitor): FileMonitor object to monitor the file content.
        callback (str): log regex to check in Wazuh log
        error_message (str): error message to show in case of expected event does not occur
        update_position (boolean): filter configuration parameter to search in Wazuh log
        timeout (str): timeout to check the event in Wazuh log
        prefix (str): log pattern regex
        accum_results (int): Accumulation of matches.
    """
    file_monitor = FileMonitor(file_to_monitor) if file_monitor is None else file_monitor
    error_message = f"Could not find this event in {file_to_monitor}: {callback}" if error_message is None else \
        error_message

    file_monitor.start(timeout=timeout, update_position=update_position, accum_results=accum_results,
                       callback=make_vuln_callback(callback, prefix), error_message=error_message)


def check_vulnerability_detector_disabled():
    """Check if the vulnerability detector module is disabled"""
    check_vuln_detector_event(callback='DEBUG: Module disabled. Exiting...', timeout=vd.T_10)


def check_vulnerability_scan_start(log_monitor=None, timeout=vd.T_10):
    """Check the vulnerability scan log event.

    Args:
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout, callback='Starting vulnerability scan')


def check_scan_time_interval(seconds_number, log_monitor=None, timeout=vd.T_10):
    """Check the vulnerability scan interval log event.

    Args:
        seconds_number (int): Number of interval seconds.
        log_monitor (FileMonitor): Log monitor.
        timeout (int): Timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=fr".*wm_vuldet_run_sleep.*Sleeping for {seconds_number} seconds...")


def check_vulnerability_affects_log(log_monitor=None, package=None, cve=None, agent_id='000', timeout=vd.T_60):
    """Check if inserted vulnerable packages are reported by vulnerability detector.

    Args:
        log_monitor (FileMonitor): FileMonitor object to monitor the file content
        package (str): Name of custom package to check. Example: 'firefox-0'
        cve (str): Package CVE. Example: 'CVE-2019-11764'
        agent_id (str): Agent ID.
        timeout (int): Timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"The '{package}' package .* from agent '{agent_id}' is vulnerable to '{cve}'",
                              error_message=f"Could not find the report which says that the package {package} is "
                                            f"vulnerable with {cve}")


def check_vulnerability_affects_alert(alert_monitor=None, package=None, cve=None, agent_id='000', timeout=vd.T_20):
    """Check if inserted vulnerable packages are reported by vulnerability detector.
    Args:
        alert_monitor (FileMonitor): FileMonitor object to monitor the Wazuh alerts
        package (str): Name of custom package to check. Example: 'firefox-0'
        cve (str): Package CVE. Example: 'CVE-2019-11764'
    """
    check_vuln_detector_event(file_monitor=alert_monitor, timeout=timeout, file_to_monitor=ALERT_FILE_PATH,
                              callback=fr'.*"agent":."id":"{agent_id}".*{cve} affects {package}', prefix='.*',
                              error_message=f"Could not find the report which says that {cve} affects the package "
                                            f"{package}")


def check_vulnerability_scan_remove_alert(package, cve, agent_id='000', alert_monitor=None, timeout=vd.T_10):
    """Check if removed vulnerable packages are reported by vulnerability detector in the alerts.
    Args:
        alert_monitor (FileMonitor): FileMonitor object to monitor the Wazuh alerts
        package (str): Name of custom package to check. Example: 'firefox-0'
        cve (str): Package CVE. Example: 'CVE-2019-11764'
    """
    check_vuln_detector_event(file_monitor=alert_monitor, timeout=timeout, file_to_monitor=ALERT_FILE_PATH, prefix='.*',
                              callback=fr'.*"agent":."id":"{agent_id}".*{cve} affecting {package} was solved')


def check_provider_database_update_start_log(provider_name, timeout=vd.T_5):
    """Check the provider database update start event in ossec.log

    Args:
        provider_name (str): Provider name of the downloaded feed.
        timeout (int): Timeout of the event.
    """
    check_vuln_detector_event(timeout=timeout, callback=f"Starting '{provider_name}' database update",
                              error_message=f"Could not find {provider_name} update starting log")


def check_provider_database_update_finish_log(log_monitor=None, provider_name='', timeout=vd.T_20):
    """Check the provider database update finish event in ossec.log

    Args:
        log_monitor (FileMonitor): Log monitor.
        provider_name (str): Provider name of the downloaded feed.
        timeout (int): Timeout of the event.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"The update of the '{provider_name}' feed finished",
                              error_message=f"Could not find {provider_name} feed finished log")


def check_vulnerability_full_scan_start(log_monitor=None, timeout=vd.T_40, agent_id='000'):
    """Check if a full scan event is reported by vulnerability detector in the logs.

    Args:
        log_monitor (FileMonitor): Log monitor.
        timeout (int): Event timeout.
        agent_id (str): Agent ID.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"A full scan will be run on agent '{agent_id}'",
                              error_message='No full scan start detected in log.')


def check_vulnerability_full_scan_end(log_monitor=None, agent_id='000'):
    """Check if the full scan end is reported by vulnerability detector in the logs.

    Args:
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=vd.T_40,
                              callback=f"Finished vulnerability assessment for agent '{agent_id}'",
                              error_message='No full scan end has been detected in the log.')


def check_fetching_feed_log(feed_path):
    """Check the fetching feed file event in ossec.log

    Args:
        feed_path (str): Path of the feed to be fetched.
    """
    check_vuln_detector_event(timeout=vd.T_20, callback=rf"Fetching .* from '{feed_path}'",
                              error_message=f"Could not find {feed_path} feed fetching log")


def check_refresh_feed_log(provider_name):
    """Check the inserting feed event in ossec.log

    Args:
        provider_name (str): Provider to be fetched.
    """
    check_vuln_detector_event(timeout=vd.T_20, callback=f"Refresh of '{provider_name}' database finished",
                              error_message=f"Could not find {provider_name} feed refresh log")


def check_configuration_error():
    """Check the configuration error event in ossec.log"""
    check_vuln_detector_event(timeout=vd.T_180, callback=r".* \(\d+\): Configuration error at.*",
                              error_message="Could not find the event 'Configuration error at 'etc/ossec.conf' "
                                            'in ossec.log', prefix='.*wazuh-modulesd.*')


def check_invalid_option_log(provider_name):
    """Check the invalid option event in ossec.log

    Args:
        provider_name (str): Provider to be fetched.
    """
    check_vuln_detector_event(timeout=vd.T_180, callback=rf".*Invalid option 'os' for '{provider_name}' provider.*",
                              error_message="Could not find the event 'Configuration error at 'etc/ossec.conf' "
                                            'in ossec.log', prefix='.*wazuh-modulesd.*')


def check_retry_interval_log(seconds_number, num_expected_events=1):
    """Check the retry interval event in ossec.log

    Args:
        seconds_number (int): Number of seconds before retrying the vuln scan.
    """
    check_vuln_detector_event(timeout=vd.T_20, accum_results=num_expected_events,
                              callback=f"Going to sleep {seconds_number} seconds before retrying pending agents")


def check_analyzing_oval_vulnerabilities_log(agent_id='000'):
    """Check the analyzing oval vulnerabilities event in ossec.log

    Args:
        agent_id (str): Agent ID.
    """
    check_vuln_detector_event(timeout=vd.T_20, callback=f"Analyzing OVAL vulnerabilities for agent '{agent_id}'")


def check_obtaining_software_failure_log(agent_id='000', num_attemps=5):
    """Check the obtaining software fail event in ossec.log

    Args:
        agent_id (str): Agent ID.
        num_attemps (int): Number of retry interval attemps.
    """
    check_vuln_detector_event(timeout=vd.T_20,
                              callback=f"The software of the agent '{agent_id}' could not be obtained after "
                                       f"{num_attemps} attempts. Skipping agent until the next scan.")


def check_nvd_download_log(update_year):
    """Check that the NVD download has started.

    Args:
        update_year (int): Year specified in <update_from_year>.
    """
    check_vuln_detector_event(timeout=vd.T_40, callback=fr".*Downloading .*nvdcve-\d.\d-{update_year}.meta.*",
                              error_message='NVD feed download did not started',
                              prefix=r'.*wazuh-modulesd:download.*')


def check_invalid_provider_update_from_year_log(provider):
    """Check that the warning message is logged correctly.

    Args:
        provider (str): Provider name.
    """
    if provider == 'redhat':
        callback = "INFO: 'update_from_year' option at module 'vulnerability-detector' is deprecated"
    elif provider == 'msu':
        callback = "WARNING: 'update_from_year' option cannot be used for 'msu' provider."
    else:
        callback = f"WARNING: Invalid option 'update_from_year' for '{provider}' provider at 'vulnerability-detector'"

    check_vuln_detector_event(timeout=vd.T_5, callback=callback, prefix=r".*",
                              error_message="ERROR: Invalid content for 'update_from_year' option at module "
                                            "'vulnerability-detector'")


def check_baseline_scan_start_log(agent_id='000', timeout=vd.T_40):
    """Check that the baseline scan is logged correctly.

    Args:
        agent_id (str): Agent id.
        timeout (int): Event timeout.
    """
    check_vuln_detector_event(timeout=timeout, callback=f"A baseline scan will be run on agent '{agent_id}'",
                              error_message='ERROR: No baseline scan start has been detected in the log.')


def check_partial_scan_start_log(agent_id='000', timeout=vd.T_40, log_monitor=None):
    """Check that the partial scan start is logged correctly.

    Args:
        agent_id (str): Agent id.
        timeout (int): Event timeout.
        log_monitor (FileMonitor): Log monitor.
    """
    check_vuln_detector_event(timeout=timeout, file_monitor=log_monitor,
                              callback=f"A partial scan will be run on agent '{agent_id}'",
                              error_message='ERROR: No partial scan start has been detected in the log.')


def check_removal_package_alert(test_package_cve, test_package_name):
    """Check that the package solved message is logged correctly.

    Args:
        test_packet_cve (str): Vulnerability name.
        test_packet_name (str): Package name.
    """
    check_vuln_detector_event(timeout=vd.T_60, prefix=r".*", file_to_monitor=ALERT_FILE_PATH,
                              callback=f"{test_package_cve} affecting {test_package_name} was solved",
                              error_message=f"ERROR: No alert for '{test_package_name}' has been detected in the log.")


def check_not_vulnerable_package(test_package_cve, test_package_name):
    """Check that the package no longer vulnerable is logged correctly.

    Args:
        test_packet_cve (str): Vulnerability name.
        test_packet_name (str): Package name.
    """
    check_vuln_detector_event(timeout=vd.T_15,
                              callback=f"Package '{test_package_name}' not vulnerable to '{test_package_cve}'",
                              error_message=f"ERROR: Not vulnerable package '{test_package_name}' has been detected in"
                                            'the log.')


def check_full_scan_start_finish(log_monitor, agent_id='000'):
    """Check that the full scan start and finish is logged correctly.

    Args:
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
    """
    # Wait for full scan event log
    check_vulnerability_full_scan_start(log_monitor=log_monitor, agent_id=agent_id)

    # Wait for full scan event log completion
    check_vulnerability_full_scan_end(log_monitor=log_monitor, agent_id=agent_id)


def check_unavailable_vulnerability_agent_data(log_monitor=None, agent_id='000', timeout=vd.T_20):
    """Check that there is no vulnerability data for an specific agent (log).

    Args:
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"Unavailable vulnerability data for the agent '{agent_id}' OS. Skipping it")


def check_cpe_helper_packages_indexed(package_name='', package_vendor='wazuh-mocking', log_monitor=None,
                                      agent_id='000', timeout=vd.T_10):
    """Check in the log that a CPE helper package data was indexed.

    Args:
        package_name (str): Package name.
        package_vendor (str): Package vendor.
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=rf"The CPE .*a:{package_vendor}:{package_name}.* from the agent '{agent_id}' "
                                       'was indexed')


def check_cpe_helper_system_indexed(index_system_name='', log_monitor=None, agent_id='000', timeout=vd.T_10):
    """Check in the log that a CPE helper system data was indexed.

    Args:
        index_system_name (str): CPE system index name.
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=rf"The CPE .*o:.*{index_system_name}.* from the agent '{agent_id}' was indexed")


def check_oval_detect_potential_vulnerabilities(vulnerabilities_number, log_monitor=None, agent_id='000',
                                                timeout=vd.T_10):
    """Check in the log that OVAL detected potential vulnerabilities

    Args:
        vulnerabilities_number (int): Number of expected vulnerabilities-
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"The OVAL found a total of '{vulnerabilities_number}' potential "
                                       f"vulnerabilities for agent '{agent_id}'")


def check_nvd_detect_potential_vulnerabilities(vulnerabilities_number, log_monitor=None, agent_id='000',
                                               timeout=vd.T_10):
    """Check in the log that NVD detected potential vulnerabilities

    Args:
        vulnerabilities_number (int): Number of expected vulnerabilities-
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"The NVD found a total of '{vulnerabilities_number}' potential "
                                       f"vulnerabilities for agent '{agent_id}'")


def check_oval_report_vulnerabilities(vulnerabilities_number, log_monitor=None, agent_id='000', timeout=vd.T_10):
    """Check in the log that OVAL reported vulnerabilities

    Args:
        vulnerabilities_number (int): Number of expected vulnerabilities-
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"A total of '{vulnerabilities_number}' vulnerabilities have been reported "
                                       f"for agent '{agent_id}' thanks to the 'vendor' feed")


def check_nvd_report_vulnerabilities(vulnerabilities_number, log_monitor=None, agent_id='000', timeout=vd.T_10):
    """Check in the log that NVD reported vulnerabilities

    Args:
        vulnerabilities_number (int): Number of expected vulnerabilities-
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=f"A total of '{vulnerabilities_number}' vulnerabilities have been reported "
                                       f"for agent '{agent_id}' thanks to the 'NVD' feed")


def check_vulnerability_scan_finished(log_monitor=None, timeout=vd.T_20):
    """Check that the vulnerability scan has finished.

    Args:
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout, callback='Vulnerability scan finished')


def check_error_when_updating_provider_db(provider_feed_name, log_monitor=None, timeout=vd.T_20):
    """Check that has ocurr an error when updating the provider data.

    Args:
        provider_feed_name (str): Provider feed name.
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=rf"Failed when updating '{provider_feed_name}' database")


def check_error_when_updating_cve_database(log_monitor=None, timeout=vd.T_20):
    """Check that has ocurr an error when updating the CVE DB.

    Args:
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=r"ERROR: .* CVE database could not be updated.")


def check_cpe_helper_invalid_tag_warning(field='', log_monitor=None, timeout=vd.T_20):
    """Check that a warning message comes out for invalid tags.

    Args:
        field (str): Tag name
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=fr"WARNING: .* Invalid tag found when parsing the CPE dictionary: '{field}'")


def check_cpe_helper_invalid_tag_fail(log_monitor=None, timeout=vd.T_20):
    """Check that a warning message comes out for invalid tags.

    Args:
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=r"DEBUG: .* The 'Wazuh CPE Helper' update has failed, so the NVD feed will "
                              "not be updated.")


def check_cpe_helper_invalid_format_version(log_monitor=None, timeout=vd.T_20):
    """Check that a error message comes out for invalid format version value.

    Args:
        log_monitor (FileMonitor): Log monitor.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=r"ERROR: .* Invalid format version for the CPE helper: .*")


def check_error_inserting_package(log_monitor=None, agent_id='000', timeout=vd.T_20):
    """Check in the log that an error comes out when insert package with a missing tag in the cpe_helper.json file.

    Args:
        log_monitor (FileMonitor): Log monitor.
        agent_id (str): Agent ID.
        timeout (str): timeout to check the event in Wazuh log.
    """
    check_vuln_detector_event(file_monitor=log_monitor, timeout=timeout,
                              callback=fr"ERROR: .* Could not insert the CPEs from the agent '{agent_id}' "
                                       "into the database.")
