# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import re


def callback_detect_vulnerability_scan_started(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* INFO:.*Starting vulnerability scanning'
    match = re.match(msg, line)

    return match is not None


def callback_detect_vulnerability_scan_finished(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* INFO:.*Vulnerability scanning finished'
    match = re.match(msg, line)
    return match is not None


def callback_detect_vulnerability_scan_sleeping(line):
    msg = r'.*wazuh-modulesd:vulnerability-detector.* Sleeping for (.*)...'
    match = re.match(msg, line)

    return match.group(1) if match is not None else ""


def callback_detect_update_from_year_result(line):
    """
    Check if the selected provider was added with the correct year to update sinze
    Also, check if modulesd have failed due to a invalid year selected as update_from_year value

    returns a triple:
    ("result", "provider", "update_from_value")
    result can be: "invalid_year", "provider_added"
    """
    invalid_year_msg = r'.*wazuh-modulesd.*wmodules-vuln-detector.*ERROR: Invalid content for \'update_from_year\' option at module \'vulnerability-detector\''
    invalid_year_match = re.match(invalid_year_msg, line)

    if invalid_year_match is not None:
        return "invalid_year", None, None

    provider_added_msg = r'.*wazuh-modulesd.*Added (.*) feed.*Update since: (.*)\.'
    provider_added_match = re.match(provider_added_msg, line)

    if provider_added_match is not None:
        return "provider_added", provider_added_match.group(1), provider_added_match.group(2)

    return False


def callback_download_redhat_feed_from_year(line):
    download_redhat_from_msg = r'.*wazuh-modulesd.*vulnerability-detector.*download.*access\.redhat\.com.*after=(.*)-.*-.*'
    download_redhat_from_match = re.match(download_redhat_from_msg, line)

    if download_redhat_from_match is not None:
        return download_redhat_from_match.group(1)
    else:
        return False


def callback_detect_vulnerability_detector_disabled(line):
    msg = r'(.*)wazuh-modulesd:vulnerability-detector(.*)DEBUG: Module disabled. Exiting...'
    match = re.match(msg, line)

    return match is not None


def callback_detect_vulnerability_detector_enabled(line):
    msg = r'(.*)wazuh-modulesd:vulnerability-detector(.*)'
    match1 = re.match(msg, line)
    msg = r'(.*)DEBUG: Module disabled. Exiting...(.*)'
    match2 = re.match(msg, line)

    return match1 is not None and match2 is None
